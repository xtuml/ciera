-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("2e49e10f-3016-47ee-8a39-12e683e7075e",
	"21d38790-b93a-4ad6-b0a2-e3ba56baed8a",
	"21d38790-b93a-4ad6-b0a2-e3ba56baed8a",
	'translation_utility_functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b2b245c7-5fd4-4503-ad35-c12f55262f9a",
	112,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'core-architecture::translation_utility_functions');
INSERT INTO DIM_DIA
	VALUES ("b2b245c7-5fd4-4503-ad35-c12f55262f9a",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("32ee8604-1a4b-4c2a-b800-bc33049960ff",
	"00000000-0000-0000-0000-000000000000",
	'load_marks',
	'',
	'select any project_root from instances of Mark where selected.markable_name == "*" and selected.path == "*" and selected.feature_name == "ProjectRoot";
if ( "" != project_root.value ) then
  // Load marks
  LOG::LogInfo( message:"Loading marking data." );
  values[7] = "";
  Mark::load( filename:project_root.value + "/gen/application.mark", values:values );
  
  // Set system properties for system level marks
  select many system_marks from instances of Mark where selected.markable_name == "*" and selected.path == "*";
  for each system_mark in system_marks loop
    PROP::setProperty(key:"io.ciera." + system_mark.feature_name, value:system_mark.value);
  end for;
else
  LOG::LogInfo( message:"No project root specified." );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("32ee8604-1a4b-4c2a-b800-bc33049960ff",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8fd1a3e1-3dd7-4653-b00c-a30a7e7c56d4",
	"00000000-0000-0000-0000-000000000000",
	'pathToPackage',
	'',
	's = param.path;
slash_index = STRING::indexof( haystack:s, needle:"/" );
while ( -1 != slash_index ) loop
  left = STRING::substr( s:s, begin:0, end:slash_index );
  right = STRING::substr( s:s, begin:slash_index + 1, end:-1 );
  s = left + "." + right;
  slash_index = STRING::indexof( haystack:s, needle:"/" );
end while;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("93086f25-6b8a-4be7-843f-99fd09581b89",
	"8fd1a3e1-3dd7-4653-b00c-a30a7e7c56d4",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8fd1a3e1-3dd7-4653-b00c-a30a7e7c56d4",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	"00000000-0000-0000-0000-000000000000",
	'camelCaseName',
	'',
	'name = param.name;
underscore_index = STRING::indexof( haystack:name, needle:"_" );
while ( -1 != underscore_index ) loop
  left = STRING::substr( s:name, begin:0, end:underscore_index );
  right = STRING::substr( s:name, begin:underscore_index + 1, end:-1 );
  name = left + "  " + right;
  underscore_index = STRING::indexof( haystack:name, needle:"_" );
end while;
name = T::sub( format:"c", s:name );
dblspc_index = STRING::indexof( haystack:name, needle:"  " );
while ( -1 != dblspc_index ) loop
  left = STRING::substr( s:name, begin:0, end:dblspc_index );
  right = STRING::substr( s:name, begin:dblspc_index + 1, end:-1 );
  name = left + "_" + right;
  dblspc_index = STRING::indexof( haystack:name, needle:"  " );
end while;
if ( param.start_lower ) then
  left = STRING::substr( s:name, begin:0, end:1 );
  right = STRING::substr( s:name, begin:1, end:-1 );
  name = T::sub( format:"l", s:left ) + right;
end if;
return T::sub( format:"r", s:name );
// TODO make sure already camel cased does not get destroyed',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f8fc42c5-1da5-48dd-9ea5-f10817552941",
	"c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d559dd9d-354d-4a97-a14a-75a81d5fe90f",
	"c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	'start_lower',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f8fc42c5-1da5-48dd-9ea5-f10817552941",
	'');
INSERT INTO PE_PE
	VALUES ("c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fb49b3c5-ba10-462e-966c-52bd055950f5",
	"00000000-0000-0000-0000-000000000000",
	'formatPath',
	'',
	's = param.path;
dot_index = STRING::indexof( haystack:s, needle:"." );
while ( -1 != dot_index ) loop
  left = STRING::substr( s:s, begin:0, end:dot_index );
  right = STRING::substr( s:s, begin:dot_index + 1, end:-1 );
  s = left + "/" + right;
  dot_index = STRING::indexof( haystack:s, needle:"." );
end while;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("a68e6a47-8233-4957-9446-5ba7a2c80f1d",
	"fb49b3c5-ba10-462e-966c-52bd055950f5",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fb49b3c5-ba10-462e-966c-52bd055950f5",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("100a2264-8337-48da-8aea-0e725b5f586a",
	"00000000-0000-0000-0000-000000000000",
	'getFileForInvocable',
	'',
	'invocable = param.invocable;
select one file related by invocable->Function[R427]->ComponentDefinition[R405]->File[R401];
if ( empty file ) then
  select one file related by invocable->PortMessage[R427]->Port[R420]->File[R401];
  if ( empty file ) then
    select one op related by invocable->Operation[R427] where selected.is_class_based;
    select one file related by op->Class[R416]->ComponentDefinition[R408]->File[R401];
    if empty file then
      select one op related by invocable->Operation[R427] where not selected.is_class_based;
      select one file related by op->Class[R416]->File[R401];
      if ( empty file ) then
        select one file related by invocable->AttributeDerivation[R427]->AttributeAccessor[R441]->Attribute[R4510]->Class[R410]->File[R401];
        if ( empty file ) then
          select one file related by invocable->UtilityFunction[R427]->Utility[R4559]->File[R401];
          if ( empty file ) then
            select one file related by invocable->State[R427]->StateMachine[R4751]->File[R401];
            if ( empty file ) then
              select one file related by invocable->Transition[R427]->State[R4757]->StateMachine[R4751]->File[R401];
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
return file;',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("0ee07d5c-04a9-46a9-8e1d-6b8804a09e30",
	"100a2264-8337-48da-8aea-0e725b5f586a",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3ab44839-4426-4754-b12a-0a00ce4dae1a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("100a2264-8337-48da-8aea-0e725b5f586a",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<File>',
	'',
	'',
	'../architecture/file/file.xtuml');
INSERT INTO S_SYNC
	VALUES ("3e30a3db-097a-483d-9e1b-bf92d1fe2b4d",
	"00000000-0000-0000-0000-000000000000",
	'getFileForStatement',
	'',
	'smt = param.smt;
select one invocable related by smt->CodeBlock[R450]->InvocableObject[R4000];
return ::getFileForInvocable( invocable:invocable );',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("257c3572-296a-4026-bb69-d762e987f204",
	"3e30a3db-097a-483d-9e1b-bf92d1fe2b4d",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../architecture/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("3e30a3db-097a-483d-9e1b-bf92d1fe2b4d",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("19b73a57-21bb-4ff4-9333-32fb6edbbe45",
	"00000000-0000-0000-0000-000000000000",
	'getNextBlockNumber',
	'',
	'upper_block = param.upper_block;

// find the most recent child block
select many child_blocks related by upper_block->CodeBlock[R498.''contains''];
block_number = "0";
int_block_number = 0;
if ( not_empty child_blocks ) then
  for each child_block in child_blocks loop
    child_block_number = STRING::atoi( s:STRING::substr( s:child_block.block_number, begin:STRING::strlen( s:upper_block.block_number ) + 1, end:-1 ) );
    if ( child_block_number > int_block_number ) then
      int_block_number = child_block_number;
    end if;
  end for;
  // increment
  block_number = upper_block.block_number + "." + STRING::itoa( i:int_block_number + 1 );
else
  block_number = upper_block.block_number + ".1";;
end if;

return block_number;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("1d44099c-5397-484a-a67c-3dac465e9971",
	"19b73a57-21bb-4ff4-9333-32fb6edbbe45",
	'upper_block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Code Block>',
	'',
	'',
	'../architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("19b73a57-21bb-4ff4-9333-32fb6edbbe45",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	"00000000-0000-0000-0000-000000000000",
	'transformSelector',
	'',
	'obj = param.obj;
rel = param.rel;
other_obj = param.other_obj;

// This function creates selectors for the class and set for a single path
// through a relationship. For single instances, a selectOne or selectMany
// are created based on multiplicity. For sets, a selectMany and is always
// created.

name = "R" + STRING::itoa( i:rel.num ) + "_";
if ( "" != param.phrase ) then
  name = name + T::sub( format:"_", s:param.phrase ) + "_";
end if;
name = name + other_obj.name;

class_type = ::getObjectReference(obj:other_obj);
stream_type = ::getObjectStreamReference(obj:other_obj);

// create the instance selectors
if (Mult::ONE == param.mult) then

  // create ''one'' selector
  create object instance sel of Selector;
  relate sel to obj across R442;
  relate sel to rel across R4512;
  sel.name = name;
  sel.multiplicity = param.mult;

  // link up type
  relate class_type to sel across R446;

else

  // create ''many'' selector
  create object instance sel of Selector;
  relate sel to obj across R442;
  relate sel to rel across R4512;
  sel.name = name;
  sel.multiplicity = param.mult;

  // link up type
  relate stream_type to sel across R446;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f802002f-3a27-4b9c-8c9a-c21fb1e95402",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a519e323-b117-4a03-9435-b88e56c2443d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Inst>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO S_SPARM
	VALUES ("a00a3c72-94d6-4f4c-beaa-7e0d13fe02d0",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'rel',
	"0b0da94a-7a41-41a8-91ae-c91f2fdf7231",
	0,
	'',
	"f802002f-3a27-4b9c-8c9a-c21fb1e95402",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0b0da94a-7a41-41a8-91ae-c91f2fdf7231",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class Relationship>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO S_SPARM
	VALUES ("3e1bf172-6b8d-4933-99da-be71cacdcfbc",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'cond',
	"0a105e88-c4a7-4782-a19a-822614dc2d54",
	0,
	'',
	"a00a3c72-94d6-4f4c-beaa-7e0d13fe02d0",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0a105e88-c4a7-4782-a19a-822614dc2d54",
	"00000000-0000-0000-0000-000000000000",
	'Cond',
	'',
	'',
	'../types/types.xtuml');
INSERT INTO S_SPARM
	VALUES ("e15e91e6-803e-4180-93e6-2daf2e689ef6",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'mult',
	"05a31d0a-15c4-4fe9-84b5-004baff831ec",
	0,
	'',
	"3e1bf172-6b8d-4933-99da-be71cacdcfbc",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("05a31d0a-15c4-4fe9-84b5-004baff831ec",
	"00000000-0000-0000-0000-000000000000",
	'Mult',
	'',
	'',
	'../types/types.xtuml');
INSERT INTO S_SPARM
	VALUES ("6099baa8-2d8e-4a07-bd9a-56da65283e2d",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'other_obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"17bf1127-b819-4a90-8129-8db60979957e",
	'');
INSERT INTO S_SPARM
	VALUES ("ad3019a2-23f1-43c3-b343-ee82998e2828",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'formalizer',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e15e91e6-803e-4180-93e6-2daf2e689ef6",
	'');
INSERT INTO S_SPARM
	VALUES ("17bf1127-b819-4a90-8129-8db60979957e",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ad3019a2-23f1-43c3-b343-ee82998e2828",
	'');
INSERT INTO PE_PE
	VALUES ("8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b5ddd333-6031-4f09-9622-9535567a1342",
	"00000000-0000-0000-0000-000000000000",
	'transformSelectors',
	'',
	'obj = param.obj;

// transform selectors for associations
// form to part
select many form_to_part_rels related by obj->Relationship[R435];
for each rel in form_to_part_rels loop
  select one part_obj related by rel->Class[R434];
  ::transformSelector( obj:obj, rel:rel, phrase:rel.part_phrase, cond:rel.part_cond,
                       mult:rel.part_mult, formalizer:true, other_obj:part_obj );
end for;
// part to form
select many part_to_form_rels related by obj->Relationship[R434];
for each rel in part_to_form_rels loop
  select one form_obj related by rel->Class[R435];
  ::transformSelector( obj:obj, rel:rel, phrase:rel.form_phrase, cond:rel.form_cond,
                       mult:rel.form_mult, formalizer:false, other_obj:form_obj );
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("99546757-b520-4e48-80a2-fe4f989b76d3",
	"b5ddd333-6031-4f09-9622-9535567a1342",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b5ddd333-6031-4f09-9622-9535567a1342",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ddf36709-5c19-46c9-9595-b6a3bd478b37",
	"00000000-0000-0000-0000-000000000000",
	'linkParameter',
	'',
	'invocable = param.invocable;
parm = param.parameter;
// link parameter
select any last_parm related by invocable->FormalParameter[R429];
select one next_parm related by last_parm->FormalParameter[R404.''precedes''];
while ( not_empty next_parm ) loop
  last_parm = next_parm;
  select one next_parm related by last_parm->FormalParameter[R404.''precedes''];
end while;
if ( not_empty last_parm ) then
  relate parm to last_parm across R404.''follows'';
end if;
relate parm to invocable across R429;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("d0a679fe-6069-41d1-950f-cfb28e7fc8d9",
	"ddf36709-5c19-46c9-9595-b6a3bd478b37",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fed25935-b1eb-4525-a58a-b387f230f652",
	"ddf36709-5c19-46c9-9595-b6a3bd478b37",
	'parameter',
	"4f106c1b-2473-4622-9798-816c7eb93613",
	0,
	'',
	"d0a679fe-6069-41d1-950f-cfb28e7fc8d9",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4f106c1b-2473-4622-9798-816c7eb93613",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Formal Parameter>',
	'',
	'',
	'../architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("ddf36709-5c19-46c9-9595-b6a3bd478b37",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5b81f2d9-5842-4708-97e2-4004c66cd797",
	"00000000-0000-0000-0000-000000000000",
	'resloveVariableFinalizations',
	'',
	'invocable = param.invocable;

// For expressions that exist within a Java lambda function, any local variable
// referenced must be final or "effectively final" (only assigned once in the
// local scope). Because of this constraint, finalizations must be used to copy
// local variables into another location (declared as a final local variable)

select many affected_exprs from instances of Expression where false;

// Where clause conditionals are implemented as a "Predicate" instance as a lambda
select many where_clauses from instances of WhereExpr
  where (selected.parent_name == invocable.parent_name and
         selected.parent_package == invocable.parent_package and
         selected.body_name == invocable.name);
select many cond_exprs related by where_clauses->Expression[R796];
affected_exprs = affected_exprs + cond_exprs;

// Attribute initializers are invoked within a "Consumer" instance as a lambda
select many attr_inits from instances of InstanceIdentifierAttributeInitialization
  where (selected.parent_name == invocable.parent_name and
         selected.parent_package == invocable.parent_package and
         selected.body_name == invocable.name);
select many init_exprs related by attr_inits->Expression[R3924];
affected_exprs = affected_exprs + init_exprs;
        
for each affected_expr in affected_exprs loop
  // select all variable reference expressions which are a sub expression of the
  // expression
  select many var_refs from instances of VariableReference
    where (selected.parent_name == invocable.parent_name and
           selected.parent_package == invocable.parent_package and
           selected.body_name == invocable.name and
           selected.block_number == affected_expr.block_number and
           selected.statement_number == affected_expr.statement_number and
           STRING::indexof(haystack:selected.expression_number, needle:affected_expr.expression_number) == 0);
  for each var_ref in var_refs loop
    // get any re-assignements of the variable later in the block
    select many var_assignments related by var_ref->Variable[R782]->VariableReference[R782]->Expression[R776]->BinaryOperation[R779]
      where (selected.operator == "=");
    select one for_smt related by var_ref->Variable[R782]->ForSmt[R459];
    select any by_ref_param related by var_ref->Variable[R782]->VariableReference[R782]->Expression[R776]->ActualParameter[R794]->FormalParameter[R3904]
      where selected.by_ref;
    if ((cardinality var_assignments > 1 or not_empty for_smt) and empty by_ref_param) then
      select one smt related by var_ref->Expression[R776]->Statement[R775];
      select one var related by var_ref->Variable[R782];
      select any finalization related by smt->Finalization[R485] where (selected.var_block_number == var.block_number and selected.var_name == var.name);
      if (empty finalization) then
        create object instance finalization of Finalization;
        relate smt to var across R485 using finalization;
      end if;
    end if;
  end for;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("0876c286-3654-46b0-88a1-7fe4d81e506e",
	"5b81f2d9-5842-4708-97e2-4004c66cd797",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5b81f2d9-5842-4708-97e2-4004c66cd797",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a77e65bd-c8ae-439d-9209-37eeeacf2242",
	"00000000-0000-0000-0000-000000000000",
	'getCompDefForStatement',
	'',
	'smt = param.smt;
select one invocable related by smt->CodeBlock[R450]->InvocableObject[R4000];
select one comp_def related by invocable->Function[R427]->ComponentDefinition[R405];
if ( empty comp_def ) then
  select one comp_def related by invocable->PortMessage[R427]->Port[R420]->ComponentDefinition[R417];
  if ( empty comp_def ) then
    select one comp_def related by invocable->Operation[R427]->Class[R416]->ComponentDefinition[R408];
    if ( empty comp_def ) then
      select one comp_def related by invocable->AttributeDerivation[R427]->AttributeAccessor[R441]->Attribute[R4510]->Class[R410]->ComponentDefinition[R408];
      if ( empty comp_def ) then
        select one comp_def related by invocable->State[R427]->StateMachine[R4751]->Class[R4750]->ComponentDefinition[R408];
        if ( empty comp_def ) then
          select one comp_def related by invocable->Transition[R427]->State[R4757]->StateMachine[R4751]->Class[R4750]->ComponentDefinition[R408];
          // TODO utility will return empty
        end if;
      end if;
    end if;
  end if;
end if;
return comp_def;',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("85e483d7-fa03-43da-a88e-3cc59508347e",
	"a77e65bd-c8ae-439d-9209-37eeeacf2242",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a77e65bd-c8ae-439d-9209-37eeeacf2242",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("109e90cb-1d66-46ee-88db-a568044879d0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../architecture/component/component.xtuml');
INSERT INTO S_SYNC
	VALUES ("6d208ff5-6ca0-44cc-8a36-1af28c569cd1",
	"00000000-0000-0000-0000-000000000000",
	'lastStatementInBlock',
	'',
	'block = param.block;
select any last_smt from instances of Statement where false;
select any smt related by block->Statement[R450];
while not_empty smt loop
  last_smt = smt;
  select one smt related by smt->Statement[R477.''executes before''];
end while;
return last_smt;',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	1,
	'',
	0,
	12);
INSERT INTO S_SPARM
	VALUES ("5d46de0d-381e-488c-bcde-c67d6ea319fc",
	"6d208ff5-6ca0-44cc-8a36-1af28c569cd1",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("6d208ff5-6ca0-44cc-8a36-1af28c569cd1",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea38cf19-476c-40bd-9b32-d51d2b9d5909",
	"00000000-0000-0000-0000-000000000000",
	'getVariableInScope',
	'',
	'smt = param.smt;
// select the variable in scope with the closest "distance"
select any var_in_scope related by smt->CodeBlock[R450]->VariableInScope[R458]
  where SORT::ascending(attr:"distance") and selected.var_name == param.name;
select one var related by var_in_scope->Variable[R458];
return var;',
	"c9708af9-d7e3-4342-b794-8c2671da2530",
	1,
	'',
	0,
	13);
INSERT INTO S_SPARM
	VALUES ("fa4467e2-6208-471f-9e75-27d7733638f5",
	"ea38cf19-476c-40bd-9b32-d51d2b9d5909",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("01c04646-8736-4dfe-833a-f1e43de1b093",
	"ea38cf19-476c-40bd-9b32-d51d2b9d5909",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fa4467e2-6208-471f-9e75-27d7733638f5",
	'');
INSERT INTO PE_PE
	VALUES ("ea38cf19-476c-40bd-9b32-d51d2b9d5909",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("c9708af9-d7e3-4342-b794-8c2671da2530",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Variable>',
	'',
	'',
	'../architecture/statement/statement.xtuml');
INSERT INTO S_SYNC
	VALUES ("86099b19-641c-4b1f-8d3a-fdd04ebb0b4d",
	"00000000-0000-0000-0000-000000000000",
	'semanticError',
	'',
	'LOG::LogFailure(message:"Semantic error [" + param.invocable.original_filename + ":" + STRING::itoa(i:param.line_number) + "]: " + param.message);
ARCH::exit(code:1);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	14);
INSERT INTO S_SPARM
	VALUES ("7f73c8e9-41e2-4df2-bfb4-507d5a28c68a",
	"86099b19-641c-4b1f-8d3a-fdd04ebb0b4d",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("197cfcc7-5f5b-471f-8f39-d862ad409c09",
	"86099b19-641c-4b1f-8d3a-fdd04ebb0b4d",
	'line_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7f73c8e9-41e2-4df2-bfb4-507d5a28c68a",
	'');
INSERT INTO S_SPARM
	VALUES ("cc2440dc-5e5b-4dc0-b111-0e4581f3c5a0",
	"86099b19-641c-4b1f-8d3a-fdd04ebb0b4d",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"197cfcc7-5f5b-471f-8f39-d862ad409c09",
	'');
INSERT INTO PE_PE
	VALUES ("86099b19-641c-4b1f-8d3a-fdd04ebb0b4d",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f65bfab2-441d-4482-a91f-4eb38aca1a91",
	"00000000-0000-0000-0000-000000000000",
	'semanticWarning',
	'',
	'LOG::LogInfo(message:"Semantic warning [" + param.invocable.original_filename + ":" + STRING::itoa(i:param.line_number) + "]: " + param.message);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	14);
INSERT INTO S_SPARM
	VALUES ("87f1ba4f-6c88-46fb-bea1-661c9fd6d822",
	"f65bfab2-441d-4482-a91f-4eb38aca1a91",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("abd55d4f-b720-478e-a99b-28556ed71b16",
	"f65bfab2-441d-4482-a91f-4eb38aca1a91",
	'line_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"87f1ba4f-6c88-46fb-bea1-661c9fd6d822",
	'');
INSERT INTO S_SPARM
	VALUES ("c4772a5c-7149-43b5-9c0c-a11e6505387c",
	"f65bfab2-441d-4482-a91f-4eb38aca1a91",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"abd55d4f-b720-478e-a99b-28556ed71b16",
	'');
INSERT INTO PE_PE
	VALUES ("f65bfab2-441d-4482-a91f-4eb38aca1a91",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e16a9db2-cbd3-4716-84c5-fd416c4924eb",
	"00000000-0000-0000-0000-000000000000",
	'getExitingStatement',
	'',
	'// find any exiting statement within the block which will execute unconditionally

select any exiting_statement from instances of Statement where false;
select many blocks from instances of CodeBlock where false;
blocks = blocks + param.block;

while empty exiting_statement and not_empty blocks loop
  select any exiting_statement related by blocks->Statement[R450]->BreakSmt[R451]->Statement[R451];
  if empty exiting_statement then
    select any exiting_statement related by blocks->Statement[R450]->ContinueSmt[R451]->Statement[R451];
    if empty exiting_statement then
      select any exiting_statement related by blocks->Statement[R450]->ReturnSmt[R451]->Statement[R451];
      if empty exiting_statement then
        select any exiting_statement related by blocks->Statement[R450]->ThrowSmt[R451]->Statement[R451];
      end if;
    end if;
  end if;
  select many blocks related by blocks->Statement[R450]->CodeBlockAsStatement[R451]->CodeBlock[R497];
end while;

return exiting_statement;',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	1,
	'',
	0,
	15);
INSERT INTO S_SPARM
	VALUES ("a45e1901-f362-44ae-a7d4-12da9ddbf7b9",
	"e16a9db2-cbd3-4716-84c5-fd416c4924eb",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e16a9db2-cbd3-4716-84c5-fd416c4924eb",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1257d84a-8e45-4fc2-a712-2fe9986db0ea",
	"00000000-0000-0000-0000-000000000000",
	'semanticWarningInExpression',
	'',
	'expr = param.expr;
select one smt related by expr->Statement[R775];
select one invocable related by smt->CodeBlock[R450]->InvocableObject[R4000];
::semanticWarning(invocable:invocable, line_number:smt.line_number, message:param.message);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	14);
INSERT INTO S_SPARM
	VALUES ("c7214f41-8ff0-4a77-bd3f-3128f68aa8af",
	"1257d84a-8e45-4fc2-a712-2fe9986db0ea",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c732060c-653b-48f6-8ce5-99439b2a9c63",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Expression>',
	'',
	'',
	'../architecture/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("76aaedad-1d2d-4681-9008-2aa2c9542087",
	"1257d84a-8e45-4fc2-a712-2fe9986db0ea",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c7214f41-8ff0-4a77-bd3f-3128f68aa8af",
	'');
INSERT INTO PE_PE
	VALUES ("1257d84a-8e45-4fc2-a712-2fe9986db0ea",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf447090-5263-4477-9926-635e8c640179",
	"00000000-0000-0000-0000-000000000000",
	'pruneUnusedVariables',
	'',
	'block = param.block;

// find all local variables that are never read
select many vars related by block->Variable[R496];
for each var in vars
  
  // if the only reference is the declaration itself, this is an unused local variable
  select many var_refs related by var->VariableReference[R782];
  select many var_declarations related by var->VariableReference[R782] where selected.declaration;
  if cardinality var_refs == cardinality var_declarations then

    select one invocable related by block->InvocableObject[R4000];
    select one statement related by var->Statement[R457];
    ::semanticWarning(invocable:invocable, line_number:statement.line_number, message:"Variable ''" + var.name + "'' is never referenced. Removing it.");
    
    // unlink the variable declaration statement
    unrelate statement from block across R450;
    select one prev_statement related by statement->Statement[R477.''executes after''];
    select one next_statement related by statement->Statement[R477.''executes before''];
    if not_empty prev_statement then
      unrelate statement from prev_statement across R477.''executes after'';
    end if;
    if not_empty next_statement then
      unrelate statement from next_statement across R477.''executes before'';
    end if;
    if not_empty prev_statement and not_empty next_statement then
      relate prev_statement to next_statement across R477.''executes before'';
    end if;
    
    // delete the variable itself
    // TODO for now leave everything dangling
    
  end if;
  
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	16);
INSERT INTO S_SPARM
	VALUES ("b931e405-b101-43da-87f2-e0c29f3b5fb3",
	"bf447090-5263-4477-9926-635e8c640179",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bf447090-5263-4477-9926-635e8c640179",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("2e49e10f-3016-47ee-8a39-12e683e7075e",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("21d38790-b93a-4ad6-b0a2-e3ba56baed8a",
	'core-architecture',
	1,
	'../core-architecture.xtuml');
