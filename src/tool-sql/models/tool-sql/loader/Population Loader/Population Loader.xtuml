-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("33909ed1-6554-468a-9d37-24e5d6bd8a24",
	'Population Loader',
	3000,
	'Z_PopulationLoader',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("09a2e156-1f33-487c-84fa-df4337d08972",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many class_inst_serializers related by self->Z_InstanceSerializer[R3001]->ClassInstanceSerializer[R3015]->Z_InstanceSerializer[R3015];
for each class_inst_serializer in class_inst_serializers
  class_inst_serializer.render();
end for;
select many timer_serializers related by self->Z_InstanceSerializer[R3001]->TimerInstanceSerializer[R3015]->Z_InstanceSerializer[R3015];
for each timer_serializer in timer_serializers
  timer_serializer.render();
end for;
select many event_serializers related by self->Z_InstanceSerializer[R3001]->EventInstanceSerializer[R3015]->Z_InstanceSerializer[R3015];
for each event_serializer in event_serializers
  event_serializer.render();
end for;
instance_serializers = T::body();
T::clear();

select many inst_serializers related by self->Z_InstanceSerializer[R3001];
for each inst_serializer in inst_serializers
  inst_serializer.render_def();
end for;
instance_serializer_definitions = T::body();

for each inst_serializer in inst_serializers
  inst_serializer.render_init();
end for;
instance_serializer_initializers = T::body();

select many class_inst_loaders related by self->Z_InstanceLoader[R3005]->ClassInstanceLoader[R3016]->Z_InstanceLoader[R3016];
for each class_inst_loader in class_inst_loaders
  class_inst_loader.render();
end for;
select many timer_loaders related by self->Z_InstanceLoader[R3005]->TimerInstanceLoader[R3016]->Z_InstanceLoader[R3016];
for each timer_loader in timer_loaders
  timer_loader.render();
end for;
select many event_loaders related by self->Z_InstanceLoader[R3005]->EventInstanceLoader[R3016]->Z_InstanceLoader[R3016];
for each event_loader in event_loaders
  event_loader.render();
end for;
instance_loaders = T::body();
T::clear();

// Prepare to render either batch relator or link serialization support, depending on markings.
batch_relator_definitions = "";
batch_relators = "";
select many assoc_serializers related by self->AssociationSerializerLoader[R3019];
link_serializers = "";
link_serializer_definitions = "";
link_serializer_relates = "";

// The following mark, if found, implies batch_relate
select any non_persistent_instance_ids_mark from instances of Mark where ( selected.markable_name == "*" and selected.path == "*" and
                                                                           selected.feature_name == "NonPersistentInstanceIds" );
// The following mark, if found, means no link serialization available; batch_relate required to restore formalized associations.
select any comp_def from instances of ComponentDefinition
 where ( selected.name == self.comp_name );
select one c_c related by comp_def->C_C[R4573];
select one c_c_pe related by c_c->PE_PE[R8001];
select any instance_ids_mark from instances of Mark where ( selected.markable_name == "Component" and
                                                              selected.path == ::containerMarkingPath( pe:c_c_pe ) + "::" + c_c.Name and
                                                              selected.feature_name == "NoInstanceIdsForLoad" );
if ( not empty non_persistent_instance_ids_mark ) or ( not empty instance_ids_mark )
  select many batch_relates related by self->Z_BatchRelator[R3011];
  for each batch_relator in batch_relates
    batch_relator.render();
  end for;
  batch_relator_definitions = T::body();
  T::clear();

  relate_count = "";
  sep = "";
  for each batch_relator in batch_relates
    batch_relators = batch_relators + "        batch_relate_" + batch_relator.rel_name + "();\n";
    relate_count = relate_count + sep +"population." + batch_relator.form_name + "_instances().size()";
    sep = " + ";
  end for;
else
  // Render the loader relate method invocations, using instance Ids, rather than batch_relates.
  for each assocserializer in assoc_serializers
    assocserializer.render_relate();
  end for;
  link_serializer_relates = T::body();
  T::clear();
end if;

// Unless persistent instance ids are suppressed, render the LINK-based serialization support
if ( empty non_persistent_instance_ids_mark )
  // Render serializer invocations for association data.
  for each assocserializer in assoc_serializers
    assocserializer.render_invocation();
  end for;
  link_serializers = T::body();
  T::clear();

  // Render the serializer method definitions.
  for each assocserializer in assoc_serializers
    assocserializer.render_serialize();
  end for;
  link_serializer_definitions = T::body();
  T::clear();
end if;

instance_count = "";
sep = "";
for each class_inst_serializer in class_inst_serializers
  instance_count = instance_count + sep + "population." + class_inst_serializer.class_name + "_instances().size()";
  sep = " + ";
end for;
if ( not_empty timer_serializers )
  instance_count = instance_count + sep + "population.getRunContext().getActiveTimers().where(selected -> selected.getPopulationId() == population.getId()).size()";
  sep = " + ";
end if;
if ( not_empty event_serializers )
  instance_count = instance_count + sep + "population.getRunContext().getActiveEvents().where(selected -> selected.getPopulationId() == population.getId()).size()";
  sep = " + ";
end if;

// Render the loader: at a minimum empty methods may be rendered to satisfy parser/listener invocatiions for batch/link methods.
select one general_file related by self->GeneralFile[R3009];
select one file related by general_file->File[R401];
imports = file.getFormattedImports( type:ImportType::BOTH );

T::include(file:"loader/t.populationloader.java");
general_file.contents = T::body();
T::clear();
file.render();',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0,
	0);
INSERT INTO O_NBATTR
	VALUES ("63ffff76-7488-4a8a-891e-6141f949165e",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24");
INSERT INTO O_BATTR
	VALUES ("63ffff76-7488-4a8a-891e-6141f949165e",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24");
INSERT INTO O_ATTR
	VALUES ("63ffff76-7488-4a8a-891e-6141f949165e",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"d2091965-8afb-4e17-b6bf-cde12110a906",
	'comp_name',
	'',
	'',
	'comp_name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"49cac1fe-ad64-4aa9-b860-a15b4885d6c1",
	0,
	"97fba649-027a-44bb-8855-9e3d181e188c",
	"4ce7d113-cd82-4311-bb5c-34da098ceb1e",
	"fbc8a88d-8315-4294-a19e-0ab0deb8abaa",
	"2cbaa15b-9348-4cfc-b851-de09c022673e",
	"20c12c58-2b72-4e9b-870f-39d9cb6c4ac9",
	"df68b6cd-f642-4218-b65b-8ecb0b25a2fa",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'General File',
	'name',
	'R3009.''is a''');
INSERT INTO R_RGO_PROXY
	VALUES ("33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"4ce7d113-cd82-4311-bb5c-34da098ceb1e",
	"fbc8a88d-8315-4294-a19e-0ab0deb8abaa",
	'../loader.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("97fba649-027a-44bb-8855-9e3d181e188c",
	"49cac1fe-ad64-4aa9-b860-a15b4885d6c1",
	0,
	"4ce7d113-cd82-4311-bb5c-34da098ceb1e",
	"2cbaa15b-9348-4cfc-b851-de09c022673e",
	'../loader.xtuml');
INSERT INTO O_RATTR
	VALUES ("20c12c58-2b72-4e9b-870f-39d9cb6c4ac9",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"c49819d1-92ba-4732-98e5-2b3eca8bc470",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	1,
	'name');
INSERT INTO O_BATTR_PROXY
	VALUES ("c49819d1-92ba-4732-98e5-2b3eca8bc470",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	'../../../../../tool-core/models/tool-core/architecture/file/File/File.xtuml');
INSERT INTO O_ATTR
	VALUES ("20c12c58-2b72-4e9b-870f-39d9cb6c4ac9",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'

',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"49cac1fe-ad64-4aa9-b860-a15b4885d6c1",
	0,
	"aaa8fdb4-9349-409d-a06c-fbfb5d747e07",
	"4ce7d113-cd82-4311-bb5c-34da098ceb1e",
	"fbc8a88d-8315-4294-a19e-0ab0deb8abaa",
	"2cbaa15b-9348-4cfc-b851-de09c022673e",
	"d2091965-8afb-4e17-b6bf-cde12110a906",
	"83b31394-4881-4acb-baed-cb1da77a0340",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'General File',
	'package',
	'R3009.''is a''');
INSERT INTO O_RTIDA_PROXY
	VALUES ("aaa8fdb4-9349-409d-a06c-fbfb5d747e07",
	"49cac1fe-ad64-4aa9-b860-a15b4885d6c1",
	0,
	"4ce7d113-cd82-4311-bb5c-34da098ceb1e",
	"2cbaa15b-9348-4cfc-b851-de09c022673e",
	'../loader.xtuml');
INSERT INTO O_RATTR
	VALUES ("d2091965-8afb-4e17-b6bf-cde12110a906",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"3dfc4c02-94c0-4383-8964-c3bfa4b2e9bd",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	1,
	'package');
INSERT INTO O_BATTR_PROXY
	VALUES ("3dfc4c02-94c0-4383-8964-c3bfa4b2e9bd",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	'../../../../../tool-core/models/tool-core/architecture/file/File/File.xtuml');
INSERT INTO O_ATTR
	VALUES ("d2091965-8afb-4e17-b6bf-cde12110a906",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	"20c12c58-2b72-4e9b-870f-39d9cb6c4ac9",
	'package',
	'

',
	'',
	'package',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"33909ed1-6554-468a-9d37-24e5d6bd8a24");
INSERT INTO O_OIDA
	VALUES ("20c12c58-2b72-4e9b-870f-39d9cb6c4ac9",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	0,
	'name');
INSERT INTO O_OIDA
	VALUES ("d2091965-8afb-4e17-b6bf-cde12110a906",
	"33909ed1-6554-468a-9d37-24e5d6bd8a24",
	0,
	'package');
INSERT INTO O_ID
	VALUES (1,
	"33909ed1-6554-468a-9d37-24e5d6bd8a24");
INSERT INTO O_ID
	VALUES (2,
	"33909ed1-6554-468a-9d37-24e5d6bd8a24");
INSERT INTO PE_PE
	VALUES ("33909ed1-6554-468a-9d37-24e5d6bd8a24",
	1,
	"77d0c8f1-bcf4-4f9b-8abb-05a6b77d5a95",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("77d0c8f1-bcf4-4f9b-8abb-05a6b77d5a95",
	"654f2273-90dd-487f-aef0-4050978eaf0e",
	"654f2273-90dd-487f-aef0-4050978eaf0e",
	'loader',
	'',
	0,
	'../loader.xtuml');
