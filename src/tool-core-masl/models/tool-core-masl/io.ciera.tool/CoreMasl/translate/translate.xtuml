-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("71959823-0e17-46fb-8e33-a2062e470c4c",
	"00000000-0000-0000-0000-000000000000",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'translate',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("96995aa5-01ea-4ed8-b4ec-89d24fe875a6",
	112,
	"71959823-0e17-46fb-8e33-a2062e470c4c",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'tool-core-masl::io.ciera.tool::CoreMasl::translate');
INSERT INTO DIM_DIA
	VALUES ("96995aa5-01ea-4ed8-b4ec-89d24fe875a6",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("c7526c7f-0b4d-4cf5-850f-9fc2a19d5676",
	"00000000-0000-0000-0000-000000000000",
	'init',
	'',
	'// set up command line options
CMD::register_value(name:"cwd", value_name:"root_dir", usage:"base working directory", default_value:".", required:false);
CMD::register_value(name:"i", value_name:"input_file", usage:"input file", default_value:"", required:false);
CMD::register_value(name:"o", value_name:"output_file", usage:"output file", default_value:"", required:false);
CMD::register_value(name:"p", value_name:"project_name", usage:"xtUML project name", default_value:"", required:true);  // TODO
CMD::register_value(name:"gendir", value_name:"gen_dir", usage:"generated output directory", default_value:".", required:false);
CMD::register_value(name:"use-version", value_name:"use_version", usage:"version identifier for generated components", default_value:"", required:false);
CMD::read_command_line();

::configure_features();

// set project root
project_root = CMD::get_value(name:"cwd");
::create_mark(markable:"*", feature:"ProjectRoot", path:"*", value:project_root);

// set system properties for all system level marks
select many system_marks from instances of Mark where selected.markable_name == "*" and selected.path == "*";
for each system_mark in system_marks
  PROP::setProperty(key:"io.ciera." + system_mark.feature_name, value:system_mark.value);
end for;

T::set_output_directory(dir:project_root + "/" + CMD::get_value(name:"gendir"));

// translate
::translate();

// dump instances
//output_file = CMD::get_value(name:"o");
//if ("" != output_file)
//  SQL::serialize_file(file:project_root.value + "/" + output_file);
//end if;

// exit
control stop;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("c7526c7f-0b4d-4cf5-850f-9fc2a19d5676",
	1,
	"71959823-0e17-46fb-8e33-a2062e470c4c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d5ab1db-be04-4119-8c06-85236906e57b",
	"00000000-0000-0000-0000-000000000000",
	'translate',
	'',
	'start_time = TIM::current_clock();

LOG::LogInfo( message:"Translating..." );

// LOAD MASL
LOG::LogInfo( message:"Loading MASL model..." );

// Create the preexisting instances of built-in types.
::BuiltinType_populate();

// Create the preexisting instances of internal types.
::InternalType_populate();

// Parse and load input MASL.
LOG::LogInfo( message: "stratus loading MASL" );
args[1] = CMD::get_value(name:"i");
args[0] = "-d";
LOAD::load2(args:args);

// Resolve referential attribute linkage.
::ReferentialAttribute_resolve();

elapsed_time = TIM::current_clock() - start_time;
LOG::LogTime( message:"Elapsed time:", t:elapsed_time );

// translate builtin types
LOG::LogInfo( message:"  Translating buitlin types..." );
::populateBuiltInTypes();
::transformBuiltinMaslTypeCharacteristics();
LOG::LogInfo( message:"  done." );
LOG::LogTime( message:"  Elapsed time:", t:TIM::current_clock() - start_time );

// Translate application
LOG::LogInfo( message:"Translating..." );
::transformMaslApplication();
// translate bodies
select many invocables from instances of InvocableObject;
select many invocables related by invocables->MaslCodeBlock[R8306]->InvocableObject[R8306];  // only translate bodies that have code
num_bodies = cardinality invocables;
LOG::LogInfo(message:"  Translating " + STRING::itoa(i:num_bodies) + " MASL bodies...");
for each invocable in invocables
  LOG::LogInfo(message:"  Translating ''" + invocable.parent_package + "." + invocable.parent_name + "#" + invocable.name + "'' ...");
  ::transformMaslBody(invocable:invocable);
end for;
LOG::LogInfo( message:"  done." );
LOG::LogTime( message:"  Elapsed time:", t:TIM::current_clock() - start_time );

// resolve user defined types
LOG::LogInfo( message:"  Resolving user defined types..." );
//::resolveUserDefinedTypes();  TODO
LOG::LogInfo( message:"  done." );
LOG::LogTime( message:"  Elapsed time:", t:TIM::current_clock() - start_time );

// render all files
LOG::LogInfo( message:"  Rendering application..." );
select many files from instances of File;
for each file in files
  if ( not file.exclude )
    file.rendering = true;
    file.render();
    file.rendering = false;
  end if;
end for;
LOG::LogInfo( message:"  done." );
LOG::LogTime( message:"  Elapsed time:", t:TIM::current_clock() - start_time );

LOG::LogInfo( message:"Done." );

elapsed_time = TIM::current_clock() - start_time;
LOG::LogTime( message:"Elapsed time:", t:elapsed_time );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("7d5ab1db-be04-4119-8c06-85236906e57b",
	1,
	"71959823-0e17-46fb-8e33-a2062e470c4c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d8ecaa77-6822-4b3f-8050-9dc67ed7abd2",
	"00000000-0000-0000-0000-000000000000",
	'configure_features',
	'',
	'// create markable element types
universal_markable = Markable::populate(name: "*");
object_markable = Markable::populate(name: "Object");
attribute_markable = Markable::populate(name: "Attribute");
domain_markable = Markable::populate(name: "Domain");
domain_service_markable = Markable::populate(name: "DomainService");

// create available features
init_function = Feature::populate(name: "startup");
relate init_function to domain_service_markable across R2822;

key_letters = Feature::populate(name: "key_letter");
relate key_letters to object_markable across R2822;

utility = Feature::populate(name: "utility");
relate utility to domain_markable across R2822;

native_feature = Feature::populate(name: "native");
relate native_feature to domain_markable across R2822;

is_transient = Feature::populate(name:"transient");
relate is_transient to domain_markable across R2822;
relate is_transient to attribute_markable across R2822;

statement_comments = Feature::populate(name: "IncludeStatementComments");
relate statement_comments to universal_markable across R2822;

app_name = Feature::populate(name: "ApplicationName");
relate app_name to universal_markable across R2822;

app_package = Feature::populate(name: "ApplicationPackage");
relate app_package to universal_markable across R2822;

project_root = Feature::populate(name: "ProjectRoot");
relate project_root to universal_markable across R2822;

idle_halt = Feature::populate(name: "IdleHalt");
relate idle_halt to universal_markable across R2822;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO PE_PE
	VALUES ("d8ecaa77-6822-4b3f-8050-9dc67ed7abd2",
	1,
	"71959823-0e17-46fb-8e33-a2062e470c4c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("71959823-0e17-46fb-8e33-a2062e470c4c",
	1,
	"00000000-0000-0000-0000-000000000000",
	"baf875eb-9ae3-4548-af50-f9f236daf369",
	7);
INSERT INTO C_C_PROXY
	VALUES ("baf875eb-9ae3-4548-af50-f9f236daf369",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'CoreMasl',
	'',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'',
	'../CoreMasl.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("ff182108-eff3-4cdc-81dd-efdc6098874b",
	'tool-core-masl',
	1,
	'../../../tool-core-masl.xtuml');
