-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'transform',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("47e4b6ea-f0f7-485f-ac79-7dc65833956f",
	112,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	200,
	150,
	0,
	'',
	'tool-core-masl::transform');
INSERT INTO GD_GE
	VALUES ("600654d0-4063-4a2d-9665-805c35143bb6",
	"47e4b6ea-f0f7-485f-ac79-7dc65833956f",
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	108,
	0,
	'tool-core-masl::transform::statement');
INSERT INTO GD_SHP
	VALUES ("600654d0-4063-4a2d-9665-805c35143bb6");
INSERT INTO GD_NCS
	VALUES ("600654d0-4063-4a2d-9665-805c35143bb6");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"600654d0-4063-4a2d-9665-805c35143bb6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"600654d0-4063-4a2d-9665-805c35143bb6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("600654d0-4063-4a2d-9665-805c35143bb6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("a78f236e-73ae-4bad-8e4d-7614ff047d86",
	"47e4b6ea-f0f7-485f-ac79-7dc65833956f",
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	108,
	0,
	'tool-core-masl::transform::expression');
INSERT INTO GD_SHP
	VALUES ("a78f236e-73ae-4bad-8e4d-7614ff047d86");
INSERT INTO GD_NCS
	VALUES ("a78f236e-73ae-4bad-8e4d-7614ff047d86");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"a78f236e-73ae-4bad-8e4d-7614ff047d86");
INSERT INTO DIM_GE
	VALUES (220.000000,
	0.000000,
	"a78f236e-73ae-4bad-8e4d-7614ff047d86",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a78f236e-73ae-4bad-8e4d-7614ff047d86",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("47e4b6ea-f0f7-485f-ac79-7dc65833956f",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("4c867d76-54b3-4504-9e60-e54f73be10c2",
	"00000000-0000-0000-0000-000000000000",
	'transformDomain',
	'',
	'domain = param.domain;

if (param.pass == 1)

  // create the file
  create object instance file of File;
  file.name = ::camelCaseName(name:domain.name, start_lower:false);
  file.path = param.path;
  file.package = ::pathToPackage(path:file.path);
  file.extension = ".java";
  file.exclude = false;

  // create the component definition object
  create object instance comp_def of ComponentDefinition;
  relate comp_def to file across R401;
  comp_def.version = "";
  comp_def.version_date = "";
  
  // set version information TODO
  component_version = "";
  
  // transform services
  select many domain_services related by domain->DomainService[R5303];
  for each domain_service in domain_services
    ::transformDomainService(domain_service:domain_service, comp_def:comp_def);
  end for;

  // transform terminators
  select many terms related by domain->DomainTerminator[R5304];
  for each term in terms
    ::transformDomainTerminator(domain_terminator:term, comp_def:comp_def, path:file.path + "/" + T::sub(format:"l", s:term.name));
  end for;
  
  // transform objects
  select many object_declarations related by domain->ObjectDeclaration[R5805];
  for each object_declaration in object_declarations
    ::transformObject(object_declaration:object_declaration, comp_def:comp_def);
  end for;

  // transform instance population selectors
  select many objs related by comp_def->Class[R408];
  for each obj in objs
    create object instance inst_pop_selector of InstancePopulationSelector;
    inst_pop_selector.name = obj.name + "_instances";
    relate inst_pop_selector to comp_def across R447;
    relate inst_pop_selector to obj across R449;
  end for;
 
  // create import block
  ::addStringToImports(file:file, s:"io.ciera.runtime.application.Application", type:ImportType::IMPL);
  ::addStringToImports(file:file, s:"io.ciera.runtime.domain.Domain", type:ImportType::IMPL);

elif (param.pass == 2)

  select any file from instances of File where (selected.name == ::camelCaseName(name:domain.name, start_lower:false) and selected.package == ::pathToPackage(path:param.path));
  select one comp_def related by file->ComponentDefinition[R401];
  
  select many rels related by domain->RelationshipDeclaration[R6003];
  for each rel in rels
    ::transformRelationship(rel:rel, comp_def:comp_def);
  end for;

else

  select any file from instances of File where (selected.name == ::camelCaseName(name:domain.name, start_lower:false) and selected.package == ::pathToPackage(path:param.path));
  select one comp_def related by file->ComponentDefinition[R401];

  // transform selectors
  select many objs related by comp_def->Class[R408];
  for each obj in objs
    ::transformSelectors(obj:obj);
  end for;

  // transform relationship population selectors
  select many rels related by comp_def->Relationship[R448];
  for each rel in rels
    create object instance rel_pop_selector of RelationshipPopulationSelector;
    rel_pop_selector.name = rel.name + "s";
    relate rel_pop_selector to comp_def across R4571;
    relate rel_pop_selector to rel across R4572;
  end for;

  // transform attribute references
  select many objs related by comp_def->Class[R408];
  for each obj in objs
    ::transformMaslAttributeReferences(obj:obj);
  end for;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO S_SPARM
	VALUES ("e060eb45-49af-4d1d-b4bb-880b8b10a937",
	"4c867d76-54b3-4504-9e60-e54f73be10c2",
	'domain',
	"d467079c-c61e-4b05-8498-3fe2f24782a6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d467079c-c61e-4b05-8498-3fe2f24782a6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Domain>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("2323d00b-3688-4778-bdd1-ed140fe79329",
	"4c867d76-54b3-4504-9e60-e54f73be10c2",
	'pass',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e060eb45-49af-4d1d-b4bb-880b8b10a937",
	'');
INSERT INTO S_SPARM
	VALUES ("edc05e97-5ed4-4104-a130-64e0364e7841",
	"4c867d76-54b3-4504-9e60-e54f73be10c2",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2323d00b-3688-4778-bdd1-ed140fe79329",
	'');
INSERT INTO PE_PE
	VALUES ("4c867d76-54b3-4504-9e60-e54f73be10c2",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a273ac6b-7940-4d3d-8c41-b8c33c8c5922",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslApplication',
	'',
	'// get application marks
select any app_name_mark from instances of Mark
  where selected.markable_name == "*" and selected.path == "*" and selected.feature_name == "ApplicationName";
select any app_pkg_mark from instances of Mark where
  selected.markable_name == "*" and selected.path == "*" and selected.feature_name == "ApplicationPackage";

// create the file
create object instance file of File;
if ( not_empty app_name_mark )
  file.name = app_name_mark.value;
else
  select many domains from instances of Domain;
  num_domains = cardinality domains;
  if num_domains == 1
    select any domain from instances of Domain;
    file.name = domain.name + "Application";
  else
    file.name = "UnnamedApplication";
  end if;
end if;
if ( not_empty app_pkg_mark )
  file.package = app_pkg_mark.value;
  file.path = ::formatPath( path:file.package );
else
  file.path = T::sub(format:"l", s:file.name);
  file.package = ::pathToPackage( path:file.path );
end if;
file.extension = ".java";
file.exclude = false;

// create the application object
create object instance app of Application;
relate app to file across R401;

// check simulated time
select any sim_time_mark from instances of Mark where selected.feature_name == "EnableSimulatedTime";
if (not_empty sim_time_mark)
  LOG::LogInfo(message:"Enabling simulated time");
  app.simulated_time = true;
end if;

// create application executors
index = 0;
while ( index < 1 ) // single executor for now
  create object instance executor of ApplicationExecutor;
  if ( app.async )
    executor.index = -1;
  else
    executor.index = index;
  end if;
  relate executor to app across R4027;
  index = index + 1;
end while;

// translate domains
select many domains from instances of Domain;
select any current_comp_inst from instances of ComponentInstantiation where false;
for each domain in domains
  ::transformDomain(domain:domain, path:file.path, pass:1);
  ::transformDomain(domain:domain, path:file.path, pass:2);
  ::transformDomain(domain:domain, path:file.path, pass:3);
  select any comp_def from instances of ComponentDefinition where ( selected.name == ::camelCaseName( name:domain.name, start_lower:false ) );
  create object instance comp_inst of ComponentInstantiation;
  relate  comp_def to app across R426 using comp_inst;
  select one comp_def_file related by comp_def->File[R401];
  ::addFileToImports( file:file, file_to_import:comp_def_file, type:ImportType::IMPL );
  select any executor related by app->ApplicationExecutor[R4027]; // single executor for now
  relate executor to comp_inst across R4028;
  if ( not_empty current_comp_inst )
    relate comp_inst to current_comp_inst across R4029.''follows'';
    comp_inst.index = current_comp_inst.index + 1;
  else
    comp_inst.index = 0;
  end if;
  current_comp_inst = comp_inst;
end for;

// create the import block
::addStringToImports(file:file, s:"io.ciera.runtime.application.Application", type:ImportType::IMPL);
if (app.simulated_time)
  ::addStringToImports(file:file, s:"io.ciera.runtime.application.SimulatedClock", type:ImportType::IMPL);
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	2);
INSERT INTO PE_PE
	VALUES ("a273ac6b-7940-4d3d-8c41-b8c33c8c5922",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6337d8b4-4779-4670-be9f-e297eabcf5d1",
	"00000000-0000-0000-0000-000000000000",
	'transformDomainService',
	'',
	'domain_service = param.domain_service;
select one domain related by domain_service->Domain[R5303];
comp_def = param.comp_def;

select one service related by domain_service->Service[R5203];

// create function object
create object instance func of Function;
relate func to comp_def across R405;

// create invocable
create object instance invocable of InvocableObject;
invocable.name = service.name;
invocable.parent_name = comp_def.name;
invocable.parent_package = comp_def.package;
relate func to invocable across R427;

// copy actions
select one code_block related by service->MaslCodeBlock[R5403];
if not_empty code_block
  invocable.actions = code_block.actions;
  relate code_block to invocable across R8306;
end if;

// link type
select any type from instances of TypeReference;
select one builtin related by service->BasicType[R5205]->BuiltinType[R6205]->BuiltInType[R8305];
if not_empty builtin
  type = ::TypeReference_getBuiltinTypeReference(name:builtin.name);
else
  type = ::TypeReference_getBuiltinTypeReference(name:"void");
end if;
relate type to invocable across R428;

// create parameters
select one first_parameter related by service->ParameterDefinition[R5204];
::transformParameterList(first_parameter:first_parameter, invocable:invocable);

// see if this is an initializer function
select any init_function_mark from instances of Mark where (selected.markable_name == "DomainService" and
  selected.path == "" + domain.name + "::" + service.name and
  selected.feature_name == "startup");
if (not_empty init_function_mark)
  relate func to comp_def across R4561;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	3);
INSERT INTO S_SPARM
	VALUES ("5ee0efbd-acd2-4732-9a5f-db65dbabc35c",
	"6337d8b4-4779-4670-be9f-e297eabcf5d1",
	'domain_service',
	"ffebe79c-5289-41c4-9a6c-4c6b8346d989",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ffebe79c-5289-41c4-9a6c-4c6b8346d989",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<DomainService>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("6e4c46fe-109d-4d62-a11f-1a7070c44b2a",
	"6337d8b4-4779-4670-be9f-e297eabcf5d1",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"5ee0efbd-acd2-4732-9a5f-db65dbabc35c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("109e90cb-1d66-46ee-88db-a568044879d0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/component/component.xtuml');
INSERT INTO PE_PE
	VALUES ("6337d8b4-4779-4670-be9f-e297eabcf5d1",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a167f7d5-3c79-4ff5-8b40-a091b9b1a31e",
	"00000000-0000-0000-0000-000000000000",
	'transformObject',
	'',
	'object_declaration = param.object_declaration;
select one domain related by object_declaration->Domain[R5805];
comp_def = param.comp_def;
select one component_file related by comp_def->File[R401];
path = component_file.path + "/" + "classes";  // put all classes in one package called ''classes''

// create the object file
create object instance file of File;
file.name = ::camelCaseName(name:object_declaration.name, start_lower:false );
file.path = path;
file.package = ::pathToPackage(path:file.path);
file.extension = ".java";
file.exclude = false;

// create the object
create object instance obj of Class;
relate obj to file across R401;

// add the class to the component
relate obj to comp_def across R408;

// connect to the arch model
relate obj to object_declaration across R8300;

// create the instance type
create object instance type of Type;
type.name = obj.name;
type.package = obj.package;
type.default_value = obj.name + ".EMPTY";
relate type to obj across R407;

// transform attributes
select any maslattr related by object_declaration->AttributeDeclaration[R5802];
select one prev_attr related by maslattr->AttributeDeclaration[R5809.''succeeds''];
while (not_empty prev_attr)
  maslattr = prev_attr;
  select one prev_attr related by maslattr->AttributeDeclaration[R5809.''succeeds''];
end while;
index = 0;
while (not_empty maslattr)
  ::transformAttributeDeclaration(attr:maslattr, obj:obj, index:index);
	index = index + 1;
	select one maslattr related by maslattr->AttributeDeclaration[R5809.''precedes''];
end while;

// transform operations
select many object_services related by object_declaration->ObjectService[R5808];
for each object_service in object_services
	::transformObjectService(object_service:object_service, obj:obj);
end for;

// transform states
select any ne_state related by object_declaration->MaslState[R6105] where ("" + selected.name == "Non_Existent");
if not_empty ne_state
  ::transformMaslState(state:ne_state, obj:obj, number:0);
end if;
select many states related by object_declaration->MaslState[R6105] where ("" + selected.name != "Non_Existent");
state_number = 1;
for each state in states
  ::transformMaslState(state:state, obj:obj, number:state_number);
  state_number = state_number + 1;
end for;

// transform events
select many evts related by object_declaration->EventDeclaration[R6101];
evt_number = 0;
for each evt in evts
  ::transformMaslEvent(evt:evt, obj:obj, number:evt_number);
  evt_number = evt_number + 1;
end for;

// transform transition table
select any transition_table related by object_declaration->TransitionTable[R6113];
if empty transition_table
  ::addStringToImports(file:file, s:"io.ciera.runtime.domain.ObjectInstance", type:ImportType::IMPL);
else
  ::transformTransitionTable(transition_table:transition_table, obj:obj);
  ::addStringToImports(file:file, s:"io.ciera.runtime.domain.DynamicObjectInstance", type:ImportType::IMPL);
end if;

// transform the set object
::transformObjectSet(obj:obj, path:path);

// add to the containing component imports
select one component_file related by comp_def->File[R401];
::addFileToImports(file:component_file, file_to_import:file, type:ImportType::IMPL);

// create the import block
::addFileToImports(file:file, file_to_import:component_file, type:ImportType::BOTH);
::addStringToImports(file:file, s:"io.ciera.runtime.application.ExecutionContext", type:ImportType::IMPL);
::addStringToImports(file:file, s:"io.ciera.runtime.application.Logger", type:ImportType::IMPL);
::addStringToImports(file:file, s:"io.ciera.runtime.exceptions.EmptyInstanceException", type:ImportType::IMPL);
::addStringToImports(file:file, s:"io.ciera.runtime.types.UniqueId", type:ImportType::IMPL);
 ',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	4);
INSERT INTO S_SPARM
	VALUES ("de3adfbb-18df-4417-8e71-9157b189c106",
	"a167f7d5-3c79-4ff5-8b40-a091b9b1a31e",
	'object_declaration',
	"ccbbc697-c60c-4034-8e31-7a46032151eb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ccbbc697-c60c-4034-8e31-7a46032151eb",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ObjectDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/object/object.xtuml');
INSERT INTO S_SPARM
	VALUES ("192d3817-53e8-46de-a490-3b0072f3eafc",
	"a167f7d5-3c79-4ff5-8b40-a091b9b1a31e",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"de3adfbb-18df-4417-8e71-9157b189c106",
	'');
INSERT INTO PE_PE
	VALUES ("a167f7d5-3c79-4ff5-8b40-a091b9b1a31e",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c532c34c-bb46-42d3-8f7e-6798cb8d1e58",
	"00000000-0000-0000-0000-000000000000",
	'transformObjectSet',
	'',
	'obj = param.obj;

// create the instance type
create object instance type of Type;
type.name = obj.name + ".Set";
type.package = obj.package;
type.default_value = "new " + type.name + "()";

// create the class set object
create object instance objset of ClassSet;
relate objset to obj across R406;
relate objset to type across R407;

// add to imports
select one file related by obj->File[R401];
::addStringToImports(file:file, s:"java.util.Collection", type:ImportType::IMPL);
::addStringToImports(file:file, s:"java.util.Comparator", type:ImportType::IMPL);
::addStringToImports(file:file, s:"java.util.SortedSet", type:ImportType::IMPL);
::addStringToImports(file:file, s:"java.util.TreeSet", type:ImportType::IMPL);
::addStringToImports(file:file, s:"java.util.function.Predicate", type:ImportType::IMPL);
::addStringToImports(file:file, s:"java.util.stream.Collectors", type:ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("7bb7660f-dc28-4ddd-a4e0-1789f3e863cd",
	"c532c34c-bb46-42d3-8f7e-6798cb8d1e58",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a519e323-b117-4a03-9435-b88e56c2443d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Inst>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/classes/classes.xtuml');
INSERT INTO S_SPARM
	VALUES ("a6420656-4132-4d4a-9adb-cd2e9f55405b",
	"c532c34c-bb46-42d3-8f7e-6798cb8d1e58",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7bb7660f-dc28-4ddd-a4e0-1789f3e863cd",
	'');
INSERT INTO PE_PE
	VALUES ("c532c34c-bb46-42d3-8f7e-6798cb8d1e58",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("93597cc3-f7ca-44bf-86ff-6d3f3d9b6818",
	"00000000-0000-0000-0000-000000000000",
	'transformDomainTerminator',
	'',
	'domain_terminator = param.domain_terminator;
comp_def = param.comp_def;

// create the port file
create object instance port_file of File;
port_file.name = comp_def.name + ::camelCaseName(name:domain_terminator.name, start_lower:false);
port_file.path = param.path;
port_file.package = ::pathToPackage(path:port_file.path);
port_file.extension = ".java";
port_file.exclude = false;

// create the interface package object
create object instance port of Port;
relate port to port_file across R401;
port.port_name = ::camelCaseName(name:domain_terminator.name, start_lower:false);

// set port as requirer
port.provider = false;

// relate to other component
relate port to comp_def across R417;

// create the interface file
create object instance iface_file of File;
iface_file.name = ::camelCaseName(name:domain_terminator.name, start_lower:false);
iface_file.path = param.path;
iface_file.package = ::pathToPackage( path:iface_file.path );
iface_file.extension = ".java";
iface_file.exclude = false;

// create the interface package object
create object instance iface of Interface;
relate iface to iface_file across R401;
relate port to iface across R418;

// transform terminator services
select many terminator_services related by domain_terminator->DomainTerminatorService[R5306];
index = 1;
for each terminator_service in terminator_services
	::transformDomainTerminatorService(terminator_service:terminator_service, iface:iface, port:port, index:index);
	index = index + 1;
end for;

// add to component file
select one component_file related by comp_def->File[R401];
::addFileToImports(file:component_file, file_to_import:iface_file, type:ImportType::IMPL);
::addFileToImports(file:component_file, file_to_import:port_file, type:ImportType::IMPL);

// add imports to iface file
::addStringToImports(file:iface_file, s:"io.ciera.runtime.domain.Port", type:ImportType::IMPL);

// add imports to port file
::addStringToImports(file:port_file, s:"io.ciera.runtime.domain.Terminator", type:ImportType::IMPL);
::addFileToImports(file:port_file, file_to_import:component_file, type:ImportType::IMPL);
::addFileToImports(file:port_file, file_to_import:iface_file, type:ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	5);
INSERT INTO S_SPARM
	VALUES ("eb52c79f-0717-4418-894d-a0b1e2376de0",
	"93597cc3-f7ca-44bf-86ff-6d3f3d9b6818",
	'domain_terminator',
	"d32c0dae-6ff9-4154-9607-21e8f5db2bb8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d32c0dae-6ff9-4154-9607-21e8f5db2bb8",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<DomainTerminator>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("75ae6a28-2f7c-47fb-8c94-54e2ed02bc7f",
	"93597cc3-f7ca-44bf-86ff-6d3f3d9b6818",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"eb52c79f-0717-4418-894d-a0b1e2376de0",
	'');
INSERT INTO S_SPARM
	VALUES ("d94d9f11-d275-46ee-bd4b-007a40971ec3",
	"93597cc3-f7ca-44bf-86ff-6d3f3d9b6818",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"75ae6a28-2f7c-47fb-8c94-54e2ed02bc7f",
	'');
INSERT INTO PE_PE
	VALUES ("93597cc3-f7ca-44bf-86ff-6d3f3d9b6818",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("004b6365-0d67-4a5a-9f29-ec2b21938c21",
	"00000000-0000-0000-0000-000000000000",
	'transformDomainTerminatorService',
	'',
	'terminator_service = param.terminator_service;
select one service related by terminator_service->Service[R5203];
iface = param.iface;
index = param.index;
port = param.port;

// create message object
create object instance msg of Message;
msg.name = service.name;
msg.to_provider = true;
msg.id = index;
relate msg to iface across R419;


// create port message
create object instance port_msg of PortMessage;
relate port to msg across R420 using port_msg;

// create invocable
create object instance invocable of InvocableObject;
invocable.name = msg.name;
invocable.parent_name = port.name;
invocable.parent_package = port.package;
relate port_msg to invocable across R427;

// copy actions
select one code_block related by service->MaslCodeBlock[R5403];
if not_empty code_block
  invocable.actions = code_block.actions;
  relate code_block to invocable across R8306;
end if;

// link type
select any type from instances of TypeReference;
select one builtin related by service->BasicType[R5205]->BuiltinType[R6205]->BuiltInType[R8305];
if not_empty builtin
  type = ::TypeReference_getBuiltinTypeReference(name:builtin.name);
else
  type = ::TypeReference_getBuiltinTypeReference(name:"void");
end if;
relate type to invocable across R428;

// create parameters
select one first_parameter related by service->ParameterDefinition[R5204];
::transformParameterList(first_parameter:first_parameter, invocable:invocable);

// add imports to iface file
select one iface_file related by iface->File[R401];
::addStringToImports(file:iface_file, s:"io.ciera.runtime.domain.Message", type:ImportType::IMPL);
::addStringToImports(file:iface_file, s:"java.util.Map", type:ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	6);
INSERT INTO S_SPARM
	VALUES ("52d90d59-5ad7-4837-b360-2b6196ac6741",
	"004b6365-0d67-4a5a-9f29-ec2b21938c21",
	'terminator_service',
	"1f9d3f63-cc27-4669-8de9-5252b9fcf08b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1f9d3f63-cc27-4669-8de9-5252b9fcf08b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<DomainTerminatorService>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("d3e4b9a3-faf0-4293-b987-c0ea8ba0a858",
	"004b6365-0d67-4a5a-9f29-ec2b21938c21",
	'iface',
	"003d869d-0580-4a1f-b1c8-e1657cc0248c",
	0,
	'',
	"52d90d59-5ad7-4837-b360-2b6196ac6741",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("003d869d-0580-4a1f-b1c8-e1657cc0248c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Iface>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/interfaces/interfaces.xtuml');
INSERT INTO S_SPARM
	VALUES ("4129176a-2b25-4e95-a495-c11796d7248e",
	"004b6365-0d67-4a5a-9f29-ec2b21938c21",
	'port',
	"d29fe14e-2574-4613-ac57-716ebd8e905c",
	0,
	'',
	"d3e4b9a3-faf0-4293-b987-c0ea8ba0a858",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d29fe14e-2574-4613-ac57-716ebd8e905c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Port>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/interfaces/interfaces.xtuml');
INSERT INTO S_SPARM
	VALUES ("a0f09456-2189-496f-979d-cb3a27b9dc40",
	"004b6365-0d67-4a5a-9f29-ec2b21938c21",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"4129176a-2b25-4e95-a495-c11796d7248e",
	'');
INSERT INTO PE_PE
	VALUES ("004b6365-0d67-4a5a-9f29-ec2b21938c21",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("14b42ff1-d03f-4557-bb85-e0d523c9f560",
	"00000000-0000-0000-0000-000000000000",
	'transformRelationship',
	'',
	'maslrel = param.rel;
comp_def = param.comp_def;
select one file related by comp_def->File[R401];

select any form_class from instances of Class where false;
form_phrase = "";
form_mult = Mult::ONE;
form_cond = Cond::UNCONDITIONAL;
select any part_class from instances of Class where false;
part_phrase = "";
part_mult = Mult::ONE;
part_cond = Cond::UNCONDITIONAL;

// determine if this is a simple relationship
select one normal related by maslrel->NormalRelationshipDeclaration[R6010];
if (not_empty normal)

	// get the formalizer and participant information
	select one half_rel_1 related by normal->HalfRelationship[R6007];
	select one half_rel_2 related by normal->HalfRelationship[R6008];
	select many rel_specs related by half_rel_1->ObjectDeclaration[R6004]->AttributeDeclaration[R5802]
		->ReferentialAttributeDefinition[R5800.''is_referenced_by'']->RelationshipSpecification[R5811] where (
		selected.role == half_rel_1.role or selected.role == "");
	select any ref_rel related by rel_specs->RelationshipDeclaration[R6015] where (selected.name == maslrel.name);
	if (not_empty ref_rel)  // the first half "to" class is the participant
		select one form_class related by half_rel_2->ObjectDeclaration[R6004]->Class[R8300];
		form_phrase = half_rel_2.role;
		if (half_rel_2.multiplicity == MaslMultiplicity::many)
			form_mult = Mult::MANY;
		end if;
		if (half_rel_2.isconditional)
			form_cond = Cond::CONDITIONAL;
		end if;
		select one part_class related by half_rel_1->ObjectDeclaration[R6004]->Class[R8300];
		part_phrase = half_rel_1.role;
		if (half_rel_1.multiplicity == MaslMultiplicity::many)
			part_mult = Mult::MANY;
		end if;
		if (half_rel_1.isconditional)
			part_cond = Cond::CONDITIONAL;
		end if;
	else
		select one form_class related by half_rel_1->ObjectDeclaration[R6004]->Class[R8300];
		form_phrase = half_rel_1.role;
		if (half_rel_1.multiplicity == MaslMultiplicity::many)
			form_mult = Mult::MANY;
		end if;
		if (half_rel_1.isconditional)
			form_cond = Cond::CONDITIONAL;
		end if;
		select one part_class related by half_rel_2->ObjectDeclaration[R6004]->Class[R8300];
		part_phrase = half_rel_2.role;
		if (half_rel_2.multiplicity == MaslMultiplicity::many)
			part_mult = Mult::MANY;
		end if;
		if (half_rel_2.isconditional)
			part_cond = Cond::CONDITIONAL;
		end if;
	end if;

	// create the relationship
	create object instance rel of Relationship;
	name = maslrel.name + "_" + form_class.name + "_";
	if (part_phrase != "")
		name = name + T::sub(format:"_", s:part_phrase) + "_";
	end if;
	name = name + part_class.name;
	rel.name = name;
	rel.num = STRING::atoi(s:STRING::substr(s:maslrel.name, begin:1, end:-1));
	rel.form_phrase = form_phrase;
	rel.part_phrase = part_phrase;
	rel.form_mult = form_mult;
	rel.part_mult = part_mult;
	rel.form_cond = form_cond;
	rel.part_cond = part_cond;
	rel.rel_type = RelationshipType::Binary;
	relate rel to comp_def across R448;
	relate rel to form_class across R435;
	relate rel to part_class across R434;
	relate rel to maslrel across R8304;

	/* TODO get the ID number
	select any o_id related by r_simp->R_PART[R207]->R_RTO[R204]->O_ID[R109];
	if ( not_empty o_id )
		rel.id_num = o_id.Oid_ID + 1;
	else
		rel.id_num = 0;
	end if;
	*/

else
select one subsup related by maslrel->SubtypeRelationshipDeclaration[R6010];
if ( not_empty subsup )

	select one part_class related by subsup->ObjectDeclaration[R6017]->Class[R8300];
	select many sub_classes related by subsup->ObjectDeclaration[R6016]->Class[R8300];
	part_phrase = "is_a";
	for each form_class in sub_classes

		form_phrase = "is_a";
		form_cond = Cond::CONDITIONAL;

		// create the relationship
		create object instance rel of Relationship;
		name = maslrel.name + "_" + form_class.name + "_is_a_" + part_class.name;
		rel.name = name;
		rel.num = STRING::atoi(s:STRING::substr(s:maslrel.name, begin:1, end:-1));
		rel.form_phrase = form_phrase;
		rel.part_phrase = part_phrase;
		rel.form_mult = form_mult;
		rel.part_mult = part_mult;
		rel.form_cond = form_cond;
		rel.part_cond = part_cond;
		rel.rel_type = RelationshipType::SuperSubtype;
		relate rel to comp_def across R448;
		relate rel to form_class across R435;
		relate rel to part_class across R434;
	  relate rel to maslrel across R8304;
		
		/* TODO get the ID number
		select one o_id related by r_subsup->R_SUPER[R212]->R_RTO[R204]->O_ID[R109];
		if ( not_empty o_id )
			rel.id_num = o_id.Oid_ID + 1;
		else
			rel.id_num = 0;
		end if;
		*/
	end for;

else
select one assoc related by maslrel->AssociativeRelationshipDeclaration[R6010];
if (not_empty assoc)
  
	select one half_rel_1 related by assoc->HalfRelationship[R6000];
	select one half_rel_2 related by assoc->HalfRelationship[R6002];
	
	// get the formalizer and participant information for the first relationship
	select one form_class related by assoc->ObjectDeclaration[R6001]->Class[R8300];
	form_phrase = half_rel_2.role;
	if (half_rel_2.multiplicity == MaslMultiplicity::many)
		form_mult = Mult::MANY;
	end if;
	if (half_rel_2.isconditional)
		form_cond = Cond::CONDITIONAL;
	end if;
	select one part_class related by half_rel_1->ObjectDeclaration[R6004]->Class[R8300];
	part_phrase = half_rel_1.role;
	if (half_rel_1.multiplicity == MaslMultiplicity::many)
		part_mult = Mult::MANY;
	end if;
	if (half_rel_1.isconditional)
		part_cond = Cond::CONDITIONAL;
	end if;

	// create the first relationship
	create object instance rel1 of Relationship;
	name1 = maslrel.name + "_" + form_class.name + "_";
	if (part_phrase != "")
		name1 = name1 + T::sub(format:"_", s:part_phrase) + "_";
	end if;
	name1 = name1 + part_class.name;
	rel1.name = name1;
	rel1.num = STRING::atoi(s:STRING::substr(s:maslrel.name, begin:1, end:-1));
	rel1.form_phrase = form_phrase;
	rel1.part_phrase = part_phrase;
	rel1.form_mult = form_mult;
	rel1.part_mult = part_mult;
	rel1.form_cond = form_cond;
	rel1.part_cond = part_cond;
	rel1.rel_type = RelationshipType::Associative;
	relate rel1 to comp_def across R448;
	relate rel1 to form_class across R435;
	relate rel1 to part_class across R434;
	relate rel1 to maslrel across R8304;

	/* TODO get the ID number
	select one o_id1 related by r_assoc->R_AONE[R209]->R_RTO[R204]->O_ID[R109];
	if ( not_empty o_id1 )
		rel1.id_num = o_id1.Oid_ID + 1;
	else
		rel1.id_num = 0;
	end if;
	*/

	// get the formalizer and participant information for the second relationship
	form_phrase = "";
	form_mult = Mult::ONE;
	form_cond = Cond::UNCONDITIONAL;
	part_phrase = "";
	part_cond = Cond::UNCONDITIONAL;

	select one form_class related by assoc->ObjectDeclaration[R6001]->Class[R8300];
	form_phrase = half_rel_1.role;
	if (half_rel_1.multiplicity == MaslMultiplicity::many)
		form_mult = Mult::MANY;
	end if;
	if (half_rel_1.isconditional)
		form_cond = Cond::CONDITIONAL;
	end if;
	select one part_class related by half_rel_2->ObjectDeclaration[R6004]->Class[R8300];
	part_phrase = half_rel_2.role;
	if (half_rel_2.multiplicity == MaslMultiplicity::many)
		part_mult = Mult::MANY;
	end if;
	if (half_rel_2.isconditional)
		part_cond = Cond::CONDITIONAL;
	end if;

	// create the second relationship
	create object instance rel2 of Relationship;
	name2 = maslrel.name + "_" + form_class.name + "_";
	if (part_phrase != "")
		name2 = name2 + T::sub(format:"_", s:part_phrase) + "_";
	end if;
	name2 = name2 + part_class.name;
	rel2.name = name2;
	rel2.num = STRING::atoi(s:STRING::substr(s:maslrel.name, begin:1, end:-1));
	rel2.form_phrase = form_phrase;
	rel2.part_phrase = part_phrase;
	rel2.form_mult = form_mult;
	rel2.part_mult = part_mult;
	rel2.form_cond = form_cond;
	rel2.part_cond = part_cond;
	rel2.rel_type = RelationshipType::Associative;
	relate rel2 to comp_def across R448;
	relate rel2 to form_class across R435;
	relate rel2 to part_class across R434;
	relate rel2 to maslrel across R8304;

	/* TODO get the ID number
	select one o_id2 related by r_assoc->R_AOTH[R210]->R_RTO[R204]->O_ID[R109];
	if ( not_empty o_id2 )
		rel2.id_num = o_id2.Oid_ID + 1;
	else
		rel2.id_num = 0;
	end if;
	*/
	
	relate rel1 to rel2 across R436.''is one half of associative'';  // note these are a symmetric pair.
end if; end if; end if;

// add necessary imports
::addStringToImports( file:file, s:"io.ciera.runtime.exceptions.EmptyInstanceException", type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	7);
INSERT INTO S_SPARM
	VALUES ("873ac9c0-9196-4cdd-a01f-24cd999bc3f9",
	"14b42ff1-d03f-4557-bb85-e0d523c9f560",
	'rel',
	"fc9b3839-3ca6-48c8-b09a-c036f8335a12",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("fc9b3839-3ca6-48c8-b09a-c036f8335a12",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<RelationshipDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/relationship/relationship.xtuml');
INSERT INTO S_SPARM
	VALUES ("696819c1-b1a7-4a5a-a0f7-dbb08f6621d3",
	"14b42ff1-d03f-4557-bb85-e0d523c9f560",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"873ac9c0-9196-4cdd-a01f-24cd999bc3f9",
	'');
INSERT INTO PE_PE
	VALUES ("14b42ff1-d03f-4557-bb85-e0d523c9f560",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d13703e8-082b-41d8-9e21-0e3d97d6da31",
	"00000000-0000-0000-0000-000000000000",
	'transformAttributeDeclaration',
	'',
	'maslattr = param.attr;
obj = param.obj;

// create the attribute
create object instance attr of Attribute;
select many referentials related by maslattr->ReferentialAttributeDefinition[R5800.''refers_to''];
if (not_empty referentials)
  attr.name = "ref_" + maslattr.name;
else
  attr.name = "m_" + maslattr.name;
end if;
attr.base_name = maslattr.name;
attr.order = param.index;
attr.default_value = "";
relate attr to obj across R410;

// set part of identifier
attr.identifier = 0;
if maslattr.isPreferredIdentifier
  attr.identifier = 1;
end if;

// relate to masl class
relate attr to maslattr across R8301;

// set the type
select one maslbuiltin related by maslattr->BasicType[R5803]->BuiltinType[R6205];
select any type from instances of TypeReference;
if (::attrIsUnique(attr:maslattr) and ("" + maslbuiltin.name) == "integer")
	type = ::TypeReference_getBuiltinTypeReference(name:"UniqueId");
  attr.default_value = "UniqueId.random()";
else
	select one builtin related by maslbuiltin->BuiltInType[R8305];
	type = ::TypeReference_getBuiltinTypeReference(name:builtin.name);
end if;
relate type to attr across R424;

// create accessors
create object instance getter of AttributeAccessor;
getter.accessor_type = AttributeAccessorType::GETTER;
relate getter to attr across R4510;
create object instance setter of AttributeAccessor;
setter.accessor_type = AttributeAccessorType::SETTER;
relate setter to attr across R4510;

// add import to object file
select one file related by obj->File[R401];
::addStringToImports(file:file, s:"io.ciera.runtime.exceptions.EmptyInstanceException", type:ImportType::IMPL);
::addStringToImports(file:file, s:"io.ciera.runtime.exceptions.InstancePopulationException", type:ImportType::IMPL);
select one type_def related by type->Type[R3800];
::addTypeToImports(file:file, type_to_import:type_def, type:ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	8);
INSERT INTO S_SPARM
	VALUES ("0634ff00-eab7-45e6-b893-1874b2a5c7e8",
	"d13703e8-082b-41d8-9e21-0e3d97d6da31",
	'attr',
	"bc9fb0af-6887-4a01-9bad-2412058db57c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc9fb0af-6887-4a01-9bad-2412058db57c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<AttributeDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/object/object.xtuml');
INSERT INTO S_SPARM
	VALUES ("85724f64-796f-4d88-a420-3ce289a4b058",
	"d13703e8-082b-41d8-9e21-0e3d97d6da31",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"0634ff00-eab7-45e6-b893-1874b2a5c7e8",
	'');
INSERT INTO S_SPARM
	VALUES ("fc943558-6916-44c3-8857-8d46e5beb953",
	"d13703e8-082b-41d8-9e21-0e3d97d6da31",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"85724f64-796f-4d88-a420-3ce289a4b058",
	'');
INSERT INTO PE_PE
	VALUES ("d13703e8-082b-41d8-9e21-0e3d97d6da31",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea574998-30fc-4373-a1c8-d4b289d85244",
	"00000000-0000-0000-0000-000000000000",
	'transformObjectService',
	'',
	'object_service = param.object_service;
select one service related by object_service->Service[R5203];
obj = param.obj;

// create operation object
create object instance op of Operation;
op.is_class_based = not object_service.isInstance;
relate op to obj across R416;

// create invocable
create object instance invocable of InvocableObject;
invocable.name = service.name;
invocable.parent_name = op.class_name;
invocable.parent_package = op.class_package;
relate op to invocable across R427;

// copy actions
select one code_block related by service->MaslCodeBlock[R5403];
if not_empty code_block
  invocable.actions = code_block.actions;
  relate code_block to invocable across R8306;
end if;

// link type
select any type from instances of TypeReference;
select one builtin related by service->BasicType[R5205]->BuiltinType[R6205]->BuiltInType[R8305];
if not_empty builtin
  type = ::TypeReference_getBuiltinTypeReference(name:builtin.name);
else
  type = ::TypeReference_getBuiltinTypeReference(name:"void");
end if;
relate type to invocable across R428;

// create parameters
select one first_parameter related by service->ParameterDefinition[R5204];
::transformParameterList(first_parameter:first_parameter, invocable:invocable);

// add imports
select one class_file related by obj->File[R401];
::addStringToImports(file:class_file, s:"io.ciera.runtime.exceptions.EmptyInstanceException", type:ImportType::IMPL);
select one type_def related by type->Type[R3800];
::addTypeToImports(file:class_file, type_to_import:type_def, type:ImportType::IMPL);

// if this is an optional deferred operation, create a second operation for the supertype implementation
// TODO',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	3);
INSERT INTO S_SPARM
	VALUES ("ca074451-023a-420f-b508-78f978e97d7b",
	"ea574998-30fc-4373-a1c8-d4b289d85244",
	'object_service',
	"4ad9b822-f9c4-40b0-bfd6-44ed4fbaaf33",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4ad9b822-f9c4-40b0-bfd6-44ed4fbaaf33",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ObjectService>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/object/object.xtuml');
INSERT INTO S_SPARM
	VALUES ("a4f23ffc-c780-4de8-ac12-e8e66ba04067",
	"ea574998-30fc-4373-a1c8-d4b289d85244",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"ca074451-023a-420f-b508-78f978e97d7b",
	'');
INSERT INTO PE_PE
	VALUES ("ea574998-30fc-4373-a1c8-d4b289d85244",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("438be88e-6ba7-41ed-bf4c-7361ded3bbed",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslState',
	'',
	'maslstate = param.state;
obj = param.obj;

if (maslstate.flavor == StateType::assigner or 
  maslstate.flavor == StateType::assigner_start or
  maslstate.flavor == StateType::creation)
  LOG::LogFailure(message:"State type not supported for state: " + obj.name + "." + maslstate.name);
  return;
end if;

select one sm related by obj->StateMachine[R4750];
if (empty sm)
  ::createMaslStateMachine(obj:obj);
  select one sm related by obj->StateMachine[R4750];
end if;

// create state
create object instance state of State;
relate state to sm across R4751;
state.final = maslstate.flavor == StateType::terminal;
state.number = param.number;

// TODO check terminal state behavior

// create invocable
create object instance invocable of InvocableObject;
invocable.name = T::sub(format:"_u", s:maslstate.name);
invocable.parent_name = sm.name;
invocable.parent_package = sm.package;
relate state to invocable across R427;

// copy actions
select one code_block related by maslstate->MaslCodeBlock[R6115];
if not_empty code_block
  invocable.actions = code_block.actions;
  relate code_block to invocable across R8306;
end if;

// link type
type = ::TypeReference_getBuiltinTypeReference(name:"void");
relate type to invocable across R428;

// create parameters
select one first_parameter related by maslstate->ParameterDefinition[R6104];
::transformParameterList(first_parameter:first_parameter, invocable:invocable);

// link to masl state
relate state to maslstate across R8302;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	9);
INSERT INTO S_SPARM
	VALUES ("fbf7ba79-96fc-4e02-bd44-2c6030200492",
	"438be88e-6ba7-41ed-bf4c-7361ded3bbed",
	'state',
	"640e9a30-074e-45fd-aa2b-fdcc3fc56f5b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("640e9a30-074e-45fd-aa2b-fdcc3fc56f5b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/statemodel/statemodel.xtuml');
INSERT INTO S_SPARM
	VALUES ("c2fcb60e-fa83-428e-bd18-4ab828c25aa1",
	"438be88e-6ba7-41ed-bf4c-7361ded3bbed",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"fbf7ba79-96fc-4e02-bd44-2c6030200492",
	'');
INSERT INTO S_SPARM
	VALUES ("b0da04dd-869a-48d6-8b5b-c627978d4ce1",
	"438be88e-6ba7-41ed-bf4c-7361ded3bbed",
	'number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"c2fcb60e-fa83-428e-bd18-4ab828c25aa1",
	'');
INSERT INTO PE_PE
	VALUES ("438be88e-6ba7-41ed-bf4c-7361ded3bbed",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("48de3bbe-9980-41be-8853-893f124f6be8",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslEvent',
	'',
	'maslevt = param.evt;
obj = param.obj;

// create state machine if necessary
select one sm related by obj->StateMachine[R4750];
if (empty sm)
  ::createMaslStateMachine(obj:obj);
  select one sm related by obj->StateMachine[R4750];
end if;

// create event
create object instance evt of Event;
relate evt to sm across R4752;
evt.id = param.number;

// create invocable
create object instance invocable of InvocableObject;
invocable.name = T::sub(format:"_", s:maslevt.name);
invocable.parent_name = sm.name;
invocable.parent_package = sm.package;
relate evt to invocable across R427;

// link type
type = ::TypeReference_getBuiltinTypeReference(name:"void");
relate type to invocable across R428;

// create parameters
select one first_parameter related by maslevt->ParameterDefinition[R6100];
::transformParameterList(first_parameter:first_parameter, invocable:invocable);

// link to masl event
relate evt to maslevt across R8303;

// add imports
select one file related by sm->File[R401];
::addStringToImports(file:file, s:"io.ciera.runtime.application.Event", type:ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	11);
INSERT INTO S_SPARM
	VALUES ("1e58e713-463c-42b9-ab0c-45d4045f7889",
	"48de3bbe-9980-41be-8853-893f124f6be8",
	'evt',
	"4cfcfee8-b8db-43f0-9290-af0d49e530d4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4cfcfee8-b8db-43f0-9290-af0d49e530d4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<EventDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/statemodel/statemodel.xtuml');
INSERT INTO S_SPARM
	VALUES ("7ea28e80-e4ec-45f1-b97f-5571da228235",
	"48de3bbe-9980-41be-8853-893f124f6be8",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"1e58e713-463c-42b9-ab0c-45d4045f7889",
	'');
INSERT INTO S_SPARM
	VALUES ("cae89845-6b86-4f4c-8bcf-e3529a9f9ea8",
	"48de3bbe-9980-41be-8853-893f124f6be8",
	'number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7ea28e80-e4ec-45f1-b97f-5571da228235",
	'');
INSERT INTO PE_PE
	VALUES ("48de3bbe-9980-41be-8853-893f124f6be8",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7a140795-ad3a-4902-b565-414d39405728",
	"00000000-0000-0000-0000-000000000000",
	'transformTransitionTable',
	'',
	'transition_table = param.transition_table;
obj = param.obj;

if (transition_table.isassigner)
  LOG::LogFailure(message:"Assigner state machine not supported for: " + obj.name);
  return;
end if;

select one sm related by obj->StateMachine[R4750];

select many transition_rows related by transition_table->TransitionRow[R6114];
for each transition_row in transition_rows
  
  select one start_state related by transition_row->MaslState[R6111]->State[R8302];
  if (not_empty start_state)  // ignore Non_Existent state for now TODO

		// create a row for this start state
		create object instance row of TransitionTableRow;
		relate row to sm across R4753;
		relate row to start_state across R4754;
		row.index = start_state.number;
		
		select many transition_options related by transition_row->TransitionOption[R6112];
		for each transition_option in transition_options
			
			select one evt related by transition_option->EventDeclaration[R6108]->Event[R8303];
			
			// create a cell for this option
			create object instance cell of TransitionTableCell;
			relate cell to row across R4755;
			relate cell to evt across R4756;
			cell.index = evt.id;
			
			if (transition_option.flavor == MaslTransitionType::ignore)
				cell.transition_type = TransitionType::IGNORE;
			elif (transition_option.flavor == MaslTransitionType::cannot_happen)
				cell.transition_type = TransitionType::CANT_HAPPEN;
			else
				select one dest_state related by transition_option->MaslState[R6109]->State[R8302];
				
				// create transition
				create object instance txn of Transition;
				relate dest_state to cell across R4757 using txn;
				cell.transition_type = TransitionType::TRANSITION;

				// create invocable
				create object instance invocable of InvocableObject;
				invocable.name = start_state.name + "_txn_" + dest_state.name;
				invocable.parent_name = sm.name;
				invocable.parent_package = sm.package;
				relate txn to invocable across R427;
				
				// link type
				type = ::TypeReference_getBuiltinTypeReference( name:"void" );
				relate type to invocable across R428;

			end if;
		end for;
	end if;
end for;
 ',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	12);
INSERT INTO S_SPARM
	VALUES ("5c80d557-a927-4b35-9546-21f7d4c64605",
	"7a140795-ad3a-4902-b565-414d39405728",
	'transition_table',
	"1562ccf7-11fc-4113-b5e2-b75406fe923c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1562ccf7-11fc-4113-b5e2-b75406fe923c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<TransitionTable>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/statemodel/statemodel.xtuml');
INSERT INTO S_SPARM
	VALUES ("1df2a65e-2f3b-4091-967b-d0bd4c1a32ab",
	"7a140795-ad3a-4902-b565-414d39405728",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"5c80d557-a927-4b35-9546-21f7d4c64605",
	'');
INSERT INTO PE_PE
	VALUES ("7a140795-ad3a-4902-b565-414d39405728",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c63f93b6-1fa9-4e4d-887e-4bd100f4454d",
	"00000000-0000-0000-0000-000000000000",
	'transformParameterList',
	'',
	'parameter = param.first_parameter;
invocable = param.invocable;
while (not_empty parameter)
  // create parameter
  create object instance parm of FormalParameter;
  parm.name = "p_" + parameter.name;
  parm.by_ref = parameter.mode == ParameterMode::out;
  // data type
	select one builtin related by parameter->BasicType[R5200]->BuiltinType[R6205]->BuiltInType[R8305];
	type = ::TypeReference_getBuiltinTypeReference(name:builtin.name);
	relate type to parm across R431;
  ::linkParameter(invocable:invocable, parameter:parm);
  select one parameter related by parameter->ParameterDefinition[R5208.''precedes''];
end while;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	13);
INSERT INTO S_SPARM
	VALUES ("996bca01-17c9-4861-8b2f-b07616499676",
	"c63f93b6-1fa9-4e4d-887e-4bd100f4454d",
	'first_parameter',
	"f4d42a8f-58ea-4bca-ac49-ea1239d45a52",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f4d42a8f-58ea-4bca-ac49-ea1239d45a52",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ParameterDefinition>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("fa2f0c8a-eba8-4433-864d-c56ceb40413b",
	"c63f93b6-1fa9-4e4d-887e-4bd100f4454d",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"996bca01-17c9-4861-8b2f-b07616499676",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3ab44839-4426-4754-b12a-0a00ce4dae1a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("c63f93b6-1fa9-4e4d-887e-4bd100f4454d",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("51320e2f-c4fa-41fc-bc81-caab2798fed8",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslAttributeReferences',
	'',
	'obj = param.obj;
select many attrs related by obj->Attribute[R410];
for each attr in attrs
  select many masl_attr_refs related by attr->AttributeDeclaration[R8301]->ReferentialAttributeDefinition[R5800.''refers_to''];
  for each masl_attr_ref in masl_attr_refs
    // gather identifying information
    select one referred_to_attr related by masl_attr_ref->AttributeDeclaration[R5800.''refers_to'']->Attribute[R8301];
    select one referred_to_obj related by referred_to_attr->Class[R410];
    select one rel_spec related by masl_attr_ref->RelationshipSpecification[R5811];
    select any relationship related by rel_spec->RelationshipDeclaration[R6015]->Relationship[R8304] where (
      selected.form_name == obj.name and selected.part_name == referred_to_obj.name and
      (selected.part_phrase == rel_spec.role or rel_spec.role == ""));
    // create attribute reference
    create object instance attr_ref of AttributeReference;
    relate attr to referred_to_attr across R4506.''has value provided by'' using attr_ref;
    relate relationship to attr_ref across R4511;
  end for;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("540870ed-c564-4091-bd40-0ff07d10947b",
	"51320e2f-c4fa-41fc-bc81-caab2798fed8",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("51320e2f-c4fa-41fc-bc81-caab2798fed8",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c352eb0f-0c3e-481a-97fb-af66f7d79a60",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslBody',
	'',
	'invocable = param.invocable;
select one code_block related by invocable->MaslCodeBlock[R8306];
select any empty_statement from instances of MaslStatement where false;
if (not_empty code_block and not_empty invocable)
    
  // check if deferred operation TODO

  select any upper_block from instances of CodeBlock where false;
  ::transformMaslBlock(invocable:invocable, upper_block:upper_block, code_block:code_block, first_statement:empty_statement, block_number:"1");
    
  // finalize variables referenced from within a where clause
  ::resloveVariableFinalizations( invocable:invocable );

else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("1191186d-8702-464b-a3e5-f65b9bab6612",
	"c352eb0f-0c3e-481a-97fb-af66f7d79a60",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c352eb0f-0c3e-481a-97fb-af66f7d79a60",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("ff182108-eff3-4cdc-81dd-efdc6098874b",
	'tool-core-masl',
	1,
	'../tool-core-masl.xtuml');
