-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'statement',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("a75fc6e6-c6e3-40ab-a351-19b5ea1ea500",
	112,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'tool-core-masl::transform::statement');
INSERT INTO DIM_DIA
	VALUES ("a75fc6e6-c6e3-40ab-a351-19b5ea1ea500",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslBlock',
	'',
	'upper_block = param.upper_block;
code_block = param.code_block;
first_statement = param.first_statement;

invocable = param.invocable;

// create code block
create object instance block of CodeBlock;
if (empty upper_block)
	block.top_level = true;
	block.tab_depth = 1;
	select one port_msg related by invocable->PortMessage[R427];
	if (not_empty port_msg)
		select one port related by port_msg->Port[R420];
		select one msg related by port_msg->Message[R420];
		if ((msg.to_provider and not port.provider) or (not msg.to_provider and port.provider))
			block.tab_depth = 2; // increase the tab depth by one for bodies which belong to outbound port messages
		end if;
	end if;
	select one class_op related by invocable->Operation[R427] where (selected.is_class_based);
	if (not_empty class_op)
		block.tab_depth = 2; // increase the tab depth by one for bodies which belong to class based operations
	end if;
else
	select one invocable related by upper_block->InvocableObject[R4000];
	block.top_level = false;
	block.tab_depth = upper_block.tab_depth + 1;
end if;
relate block to invocable across R4000;
block.block_number = param.block_number;

// copy visibile variables from upper block
select many vars related by upper_block->Variable[R458];
for each var in vars
	create object instance var_in_scope of VariableInScope;
	relate var to block across R458 using var_in_scope;
end for;

// create variable declarations for this code block
if (not_empty code_block)
	select many variable_declarations related by code_block->VariableDefinition[R5151];
	for each variable_declaration in variable_declarations
		::transformVariableInitialization(variable_declaration:variable_declaration, block:block);
	end for;
end if;

// transform all statements
::transformMaslStatements(code_block:code_block, first_statement:first_statement, block:block);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("a7ce0356-b889-4e12-be9e-1b80aa6a9946",
	"a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	'upper_block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"1cd93b33-fa8c-4998-a746-a1673fd272ef",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Code Block>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/invocable/invocable.xtuml');
INSERT INTO S_SPARM
	VALUES ("1583da29-741d-429c-82b9-e80355a12e3a",
	"a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	'code_block',
	"a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	0,
	'',
	"a7ce0356-b889-4e12-be9e-1b80aa6a9946",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<CodeBlock>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("233aa0f8-c738-4aa0-ba63-702432a6972b",
	"a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	'block_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"772eebc4-49e7-44b4-90cd-bc7fdd6890a8",
	'');
INSERT INTO S_SPARM
	VALUES ("1cd93b33-fa8c-4998-a746-a1673fd272ef",
	"a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3ab44839-4426-4754-b12a-0a00ce4dae1a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/invocable/invocable.xtuml');
INSERT INTO S_SPARM
	VALUES ("772eebc4-49e7-44b4-90cd-bc7fdd6890a8",
	"a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	'first_statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"1583da29-741d-429c-82b9-e80355a12e3a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("05890c89-f4eb-4163-9007-b5abcf03a719",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("a15c0dfb-3749-42a0-833a-cdd52a9f9ea8",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("78df0df8-f559-4d45-b48f-bfa8c4c24686",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslStatement',
	'',
	'masl_statement = param.masl_statement;
block = param.block;
prev_smt = param.prev_smt;
if (empty masl_statement or empty block)
  // TODO bad
end if;

select one assign_statement related by masl_statement->AssignmentStatement[R5135];
if (not_empty assign_statement)
  ::transformAssignStatement(assign_statement:assign_statement, block:block, prev_smt:prev_smt);
else
select one io_stream_statement related by masl_statement->IOStreamStatement[R5135];
if (not_empty io_stream_statement)
  ::transformIOStreamStatement(io_stream_statement:io_stream_statement, block:block, prev_smt:prev_smt);
else
select one if_statement related by masl_statement->IfStatement[R5135];
if (not_empty if_statement)
  ::transformMaslIfStatement(if_statement:if_statement, block:block, prev_smt:prev_smt);
else
select one return_statement related by masl_statement->ReturnStatement[R5135];
if (not_empty return_statement)
  ::transformMaslReturnStatement(return_statement:return_statement, block:block, prev_smt:prev_smt);
else
select one service_call_statement related by masl_statement->ServiceCall[R5135];
if (not_empty service_call_statement)
  ::transformServiceCall(service_call:service_call_statement, block:block, prev_smt:prev_smt);
else
  LOG::LogFailure(message:"statement type not supported: ''" + masl_statement.actions + "''");
end if; end if; end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("83d772f9-ec52-48f6-9d25-6ef45ada7062",
	"78df0df8-f559-4d45-b48f-bfa8c4c24686",
	'masl_statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fc03a869-eef9-495c-a68c-527de6187b12",
	"78df0df8-f559-4d45-b48f-bfa8c4c24686",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"83d772f9-ec52-48f6-9d25-6ef45ada7062",
	'');
INSERT INTO S_SPARM
	VALUES ("8c2a71a1-b904-4991-a89c-c25bb02e8f0c",
	"78df0df8-f559-4d45-b48f-bfa8c4c24686",
	'prev_smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"fc03a869-eef9-495c-a68c-527de6187b12",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("78df0df8-f559-4d45-b48f-bfa8c4c24686",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b711d9b4-f2f1-467a-b928-f777d141335d",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslStatements',
	'',
	'code_block = param.code_block;
masl_statement = param.first_statement;
block = param.block;
if (not_empty code_block)
  select one masl_statement related by code_block->Statement2[R5150];
end if;
select any prev_smt related by block->Statement[R450] where SORT::descending(attr:"statement_number");
smt_num = 1;
while (not_empty masl_statement)
  ::transformMaslStatement(masl_statement:masl_statement, block:block, prev_smt:prev_smt);
  // get the last created statement by selecting any ordered descending by statement number
  select any prev_smt related by block->Statement[R450] where SORT::descending(attr:"statement_number");
  smt_num = STRING::atoi(s:prev_smt.statement_number) + 1;
  select one masl_statement related by masl_statement->Statement2[R5155.''precedes''];
end while;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("585eda91-f258-4baf-90fe-9ac127a710c9",
	"b711d9b4-f2f1-467a-b928-f777d141335d",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"ccd8de00-6acb-481c-a517-f221989e81bd",
	'');
INSERT INTO S_SPARM
	VALUES ("43554ee7-a4a8-41a5-96c7-dfb4a4f21055",
	"b711d9b4-f2f1-467a-b928-f777d141335d",
	'code_block',
	"a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ccd8de00-6acb-481c-a517-f221989e81bd",
	"b711d9b4-f2f1-467a-b928-f777d141335d",
	'first_statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"43554ee7-a4a8-41a5-96c7-dfb4a4f21055",
	'');
INSERT INTO PE_PE
	VALUES ("b711d9b4-f2f1-467a-b928-f777d141335d",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("acbda8b8-9a50-44ff-8605-f95ff06d71e5",
	"00000000-0000-0000-0000-000000000000",
	'transformIOStreamStatement',
	'',
	'io_stream_statement = param.io_stream_statement;
block = param.block;
prev_smt = param.prev_smt;
select one masl_statement related by io_stream_statement->Statement2[R5135];

// Get the device expression and the other expression.
select one device_expression related by io_stream_statement->Expression2[R5156];
select any stream_operator related by io_stream_statement->StreamOperator[R5115] where selected.index == 0;

// Create a statement for each stream operation sequentially
first_statement = true;
while not_empty stream_operator

	// create a statement
	create object instance smt of Statement;
	relate smt to block across R450;
	if ( not_empty prev_smt )
		smt.statement_number = STRING::itoa(i:STRING::atoi(s:prev_smt.statement_number) + 1);
		relate smt to prev_smt across R477.''executes after'';
	else
		smt.statement_number = "1";
	end if;
	if first_statement
		smt.actions = masl_statement.actions;
		first_statement = false;
	end if;

	// create expression as statement
	create object instance eas of ExpressionAsStatement;
	relate eas to smt across R451;


	// create main expression
	create object instance expr of Expression;
	relate expr to smt across R775;
	expr.expression_number = "1";
	relate expr to eas across R476;

	// create binary operation and assignment expression
	create object instance binop of BinaryOperation;
	relate binop to expr across R776;
	if (stream_operator.operator == IOop::in)
		binop.operator = "read";
	elif (stream_operator.operator == IOop::linein)
		binop.operator = "readLine";
	elif (stream_operator.operator == IOop::out)
		binop.operator = "write";
	elif (stream_operator.operator == IOop::lineout)
		binop.operator = "writeLine";
	else
		// TODO bad
	end if;
	binop.invocation = true;

	// create left operand
	::transformMaslExpression(masl_expression:device_expression, expr_number:"1.1", smt:smt );
	select any l_op related by smt->Expression[R775] where (selected.expression_number == "1.1");
	relate l_op to binop across R779;
	select one ltype related by l_op->TypeReference[R795];

	// create right operand
	select one other_expression related by stream_operator->Expression2[R5115];
	::transformMaslExpression(masl_expression:other_expression, expr_number:"1.2", smt:smt);
	select any r_op related by smt->Expression[R775] where (selected.expression_number == "1.2");
	relate r_op to binop across R778;

	if (stream_operator.operator == IOop::in or stream_operator.operator == IOop::linein)
		// link r_op type to the main expression for reads
		select one type related by r_op->TypeReference[R795];
		relate type to expr across R795;
	else
		// link ''void'' to the main expression for writes
		type = ::TypeReference_getBuiltinTypeReference(name:"void");
		relate type to expr across R795;
	end if;

	// set this statement as the previous statement
	prev_smt = smt;
	
	// get the next stream operator
	select one stream_operator related by stream_operator->StreamOperator[R5159.''precedes''];

end while;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("8838ac4f-16a2-4ba2-a39b-2ab94b7dbc57",
	"acbda8b8-9a50-44ff-8605-f95ff06d71e5",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"8d18892e-bf98-4127-86a6-3a4bcf18c82f",
	'');
INSERT INTO S_SPARM
	VALUES ("94ea6296-b29a-447d-9cc4-23d32474735e",
	"acbda8b8-9a50-44ff-8605-f95ff06d71e5",
	'prev_smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"8838ac4f-16a2-4ba2-a39b-2ab94b7dbc57",
	'');
INSERT INTO S_SPARM
	VALUES ("8d18892e-bf98-4127-86a6-3a4bcf18c82f",
	"acbda8b8-9a50-44ff-8605-f95ff06d71e5",
	'io_stream_statement',
	"44b3ec1a-d9d6-4b23-8417-f2e233dacc51",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("44b3ec1a-d9d6-4b23-8417-f2e233dacc51",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<IOStreamStatement>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("acbda8b8-9a50-44ff-8605-f95ff06d71e5",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04159730-c15c-4433-a923-ec64dfaa746a",
	"00000000-0000-0000-0000-000000000000",
	'transformVariableDeclaration',
	'',
	'variable_declaration = param.variable_declaration;
smt = param.smt;

// create new variable
create object instance new_var of Variable;
relate new_var to smt across R457;
new_var.name = variable_declaration.name;
new_var.readonly = variable_declaration.isreadonly;

// link in scope
select one scope related by smt->CodeBlock[R450];
select any existing_var_in_scope related by scope->VariableInScope[R458] where (selected.var_name == new_var.name);
if ( not_empty existing_var_in_scope )  // shadow variable of same name
  LOG::LogInfo( message:"warning: shadowing variable" );
  select one existing_var related by existing_var_in_scope->Variable[R458];
  unrelate existing_var from scope across R458 using existing_var_in_scope;
end if;
create object instance var_in_scope of VariableInScope;
relate new_var to scope across R458 using var_in_scope;

// link data type
select any type from instances of TypeReference where false;
select one builtin related by variable_declaration->BasicType[R5137]->BuiltinType[R6205]->BuiltInType[R8305];
if not_empty builtin
  type = ::TypeReference_getBuiltinTypeReference(name:builtin.name);
else
  select one inst_type related by variable_declaration->BasicType[R5137]->InstanceType[R6205]->ObjectDeclaration[R6220]->Class[R8300]->Type[R407];
  if not_empty inst_type
    file = ::getFileForStatement(smt:smt);
    ::addTypeToImports(file:file, type_to_import:inst_type, type: ImportType::IMPL);
  end if;
  type = ::TypeReference_getInstanceWithDimString(type:inst_type, dims:"");
end if;
relate type to new_var across R461;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO S_SPARM
	VALUES ("a76bf727-ba9d-474a-8a66-b0a3f4dc361d",
	"04159730-c15c-4433-a923-ec64dfaa746a",
	'variable_declaration',
	"cbe32761-b70f-4b5b-bdd0-4863523889a1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cbe32761-b70f-4b5b-bdd0-4863523889a1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<VariableDefinition>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("56bdc5c4-f731-48e7-bfe9-f30227ba5372",
	"04159730-c15c-4433-a923-ec64dfaa746a",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"a76bf727-ba9d-474a-8a66-b0a3f4dc361d",
	'');
INSERT INTO PE_PE
	VALUES ("04159730-c15c-4433-a923-ec64dfaa746a",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0df98c26-771d-400d-b8af-34756099c9a9",
	"00000000-0000-0000-0000-000000000000",
	'transformVariableInitialization',
	'',
	'variable_declaration = param.variable_declaration;
block = param.block;
select any prev_smt related by block->Statement[R450] where SORT::descending(attr:"statement_number");

// Create an assignment statement at the top of the block. If there is an
// initialization expression, use it. If not, use the default value.

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if (not_empty prev_smt)
  smt.statement_number = STRING::itoa(i:STRING::atoi(s:prev_smt.statement_number) + 1);
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.actions = variable_declaration.actions;

// create expression as statement
create object instance eas of ExpressionAsStatement;
relate eas to smt across R451;

// create main expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = "1";
relate expr to eas across R476;

// create binary operation and assignment expression
create object instance binop of BinaryOperation;
relate binop to expr across R776;
binop.operator = "=";
binop.invocation = false;

// create new variable
::transformVariableDeclaration(variable_declaration:variable_declaration, smt:smt);
select any var related by smt->CodeBlock[R450]->Variable[R458] where (selected.name == "" + variable_declaration.name);

// create variable reference for left operand
create object instance l_op of Expression;
relate l_op to smt across R775;
l_op.expression_number = "1.1";
relate l_op to binop across R779;

// link type
select one type related by var->TypeReference[R461];
relate type to l_op across R795;

// create variable reference
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to l_op across R776;
var_ref.declaration = true;

// add type reference to file
select one expr_type related by var->TypeReference[R461]->Type[R3800];
::addTypeToImports(file: ::getFileForStatement(smt:smt), type_to_import:expr_type, type:ImportType::IMPL);

// create right operand
select one init_expr related by variable_declaration->Expression2[R5138];
if not_empty init_expr
  ::transformMaslExpression(masl_expression:init_expr, expr_number:"1.2", smt:smt);
else
  // if no initializer exists, simply use the default value for the type
	create object instance r_op of Expression;
	relate r_op to smt across R775;
	r_op.expression_number = "1.2";
	// link type
	relate type to r_op across R795;
	// create a named expression
	create object instance named_expr of NamedReference;
	named_expr.name = expr_type.default_value;
	relate named_expr to r_op across R776;
	// if this is an instance type, must import the implementation class
	select one class_file related by expr_type->Class[R407]->File[R401];
	if (not_empty class_file)
    ::addStringToImports(file: ::getFileForStatement(smt:smt), s: ::pathToPackage(path:class_file.path) + ".impl." + class_file.name + "Impl", type:ImportType::IMPL);
  end if;
end if;
select any r_op related by smt->Expression[R775] where (selected.expression_number == "1.2");
relate r_op to binop across R778;

// link l_op type to the main expression
relate type to expr across R795;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO S_SPARM
	VALUES ("13ee92c4-8f0d-4466-8bbe-d1c3930e14c0",
	"0df98c26-771d-400d-b8af-34756099c9a9",
	'variable_declaration',
	"cbe32761-b70f-4b5b-bdd0-4863523889a1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("92f1385e-e6f1-49d8-b5fa-934af25fe6cc",
	"0df98c26-771d-400d-b8af-34756099c9a9",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"13ee92c4-8f0d-4466-8bbe-d1c3930e14c0",
	'');
INSERT INTO PE_PE
	VALUES ("0df98c26-771d-400d-b8af-34756099c9a9",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4a517e24-c178-42fa-aff7-7ec010abe193",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslIfStatement',
	'',
	'if_statement = param.if_statement;
block = param.block;
prev_smt = param.prev_smt;
select any empty_invocable from instances of InvocableObject where false;
select any empty_code_block from instances of CodeBlock2 where false;

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if (not_empty prev_smt)
  smt.statement_number = STRING::itoa(i:STRING::atoi(s:prev_smt.statement_number) + 1);
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.actions = if_statement.actions;

// create if statement
create object instance if_smt of IfSmt;
relate if_smt to smt across R451;
if_smt.is_else_if = false;

// translate if condition expression
select one if_cond related by if_statement->Expression2[R5143];
::transformMaslExpression(masl_expression:if_cond, expr_number:"1", smt:smt);
select any if_expr related by smt->Expression[R775] where (selected.expression_number == "1");
relate if_expr to if_smt across R471;

// create then block
then_block_number = ::getNextBlockNumber(upper_block:block);
select one then_first_statement related by if_statement->Statement2[R5144];
::transformMaslBlock(upper_block:block, code_block:empty_code_block, first_statement:then_first_statement, block_number:then_block_number, invocable:empty_invocable);
select any then_block related by block->InvocableObject[R4000]->CodeBlock[R4000] where (selected.block_number == then_block_number);
relate then_block to if_smt across R453;

// translate elsifs
select any elsif_alternative related by if_statement->Alternative[R5145] where (not selected.else_otherwise);
select one prev_elsif_alternative related by elsif_alternative->Alternative[R5158.''succeeds''] where (not selected.else_otherwise);
while (not_empty prev_elsif_alternative)
  elsif_alternative = prev_elsif_alternative;
  select one prev_elsif_alternative related by elsif_alternative->Alternative[R5158.''succeeds''] where (not selected.else_otherwise);
end while;
while (not_empty elsif_alternative)
  // create block for elif
  elif_block_number = ::getNextBlockNumber(upper_block:block);
  ::transformMaslBlockForElsif(upper_block:block, alternative:elsif_alternative, block_number:elif_block_number);
  select any else_block related by block->InvocableObject[R4000]->CodeBlock[R4000] where (selected.block_number == elif_block_number);
  relate else_block to if_smt across R454;
  // set the new current block and if statement
  block = else_block;
  select any if_smt related by if_smt->CodeBlock[R454]->Statement[R450]->IfSmt[R451];
  select one elsif_alternative related by elsif_alternative->Alternative[R5158.''precedes''] where (not selected.else_otherwise);
end while;

// create else block
else_block_number = ::getNextBlockNumber(upper_block:block);
select any else_alternative related by if_statement->Alternative[R5145] where (selected.else_otherwise);
if (not_empty else_alternative)
  select one else_first_statement related by else_alternative->Statement2[R5148];
  ::transformMaslBlock(upper_block:block, code_block:empty_code_block, first_statement:else_first_statement, block_number:else_block_number, invocable:empty_invocable);
  select any else_block related by block->InvocableObject[R4000]->CodeBlock[R4000] where (selected.block_number == else_block_number);
  relate else_block to if_smt across R454;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	2);
INSERT INTO S_SPARM
	VALUES ("b8917f77-658b-42d7-9755-fad0cf663023",
	"4a517e24-c178-42fa-aff7-7ec010abe193",
	'if_statement',
	"3307cec9-3876-47e5-b32f-9d185274e2f5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3307cec9-3876-47e5-b32f-9d185274e2f5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<IfStatement>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("297ea188-3318-411b-a83c-ea7b554a76a0",
	"4a517e24-c178-42fa-aff7-7ec010abe193",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"b8917f77-658b-42d7-9755-fad0cf663023",
	'');
INSERT INTO S_SPARM
	VALUES ("540d74bc-1386-457d-a729-92281035b0b3",
	"4a517e24-c178-42fa-aff7-7ec010abe193",
	'prev_smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"297ea188-3318-411b-a83c-ea7b554a76a0",
	'');
INSERT INTO PE_PE
	VALUES ("4a517e24-c178-42fa-aff7-7ec010abe193",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b20c666e-494b-47e3-a9e0-35ddea24de31",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslBlockForElsif',
	'',
	'upper_block = param.upper_block;
alternative = param.alternative;
select any empty_code_block from instances of CodeBlock2 where false;

// create block
select one invocable related by upper_block->InvocableObject[R4000];
create object instance block of CodeBlock;
relate block to invocable across R4000;
block.block_number = param.block_number;
block.tab_depth = upper_block.tab_depth;  // keep same tab depth

// copy visibile variables from upper block
select many vars related by upper_block->Variable[R458];
for each var in vars
  create object instance var_in_scope of VariableInScope;
  relate var to block across R458 using var_in_scope;
end for;

// create single statement in block
create object instance smt of Statement;
relate smt to block across R450;
smt.statement_number = "1";
smt.actions = alternative.actions;

// create if statement
create object instance if_smt of IfSmt;
relate if_smt to smt across R451;
if_smt.is_else_if = true;

// translate if expression
select one if_cond related by alternative->Expression2[R5147];
::transformMaslExpression(masl_expression:if_cond, expr_number:"1", smt:smt);
select any if_expr related by smt->Expression[R775] where (selected.expression_number == "1");
relate if_expr to if_smt across R471;

// create then block
select any empty_invocable from instances of InvocableObject where false;
then_block_number = ::getNextBlockNumber(upper_block:block);
select one then_first_statement related by alternative->Statement2[R5148];
::transformMaslBlock(upper_block:block, code_block:empty_code_block, first_statement:then_first_statement, block_number:then_block_number, invocable:empty_invocable);
select any then_block related by block->InvocableObject[R4000]->CodeBlock[R4000] where (selected.block_number == then_block_number);
relate then_block to if_smt across R453;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b1b46267-5f61-4861-8194-84155045991c",
	"b20c666e-494b-47e3-a9e0-35ddea24de31",
	'upper_block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("cef8487a-dd76-4286-bc27-768c2c1b5643",
	"b20c666e-494b-47e3-a9e0-35ddea24de31",
	'alternative',
	"e9cf5ab1-1443-4abc-9f62-2b276b179467",
	0,
	'',
	"b1b46267-5f61-4861-8194-84155045991c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e9cf5ab1-1443-4abc-9f62-2b276b179467",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Alternative>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("be4f4695-5a76-47bd-b6c1-a00d7ebe7d9c",
	"b20c666e-494b-47e3-a9e0-35ddea24de31",
	'block_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cef8487a-dd76-4286-bc27-768c2c1b5643",
	'');
INSERT INTO PE_PE
	VALUES ("b20c666e-494b-47e3-a9e0-35ddea24de31",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("272ee62d-8b16-45ee-8571-941543a4a470",
	"00000000-0000-0000-0000-000000000000",
	'transformAssignStatement',
	'',
	'assign_statement = param.assign_statement;
block = param.block;
prev_smt = param.prev_smt;
select one masl_statement related by assign_statement->Statement2[R5135];

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if (not_empty prev_smt)
  smt.statement_number = STRING::itoa(i:STRING::atoi(s:prev_smt.statement_number) + 1);
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.actions = masl_statement.actions;

// collect info
select one left_expr related by assign_statement->Expression2[R5101];
select one left_type related by left_expr->BasicType[R5570]->BuiltinType[R6205];
select one right_expr related by assign_statement->Expression2[R5100];
select one right_type related by right_expr->BasicType[R5570]->BuiltinType[R6205];

// create expression as statement
create object instance eas of ExpressionAsStatement;
relate eas to smt across R451;

// create main expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = "1";
relate expr to eas across R476;

// create binary operation and assignment expression
create object instance binop of BinaryOperation;
relate binop to expr across R776;
binop.operator = "=";
binop.invocation = false;

// create left operand
::transformMaslExpression(masl_expression:left_expr, expr_number:"1.1", smt:smt);
select any l_op related by smt->Expression[R775] where (selected.expression_number == "1.1");
relate l_op to binop across R779;
select one ltype related by l_op->TypeReference[R795];

// create right operand
// no type promotion necessary or automatic promotion of integer to real or integer to timestamp
if left_type == right_type or ("" + left_type.name == "real" and "" + right_type.name == "integer") or ("" + left_type.name == "timestamp" and "" + right_type.name == "integer")
	::transformMaslExpression(masl_expression:right_expr, expr_number:"1.2", smt:smt);
else
	// must do type promotion
	create object instance prom_expr of Expression;
	relate prom_expr to smt across R775;
	prom_expr.expression_number = "1.2";
	relate ltype to prom_expr across R795;
	create object instance prom of Promotion;
	relate prom to prom_expr across R776;
	// TODO
  prom.cast = true;
	::transformMaslExpression(masl_expression:right_expr, expr_number:"1.2.1", smt:smt);
	select any prom_val related by smt->Expression[R775] where (selected.expression_number == "1.2.1");
	relate prom_val to prom across R3907;
end if;
select any r_op related by smt->Expression[R775] where (selected.expression_number == "1.2");
relate r_op to binop across R778;

// link l_op type to the main expression
select one type related by l_op->TypeReference[R795];
relate type to expr across R795;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b9fe2495-ed7b-405b-ae26-133b72688b04",
	"272ee62d-8b16-45ee-8571-941543a4a470",
	'assign_statement',
	"71dca57b-4d62-4071-b97e-de30ee42722f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("71dca57b-4d62-4071-b97e-de30ee42722f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<AssignmentStatement>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("4a1eab06-1f2a-4b5c-b17c-ee88ad97468e",
	"272ee62d-8b16-45ee-8571-941543a4a470",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"b9fe2495-ed7b-405b-ae26-133b72688b04",
	'');
INSERT INTO S_SPARM
	VALUES ("6405046c-6255-4d60-b74f-0bcca7fb61c8",
	"272ee62d-8b16-45ee-8571-941543a4a470",
	'prev_smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"4a1eab06-1f2a-4b5c-b17c-ee88ad97468e",
	'');
INSERT INTO PE_PE
	VALUES ("272ee62d-8b16-45ee-8571-941543a4a470",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7e89c2b4-1232-4c0d-8edc-d7cfe660cce7",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslReturnStatement',
	'',
	'return_statement = param.return_statement;
block = param.block;
prev_smt = param.prev_smt;
select one masl_statement related by return_statement->Statement2[R5135];

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if (not_empty prev_smt)
  smt.statement_number = STRING::itoa(i:STRING::atoi(s:prev_smt.statement_number) + 1);
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.actions = masl_statement.actions;

// create return statement
create object instance ret of ReturnSmt;
relate ret to smt across R451;

// create return expression
select one ret_val related by return_statement->Expression2[R5128];
if (not_empty ret_val)
  // TODO consider type promotion
  ::transformMaslExpression(masl_expression:ret_val, expr_number:"1", smt:smt);
  select any ret_expr related by smt->Expression[R775] where (selected.expression_number == "1");
  relate ret_expr to ret across R473;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("e0954958-58a2-4285-8182-efaf113e6085",
	"7e89c2b4-1232-4c0d-8edc-d7cfe660cce7",
	'return_statement',
	"4cef1faa-1f54-41e7-8b0b-b4ad4dcc3aa1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4cef1faa-1f54-41e7-8b0b-b4ad4dcc3aa1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ReturnStatement>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("896c2b70-81dd-4463-8a9d-e6370ef61bfb",
	"7e89c2b4-1232-4c0d-8edc-d7cfe660cce7",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"e0954958-58a2-4285-8182-efaf113e6085",
	'');
INSERT INTO S_SPARM
	VALUES ("1eb0de69-2359-45f4-b388-7365528ce748",
	"7e89c2b4-1232-4c0d-8edc-d7cfe660cce7",
	'prev_smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"896c2b70-81dd-4463-8a9d-e6370ef61bfb",
	'');
INSERT INTO PE_PE
	VALUES ("7e89c2b4-1232-4c0d-8edc-d7cfe660cce7",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e30915e6-a856-4172-984e-cd677fcbdfc2",
	"00000000-0000-0000-0000-000000000000",
	'transformServiceCall',
	'',
	'service_call = param.service_call;
block = param.block;
prev_smt = param.prev_smt;
select one masl_statement related by service_call->Statement2[R5135];

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if (not_empty prev_smt)
  smt.statement_number = STRING::itoa(i:STRING::atoi(s:prev_smt.statement_number) + 1);
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.actions = masl_statement.actions;

select one domain_service_invocation related by service_call->ServiceInvocation[R5161]->DomainServiceInvocation[R5610];
if (not_empty domain_service_invocation)
  select one service related by domain_service_invocation->DomainService[R5611]->Service[R5203];
	containing_comp_def = ::getCompDefForStatement(smt:smt);
	select any invocable related by containing_comp_def->Function[R405]->InvocableObject[R427] where (selected.name == "" + service.name);
	if (not_empty invocable)
		// create expression as statement
		create object instance eas of ExpressionAsStatement;
		relate eas to smt across R451;
		// create main expression
		create object instance expr of Expression;
		relate expr to smt across R775;
		expr.expression_number = "1";
		void_type = ::TypeReference_getBuiltinTypeReference(name:"void");
		relate void_type to expr across R795;
		// create invocation
		create object instance invoc of Invocation;
		relate invoc to expr across R776;
		relate invoc to invocable across R792;
		// relate expression to expression as statement
		relate eas to expr across R476;
		// create named reference expression
		create object instance expr2 of Expression;
		relate expr2 to smt across R775;
		expr2.expression_number = "1.1";
		void_type = ::TypeReference_getBuiltinTypeReference(name:"void");
		relate void_type to expr2 across R795;
		// create named reference
		create object instance named_ref of NamedReference;
		relate named_ref to expr2 across R776;
		relate expr2 to invoc across R798;
		named_ref.name = "context()";
		// transform actual parameters
		select one first_argument related by service_call->ServiceInvocation[R5161]->CallExpression[R5500]->Argument[R5575];
		if (not_empty first_argument)
		  ::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
		end if;
	else
		// TODO bad
	end if;
else
select one terminator_service_invocation related by service_call->ServiceInvocation[R5161]->TerminatorServiceInvocation[R5610];
if (not_empty terminator_service_invocation)
  select one domain_terminator related by terminator_service_invocation->DomainTerminatorService[R5612]->DomainTerminator[R5306];
  select one service related by terminator_service_invocation->DomainTerminatorService[R5612]->Service[R5203];
	containing_comp_def = ::getCompDefForStatement(smt:smt);
	select any target_port related by containing_comp_def->Port[R417] where (selected.name == containing_comp_def.name + ::camelCaseName(name:domain_terminator.name, start_lower:false));
	select any invocable related by target_port->PortMessage[R420]->InvocableObject[R427] where (selected.name == "" + service.name);
	if (not_empty invocable)
		// create expression as statement
		create object instance eas of ExpressionAsStatement;
		relate eas to smt across R451;
		// create main expression
		create object instance expr of Expression;
		relate expr to smt across R775;
		expr.expression_number = "1";
		relate eas to expr across R476;
		void_type = ::TypeReference_getBuiltinTypeReference(name:"void");
		relate void_type to expr across R795;
		// create invocation
		create object instance invoc of Invocation;
		relate invoc to expr across R776;
		relate invoc to invocable across R792;
		// create named reference expression
		create object instance expr2 of Expression;
		relate expr2 to smt across R775;
		expr2.expression_number = "1.1";
		relate expr2 to invoc across R798;
		void_type = ::TypeReference_getBuiltinTypeReference(name:"void");
		relate void_type to expr2 across R795;
		// create named reference
		create object instance named_ref of NamedReference;
		relate named_ref to expr2 across R776;
		named_ref.name = "context()." + target_port.port_name + "()";
		// transform actual parameters
		select one first_argument related by service_call->ServiceInvocation[R5161]->CallExpression[R5500]->Argument[R5575];
		if (not_empty first_argument)
		  ::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
		end if;
	else
		// TODO bad
	end if;
else
select one instance_service_invocation related by service_call->ServiceInvocation[R5161]->InstanceServiceInvocation[R5610];
if (not_empty instance_service_invocation)
  select one object_service related by instance_service_invocation->ObjectService[R5614];
  select one service related by object_service->Service[R5203];
	select any invocable related by object_service->ObjectDeclaration[R5808]->Class[R8300]->Operation[R416]->InvocableObject[R427] where (selected.name == "" + service.name);
	if (not_empty invocable)
		// create expression as statement
		create object instance eas of ExpressionAsStatement;
		relate eas to smt across R451;
		// create main expression
		create object instance expr of Expression;
		relate expr to smt across R775;
		expr.expression_number = "1";
		relate eas to expr across R476;
		void_type = ::TypeReference_getBuiltinTypeReference(name:"void");
		relate void_type to expr across R795;
		// create invocation
		create object instance invoc of Invocation;
		relate invoc to expr across R776;
		relate invoc to invocable across R792;
		// relate expression to expression as statement
		select one inst_val related by instance_service_invocation->Expression2[R5615];
		select one this_literal related by inst_val->LiteralExpression[R5517]->ThisLiteral[R5700];
		if (not_empty this_literal)
			// create variable reference expression
			create object instance expr2 of Expression;
			relate expr2 to smt across R775;
			expr2.expression_number = "1.1";
			relate expr2 to invoc across R798;
			select one inst_type related by object_service->ObjectDeclaration[R5808]->Class[R8300]->Type[R407];
			op_type = ::TypeReference_getInstanceWithDimString(type:inst_type, dims:"");
			relate op_type to expr2 across R795;
			// create named reference to self
			create object instance self_ref of NamedReference;
			relate self_ref to expr2 across R776;
			self_ref.name = "self()";
		else
		  ::transformMaslExpression(masl_expression:inst_val, expr_number:"1.1", smt:smt);
      select any expr2 related by smt->Expression[R775] where (selected.expression_number == "1.1");
			relate expr2 to invoc across R798;
		end if;
		// transform actual parameters
		select one first_argument related by service_call->ServiceInvocation[R5161]->CallExpression[R5500]->Argument[R5575];
		if (not_empty first_argument)
			::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
		end if;
	else
		// TODO bad
	end if;
else
  // TODO
end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	3);
INSERT INTO S_SPARM
	VALUES ("fe55a1a8-367f-4850-bca2-5f104db30a50",
	"e30915e6-a856-4172-984e-cd677fcbdfc2",
	'service_call',
	"9e1e8ee5-e6f9-48b8-a8f3-324c684cde30",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9e1e8ee5-e6f9-48b8-a8f3-324c684cde30",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ServiceCall>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("e165cafd-1144-40d0-954d-3a962c9b62a4",
	"e30915e6-a856-4172-984e-cd677fcbdfc2",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"fe55a1a8-367f-4850-bca2-5f104db30a50",
	'');
INSERT INTO S_SPARM
	VALUES ("a8c1a79c-c1c0-48b9-8d56-9f0949e82423",
	"e30915e6-a856-4172-984e-cd677fcbdfc2",
	'prev_smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"e165cafd-1144-40d0-954d-3a962c9b62a4",
	'');
INSERT INTO PE_PE
	VALUES ("e30915e6-a856-4172-984e-cd677fcbdfc2",
	1,
	"c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("c45f2f21-d5ff-4652-999f-d4808df1e2ef",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'transform',
	'',
	0,
	'../transform.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("ff182108-eff3-4cdc-81dd-efdc6098874b",
	'tool-core-masl',
	1,
	'../../tool-core-masl.xtuml');
