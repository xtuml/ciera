-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'expression',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("320ed2d6-2132-412e-ab05-dbb5bdb4d4ee",
	112,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'tool-core-masl::transform::expression');
INSERT INTO DIM_DIA
	VALUES ("320ed2d6-2132-412e-ab05-dbb5bdb4d4ee",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("8faac498-475f-4436-b4d4-56b2be67ec3f",
	"00000000-0000-0000-0000-000000000000",
	'transformMaslExpression',
	'',
	'masl_expression = param.masl_expression;
smt = param.smt;
expr_number = param.expr_number;

select one literal_expression related by masl_expression->LiteralExpression[R5517];
if (not_empty literal_expression)
  ::transformLiteral(literal_expression:literal_expression, smt:smt, expr_number:expr_number);
else
select one variable_reference related by masl_expression->VariableNameExpression[R5517];
if (not_empty variable_reference)
  ::transformVariableNameExpression(variable_reference:variable_reference, smt:smt, expr_number:expr_number);
else
select one create_expression related by masl_expression->CreateExpression[R5517];
if (not_empty create_expression)
  ::transformCreateExpression(create_expression:create_expression, smt:smt, expr_number:expr_number);
else
select one selected_attribute_expression related by masl_expression->SelectedAttributeExpression[R5517];
if (not_empty selected_attribute_expression)
  ::transformSelectedAttributeExpression(selected_attribute_expression:selected_attribute_expression, smt:smt, expr_number:expr_number);
else
select one binary_expression related by masl_expression->BinaryExpression[R5517];
if (not_empty binary_expression)
  ::transformBinaryExpression(binary_expression:binary_expression, smt:smt, expr_number:expr_number);
else
select one call_expression related by masl_expression->CallExpression[R5517];
if (not_empty call_expression)
  ::transformCallExpression(call_expression:call_expression, smt:smt, expr_number:expr_number);
else
select one param_ref related by masl_expression->ParameterNameExpression[R5517];
if (not_empty param_ref)
  ::transformParameterNameExpression(param_ref:param_ref, smt:smt, expr_number:expr_number);
else
select one object_ref related by masl_expression->ObjectNameExpression[R5517];
if (not_empty object_ref)
  ::transformObjectNameExpression(object_reference:object_ref, smt:smt, expr_number:expr_number);
else
select one find_expression related by masl_expression->FindExpression[R5517];
if (not_empty find_expression)
  ::transformFindExpression(find_expression:find_expression, smt:smt, expr_number:expr_number);
else
select one navigation_expression related by masl_expression->NavigationExpression[R5517];
if (not_empty navigation_expression)
  ::transformNavigationExpression(navigation_expression:navigation_expression, smt:smt, expr_number:expr_number);
else
  LOG::LogInfo( message:"expression type not yet supported" );
end if; end if; end if; end if; end if; end if; end if; end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("1a0c51c6-8b30-44dd-aa0f-a94b027a38e3",
	"8faac498-475f-4436-b4d4-56b2be67ec3f",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9ab5cfbd-5f99-4203-bf27-265445c77169",
	'');
INSERT INTO S_SPARM
	VALUES ("cdda67fc-2ef0-4c6e-bb4d-7d6e9e1d688d",
	"8faac498-475f-4436-b4d4-56b2be67ec3f",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"1a0c51c6-8b30-44dd-aa0f-a94b027a38e3",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("9ab5cfbd-5f99-4203-bf27-265445c77169",
	"8faac498-475f-4436-b4d4-56b2be67ec3f",
	'masl_expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Expression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO PE_PE
	VALUES ("8faac498-475f-4436-b4d4-56b2be67ec3f",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0e12573e-069b-4c90-9ce3-b266c877e1e4",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteral',
	'',
	'literal_expression = param.literal_expression;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select any type from instances of TypeReference;
select one basic_type related by literal_expression->MaslExpression[R5517]->BasicType[R5570];
type = ::getTypeReferenceForMASLType(basic_type:basic_type);
relate type to expr across R795;

// create literal
select one numeric_literal related by literal_expression->NumericLiteral[R5700];
if (not_empty numeric_literal)
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = numeric_literal.text;
else
select one character_literal related by literal_expression->CharacterLiteral[R5700];
if (not_empty character_literal)
  // TODO
else
select one string_literal related by literal_expression->StringLiteral[R5700];
if (not_empty string_literal)
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = string_literal.noQuotes;
else
select one timestamp_literal related by literal_expression->TimestampLiteral[R5700];
if (not_empty timestamp_literal)
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = "Date.fromString(" + STRING::quote() + timestamp_literal.original + STRING::quote() + ")";
else
select one duration_literal related by literal_expression->DurationLiteral[R5700];
if (not_empty duration_literal)
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = "Duration.fromString(" + STRING::quote() + duration_literal.literal + STRING::quote() + ")";
else
select one boolean_literal related by literal_expression->BooleanLiteral[R5700];
if (not_empty boolean_literal)
  create object instance lit of Literal;
  relate lit to expr across R776;
  if boolean_literal.value
    lit.value = "true";
  else
    lit.value = "false";
  end if;
else
select one null_literal related by literal_expression->NullLiteral[R5700];
if (not_empty null_literal)
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = "null";
else
select one flush_literal related by literal_expression->FlushLiteral[R5700];
if (not_empty flush_literal)
  create object instance named_ref of NamedReference;
  relate named_ref to expr across R776;
  named_ref.name = "flush";
else
select one endl_literal related by literal_expression->EndlLiteral[R5700];
if (not_empty endl_literal)
  create object instance named_ref of NamedReference;
  relate named_ref to expr across R776;
  named_ref.name = "System.lineSeparator()";
else
select one this_literal related by literal_expression->ThisLiteral[R5700];
if (not_empty this_literal)
  create object instance named_ref of NamedReference;
  relate named_ref to expr across R776;
  named_ref.name = "self()";
else
select one console_literal related by literal_expression->ConsoleLiteral[R5700];
if not_empty console_literal
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = "Device.console()";
end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; ',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("db4a66d1-b7a9-4f8b-b1e3-1219244fdda6",
	"0e12573e-069b-4c90-9ce3-b266c877e1e4",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"e94be769-92ca-4cbd-8db2-dab514aea90f",
	'');
INSERT INTO S_SPARM
	VALUES ("3f0b7cc0-7f77-474f-b911-93ededcabe8f",
	"0e12573e-069b-4c90-9ce3-b266c877e1e4",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"db4a66d1-b7a9-4f8b-b1e3-1219244fdda6",
	'');
INSERT INTO S_SPARM
	VALUES ("e94be769-92ca-4cbd-8db2-dab514aea90f",
	"0e12573e-069b-4c90-9ce3-b266c877e1e4",
	'literal_expression',
	"93104ff2-77fc-4f9a-99a3-5e7c087de835",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("93104ff2-77fc-4f9a-99a3-5e7c087de835",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<LiteralExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/literal/literal.xtuml');
INSERT INTO PE_PE
	VALUES ("0e12573e-069b-4c90-9ce3-b266c877e1e4",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8b25318a-a390-4219-9b88-7f42b6542b6e",
	"00000000-0000-0000-0000-000000000000",
	'transformVariableNameExpression',
	'',
	'variable_reference = param.variable_reference;
select one variable_def related by variable_reference->VariableDefinition[R5562];
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// create variable reference
var = ::getVariableInScope(smt:smt, name:variable_def.name);
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to expr across R776;

// link type
select one type related by var->TypeReference[R461];
relate type to expr across R795;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("396a91a8-cb8e-4882-b1d7-17822eb2d503",
	"8b25318a-a390-4219-9b88-7f42b6542b6e",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"6e415dca-e16f-450f-9606-46f909c3bea5",
	'');
INSERT INTO S_SPARM
	VALUES ("dda0d778-10b0-4b75-b93c-43db467804f7",
	"8b25318a-a390-4219-9b88-7f42b6542b6e",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"396a91a8-cb8e-4882-b1d7-17822eb2d503",
	'');
INSERT INTO S_SPARM
	VALUES ("6e415dca-e16f-450f-9606-46f909c3bea5",
	"8b25318a-a390-4219-9b88-7f42b6542b6e",
	'variable_reference',
	"64fca7f9-ee44-47dd-8a4c-125cb175a7d0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("64fca7f9-ee44-47dd-8a4c-125cb175a7d0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<VariableNameExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO PE_PE
	VALUES ("8b25318a-a390-4219-9b88-7f42b6542b6e",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d98ff46-616a-4379-b408-cd8e2b7226dd",
	"00000000-0000-0000-0000-000000000000",
	'transformCreateExpression',
	'',
	'create_expression = param.create_expression;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one obj related by create_expression->ObjectDeclaration[R5511]->Class[R8300];
cr_type = ::getObjectReference(obj:obj);
relate cr_type to expr across R795;

// create creation
create object instance cr of Creation;
relate cr to expr across R776;
relate cr to obj across R780;
select one class_file related by obj->File[R401];

// link initial state if applicable
select any init_state related by create_expression->AttributeInitialization[R5566]->MaslState[R5567]->State[R8302];
if not_empty init_state
  relate init_state to cr across R3923;
end if;

// transform attribute initializers
select many attr_initizations related by create_expression->AttributeInitialization[R5566];
for each attr_initialization in attr_initizations
  select one init_masl_expr related by attr_initialization->MaslExpression[R5568];
  select one attr related by attr_initialization->AttributeDeclaration[R5565]->Attribute[R8301];
  if not_empty attr and not_empty init_masl_expr
    create object instance attr_init of InstanceIdentifierAttributeInitialization;
    relate attr_init to cr across R3925;
    select many existing_inits related by cr->InstanceIdentifierAttributeInitialization[R3925];
    init_expr_number = expr.expression_number + "." + STRING::itoa(i:cardinality existing_inits);
    ::transformMaslExpression(masl_expression:init_masl_expr, expr_number:init_expr_number, smt:smt);
    select any init_expr related by smt->Expression[R775] where selected.expression_number == init_expr_number;
    relate attr to init_expr across R3924 using attr_init;
  end if;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("fa40c918-25bf-4359-88a5-022984ac6cfa",
	"7d98ff46-616a-4379-b408-cd8e2b7226dd",
	'create_expression',
	"5cf91f22-7d2b-48cf-aed2-8f35dd414190",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5cf91f22-7d2b-48cf-aed2-8f35dd414190",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<CreateExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("5c1951e7-be23-4a35-b688-ff98bf275d77",
	"7d98ff46-616a-4379-b408-cd8e2b7226dd",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"fa40c918-25bf-4359-88a5-022984ac6cfa",
	'');
INSERT INTO S_SPARM
	VALUES ("add15592-1b2d-416b-b05e-a094a607a96c",
	"7d98ff46-616a-4379-b408-cd8e2b7226dd",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5c1951e7-be23-4a35-b688-ff98bf275d77",
	'');
INSERT INTO PE_PE
	VALUES ("7d98ff46-616a-4379-b408-cd8e2b7226dd",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("09ea913b-8b3a-4c6a-8a96-c27f2785e9df",
	"00000000-0000-0000-0000-000000000000",
	'transformSelectedAttributeExpression',
	'',
	'selected_attribute_expression = param.selected_attribute_expression;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one basic_type related by selected_attribute_expression->AttributeDeclaration[R5541]->BasicType[R5803];
type = ::getTypeReferenceForMASLType(basic_type:basic_type);
relate type to expr across R795;

create object instance acc of AttributeAccess;
relate acc to expr across R776;
select one root_expression related by selected_attribute_expression->MaslExpression[R5569];
::transformMaslExpression(masl_expression:root_expression, expr_number:expr.expression_number + ".1", smt:smt);
select any root_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1");
relate root_expr to acc across R785;
select one attr related by selected_attribute_expression->AttributeDeclaration[R5541]->Attribute[R8301];
relate attr to acc across R788;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO S_SPARM
	VALUES ("cf8c0f13-f295-4329-b927-59b9a35abf69",
	"09ea913b-8b3a-4c6a-8a96-c27f2785e9df",
	'selected_attribute_expression',
	"146ff840-4cd1-4ef8-a124-9f921aa8b013",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("146ff840-4cd1-4ef8-a124-9f921aa8b013",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<SelectedAttributeExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("42888374-430c-4a68-a3c8-b7f88b6ba5f5",
	"09ea913b-8b3a-4c6a-8a96-c27f2785e9df",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"cf8c0f13-f295-4329-b927-59b9a35abf69",
	'');
INSERT INTO S_SPARM
	VALUES ("cdbc932b-bcd3-4353-9220-306ceb6d8d48",
	"09ea913b-8b3a-4c6a-8a96-c27f2785e9df",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"42888374-430c-4a68-a3c8-b7f88b6ba5f5",
	'');
INSERT INTO PE_PE
	VALUES ("09ea913b-8b3a-4c6a-8a96-c27f2785e9df",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9a77aa44-5e84-4b3a-8e10-6ca5c9abde72",
	"00000000-0000-0000-0000-000000000000",
	'transformBinaryExpression',
	'',
	'binary_expression = param.binary_expression;
smt = param.smt;
expr_number = param.expr_number;
file = ::getFileForStatement(smt:smt);

select one lhs related by binary_expression->MaslExpression[R5001];
select one rhs related by binary_expression->MaslExpression[R5002];

// if this is a comparison with null, create an empty check unary operation
select one lhs_null_literal related by lhs->LiteralExpression[R5517]->NullLiteral[R5700];
select one rhs_null_literal related by rhs->LiteralExpression[R5517]->NullLiteral[R5700];
if ((not_empty lhs_null_literal or not_empty rhs_null_literal) and
    (binary_expression.operator == Operator::equal or binary_expression.operator == Operator::notequal))

  // create expression
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = expr_number;

  // link type
  type = ::getBasicTypeReferenceByName(name:"boolean");
  relate type to expr across R795;

  // create the unary expression
  create object instance unary of UnaryOperation;
  relate unary to expr across R776;
  if (binary_expression.operator == Operator::notequal)  // create an additional ''not'' expression before transforming an ''empty'' expression
    unary.operator = "!";
    unary.invocation = false;
    // create ''empty'' expression
    create object instance expr2 of Expression;
    relate expr2 to smt across R775;
    expr2.expression_number = expr.expression_number + ".1";
    relate expr2 to unary across R777;
    boolean_type = ::getBasicTypeReferenceByName(name:"boolean");
    relate boolean_type to expr2 across R795;
    create object instance unary2 of UnaryOperation;
    relate unary2 to expr2 across R776;
    unary2.operator = "isEmpty";
    unary2.invocation = true;
    // transform the operand expression
    if (empty lhs_null_literal)
      ::transformMaslExpression(masl_expression:lhs, expr_number:expr2.expression_number + ".1", smt:smt);
    else
      ::transformMaslExpression(masl_expression:rhs, expr_number:expr2.expression_number + ".1", smt:smt);
    end if;
    select any op_expr related by smt->Expression[R775] where (selected.expression_number == expr2.expression_number + ".1");
    relate op_expr to unary2 across R777;
  else
    // set operator
    unary.operator = "isEmpty";
    unary.invocation = true;
    // transform the operand expression
    if (empty lhs_null_literal)
      ::transformMaslExpression(masl_expression:lhs, expr_number:expr.expression_number + ".1", smt:smt);
    else
      ::transformMaslExpression(masl_expression:rhs, expr_number:expr.expression_number + ".1", smt:smt);
    end if;
    select any op_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1");
    relate op_expr to unary across R777;
  end if;

else

  // create expression
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = expr_number;

  // link type
  select one masl_type related by binary_expression->MaslExpression[R5517]->BasicType[R5570];
  type = ::getTypeReferenceForMASLType(basic_type:masl_type);
  relate type to expr across R795;

  // create the binary expression
  create object instance binary of BinaryOperation;
  relate binary to expr across R776;

  // get lhs type
  select one l_masl_type related by lhs->BasicType[R5570];
  l_type = ::getTypeReferenceForMASLType(basic_type:l_masl_type);

  // translate the operator
  binary.invocation = false;
  binary.util = false;
  if (binary_expression.operator == Operator::and_)
    if (l_type.primitive)
      binary.operator = "&&";
    else
      binary.operator = "and";
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::or_)
    if (l_type.primitive)
      binary.operator = "||";
    else
      binary.operator = "or";
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::equal)
    if (l_type.primitive)
      binary.operator = "==";
    else
      binary.operator = "equals";
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::notequal)
    if (l_type.primitive)
      binary.operator = "!=";
    else
      binary.operator = "inequality";  // TODO
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::lessthan)
    if (l_type.primitive)
      binary.operator = "<";
    else
      if ("String" == l_type.type_reference)
        binary.operator = "StringUtil.lessThan";
        binary.invocation = true;
        binary.util = true;
      else
        binary.operator = "lessThan";
        binary.invocation = true;
      end if;
    end if;
  elif (binary_expression.operator == Operator::lessthanequal)
    if (l_type.primitive)
      binary.operator = "<=";
    else
      if ("String" == l_type.type_reference)
        binary.operator = "StringUtil.lessThanOrEqual";
        binary.invocation = true;
        binary.util = true;
      else
        binary.operator = "lessThanOrEqual";
        binary.invocation = true;
      end if;
    end if;
  elif (binary_expression.operator == Operator::greaterthan)
    if (l_type.primitive)
      binary.operator = ">";
    else
      if ("String" == l_type.type_reference)
        binary.operator = "StringUtil.greaterThan";
        binary.invocation = true;
        binary.util = true;
      else
        binary.operator = "greaterThan";
        binary.invocation = true;
      end if;
    end if;
  elif (binary_expression.operator == Operator::greaterthanequal)
    if (l_type.primitive)
      binary.operator = ">=";
    else
      if ("String" == l_type.type_reference)
        binary.operator = "StringUtil.greaterThanOrEqual";
        binary.invocation = true;
        binary.util = true;
      else
        binary.operator = "greaterThanOrEqual";
        binary.invocation = true;
      end if;
    end if;
  elif (binary_expression.operator == Operator::plus)
    if (l_type.primitive)
      binary.operator = "+";
    else
      binary.operator = "add";
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::minus)
    if (l_type.primitive)
      binary.operator = "-";
    else
      binary.operator = "subtract";
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::times)
    if (l_type.primitive)
      binary.operator = "*";
    else
      binary.operator = "multiply";
      binary.invocation = true;
    end if;
  elif (binary_expression.operator == Operator::divide)
    if (l_type.primitive)
      binary.operator = "/";
    else
      binary.operator = "divide";
      binary.invocation = true;
    end if;
  /* TODO
  elif ("%" == T::sub(format:"l", s:v_bin.Operator))
    if (l_type.primitive())
      binary.operator = "%";
    else
      binary.operator = "remainder";
      binary.invocation = true;
    end if;
  elif ("|" == T::sub(format:"l", s:v_bin.Operator))
    binary.operator = "union";
    binary.invocation = true;
    binary.cast = l_type.name;
  elif ("&" == T::sub(format:"l", s:v_bin.Operator))
    binary.operator = "intersection";
    binary.invocation = true;
    binary.cast = l_type.name;
  elif ("^" == T::sub(format:"l", s:v_bin.Operator))
    binary.operator = "disunion";
    binary.invocation = true;
    binary.cast = l_type.name;
  */
  elif (binary_expression.operator == Operator::concatenate)
    binary.operator = "+";
  end if;

  // translate the left operand
  // TODO precedence check
  //if (::precedenceCheck(val1:l_val, val2:v_val) <= 0) // if the left operand is lower precedence than the current operator, force it to be evaluated first with parentheses
  if (false)
    // transform the left hand expression
    ::transformMaslExpression(masl_expression:lhs, expr_number:expr.expression_number + ".1.1", smt:smt);
    select any paren_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1.1");
    // create the parenthesis
    create object instance l_expr of Expression;
    relate l_expr to smt across R775;
    l_expr.expression_number = expr.expression_number + ".1";
    select one l_type_ref related by paren_expr->TypeReference[R795];
    relate l_type_ref to l_expr across R795;
    create object instance l_paren of ParenthesizedExpression;
    relate l_paren to l_expr across R776;
    relate l_expr to binary across R779;
    relate paren_expr to l_paren across R784;
  else
    // transform the left hand expression
    ::transformMaslExpression(masl_expression:lhs, expr_number:expr.expression_number + ".1", smt:smt);
    select any l_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1");
    relate l_expr to binary across R779;
  end if;
  // translate the right operand
  // TODO precedence check
  //if (::precedenceCheck(val1:r_val, val2:v_val) <= 0) // if the right operand is lower precedence than the current operator, force it to be evaluated first with parentheses
  if (false)
    // transform the right hand expression
    ::transformMaslExpression(masl_expression:rhs, expr_number:expr.expression_number + ".2.1", smt:smt);
    select any paren_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".2.1");
    // create the parenthesis
    create object instance r_expr of Expression;
    relate r_expr to smt across R775;
    r_expr.expression_number = expr.expression_number + ".2";
    select one r_type_ref related by paren_expr->TypeReference[R795];
    relate r_type_ref to r_expr across R795;
    create object instance r_paren of ParenthesizedExpression;
    relate r_paren to r_expr across R776;
    relate r_expr to binary across R778;
    relate paren_expr to r_paren across R784;
  else
    // transform the right hand expression
    ::transformMaslExpression(masl_expression:rhs, expr_number:expr.expression_number + ".2", smt:smt);
    select any r_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".2");
    relate r_expr to binary across R778;
  end if;
  
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	2);
INSERT INTO S_SPARM
	VALUES ("85659fc0-290b-4d89-a631-d4184db95508",
	"9a77aa44-5e84-4b3a-8e10-6ca5c9abde72",
	'binary_expression',
	"d47afd00-0267-4cad-9e1d-131556a7611a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d47afd00-0267-4cad-9e1d-131556a7611a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<BinaryExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/binary/binary.xtuml');
INSERT INTO S_SPARM
	VALUES ("515cb88a-62ac-43ed-a801-7e5de9647c19",
	"9a77aa44-5e84-4b3a-8e10-6ca5c9abde72",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"85659fc0-290b-4d89-a631-d4184db95508",
	'');
INSERT INTO S_SPARM
	VALUES ("09b406b5-bb25-4a77-b051-438d40eed45e",
	"9a77aa44-5e84-4b3a-8e10-6ca5c9abde72",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"515cb88a-62ac-43ed-a801-7e5de9647c19",
	'');
INSERT INTO PE_PE
	VALUES ("9a77aa44-5e84-4b3a-8e10-6ca5c9abde72",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("91188de4-0b26-460e-bbcc-fe037aebf6a5",
	"00000000-0000-0000-0000-000000000000",
	'transformCallExpression',
	'',
	'call_expression = param.call_expression;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one basic_type related by call_expression->MaslExpression[R5517]->BasicType[R5570];
type = ::getTypeReferenceForMASLType(basic_type:basic_type);
relate type to expr across R795;

// domain service invocation
select one domain_service_invocation related by call_expression->ServiceInvocation[R5500]->DomainServiceInvocation[R5610];
if (not_empty domain_service_invocation)
  select one service related by domain_service_invocation->DomainService[R5611]->Service[R5203];
  containing_comp_def = ::getCompDefForStatement(smt:smt);
  select any utility from instances of Utility where false;
  select any invocable related by containing_comp_def->Function[R405]->InvocableObject[R427] where (selected.name == "" + service.name);
  if empty invocable
    select one domain related by domain_service_invocation->DomainService[R5611]->Domain[R5303];
    select any utility related by containing_comp_def->Utility[R4558] where selected.name == "" + domain.name;
    select any invocable related by utility->UtilityFunction[R4559]->InvocableObject[R427] where selected.name == "" + service.name;
  end if;
  if (not_empty invocable)
    // create invocation
    create object instance invoc of Invocation;
    relate invoc to expr across R776;
    relate invoc to invocable across R792;
    // create named reference expression
    create object instance expr2 of Expression;
    relate expr2 to smt across R775;
    expr2.expression_number = expr.expression_number + ".1";
    void_type = ::getBasicTypeReferenceByName(name:"void");
    relate void_type to expr2 across R795;
    if not_empty utility
      // create utility reference
      create object instance utility_ref of UtilityReference;
      relate utility_ref to utility across R3914;
      relate utility_ref to expr2 across R776;
      relate expr2 to invoc across R798;
    else
      // create domain reference
      create object instance domain_ref of DomainReference;
      relate domain_ref to expr2 across R776;
      relate expr2 to invoc across R798;
    end if;
    // transform actual parameters
    select one first_argument related by call_expression->Argument[R5575];
    if (not_empty first_argument)
      ::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
    end if;
  else
    // TODO bad
  end if;
else

// object instance service invocation
select one instance_service_invocation related by call_expression->ServiceInvocation[R5500]->InstanceServiceInvocation[R5610];
if (not_empty instance_service_invocation)
  select one object_service related by instance_service_invocation->ObjectService[R5614];
  select one service related by object_service->Service[R5203];
  select any invocable related by object_service->ObjectDeclaration[R5808]->Class[R8300]->Operation[R416]->InvocableObject[R427] where (selected.name == "" + service.name);
  if (not_empty invocable)
    // create invocation
    create object instance invoc of Invocation;
    relate invoc to expr across R776;
    relate invoc to invocable across R792;
    // relate expression to expression as statement
    select one inst_val related by instance_service_invocation->MaslExpression[R5615];
    select one this_literal related by inst_val->LiteralExpression[R5517]->ThisLiteral[R5700];
    ::transformMaslExpression(masl_expression:inst_val, expr_number:expr.expression_number + ".1", smt:smt);
    select any expr2 related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1");
    relate expr2 to invoc across R798;
    // transform actual parameters
    select one first_argument related by call_expression->ServiceInvocation[R5500]->CallExpression[R5500]->Argument[R5575];
    if (not_empty first_argument)
      ::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
    end if;
  else
    // TODO bad
  end if;
else

// object instance service invocation
select one object_service_invocation related by call_expression->ServiceInvocation[R5500]->ObjectServiceInvocation[R5610];
if (not_empty object_service_invocation)
  select one object_service related by object_service_invocation->ObjectService[R5613];
  select one service related by object_service->Service[R5203];
  select one obj related by object_service->ObjectDeclaration[R5808]->Class[R8300];
  select any invocable related by obj->Operation[R416]->InvocableObject[R427]
    where (selected.name == "" + service.name or selected.name == "_" + obj.name + "_" + service.name);
  if (not_empty invocable)
    // create invocation
    create object instance invoc of Invocation;
    relate invoc to expr across R776;
    relate invoc to invocable across R792;
    // for class based operations, add domain as first parameter
    create object instance expr3 of Expression;
    relate expr3 to smt across R775;
    expr3.expression_number = expr.expression_number + ".1";
    void_type = ::getBasicTypeReferenceByName(name:"void");
    relate void_type to expr3 across R795;
    relate expr3 to invoc across R798;
    // create named reference
    create object instance domain_ref of DomainReference;
    relate domain_ref to expr3 across R776;
    // transform actual parameters
    select one first_argument related by call_expression->ServiceInvocation[R5500]->CallExpression[R5500]->Argument[R5575];
    if (not_empty first_argument)
      ::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
    end if;
  else
    // TODO bad
  end if;
else

// cast expression  
select one cast_expression related by call_expression->CastExpression[R5500];
if (not_empty cast_expression)
  // create type promotion
  create object instance cast_expr of TypeConversion;
  relate cast_expr to expr across R776;
  // TODO for now only support simple casting
  select one first_argument related by call_expression->Argument[R5575]->MaslExpression[R5577];
  ::transformMaslExpression(masl_expression:first_argument, expr_number:expr_number + ".1", smt:smt);
  select any prom_val related by smt->Expression[R775] where (selected.expression_number == expr_number + ".1");
  relate prom_val to cast_expr across R3907;
else
  
// type characteristic expression
select one characteristic_expression related by call_expression->CharacteristicExpression[R5500];
if (not_empty characteristic_expression)

  // TODO make sure this works for "class based" type characterstics

  // translate the root expression
  select one base_masl_expression related by characteristic_expression->MaslExpression[R5504];
  ::transformMaslExpression(masl_expression:base_masl_expression, expr_number:expr_number + ".1", smt:smt);
  select any base_expr related by smt->Expression[R775] where (selected.expression_number == expr_number + ".1");
  select one base_type related by base_expr->TypeReference[R795]->Type[R3800];

  // find the characteristic
  characteristic_name = "";
  if characteristic_expression.characteristic == "delta"
    characteristic_name = "getPeriod";
  elif characteristic_expression.characteristic == "scheduled_at"
    characteristic_name = "getScheduledExpirationTime";
  elif characteristic_expression.characteristic == "expired_at"
    characteristic_name = "getLastExpirationTime";
  elif characteristic_expression.characteristic == "scheduled"
    characteristic_name = "isScheduled";
  elif characteristic_expression.characteristic == "expired"
    characteristic_name = "isExpired";
  else
    LOG::LogFailure(message:"Unsupported type characterstic ''" + characteristic_expression.characteristic + "'' for type: " + base_type.name);
  end if;
  select any characteristic related by base_type->Characteristic[R3820] where selected.name == characteristic_name;
  select one invocable related by characteristic->InvocableObject[R427];

  // create an invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  relate base_expr to invoc across R798;

  // transform actual parameters
  select one first_argument related by call_expression->Argument[R5575];
  if (not_empty first_argument)
    ::transformArguments(invocation:invoc, first_argument:first_argument, expr_number:expr.expression_number, base_num:2);
  end if;

else
  // TODO
end if; end if; end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	2);
INSERT INTO S_SPARM
	VALUES ("c03e7c08-75d5-4b82-8b5c-0ad9ff80a48b",
	"91188de4-0b26-460e-bbcc-fe037aebf6a5",
	'call_expression',
	"11c510b7-7d65-427b-b237-d125229df9a5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("11c510b7-7d65-427b-b237-d125229df9a5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<CallExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("32916e7d-0038-4a9b-9b2a-4693cfcd80f6",
	"91188de4-0b26-460e-bbcc-fe037aebf6a5",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"c03e7c08-75d5-4b82-8b5c-0ad9ff80a48b",
	'');
INSERT INTO S_SPARM
	VALUES ("3c4c2040-e108-4ed7-ac42-7e03e2f74468",
	"91188de4-0b26-460e-bbcc-fe037aebf6a5",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"32916e7d-0038-4a9b-9b2a-4693cfcd80f6",
	'');
INSERT INTO PE_PE
	VALUES ("91188de4-0b26-460e-bbcc-fe037aebf6a5",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("29228760-e9fd-44d4-9c41-0dfcd038b372",
	"00000000-0000-0000-0000-000000000000",
	'transformArgument',
	'',
	'invocation = param.invocation;
parm = param.parm;
argument = param.argument;
prev_act_parm = param.prev_act_parm;
expr_number = param.expression_num;

select one smt related by invocation->Expression[R776]->Statement[R775];
select one masl_expression related by argument->MaslExpression[R5577];
// TODO considertype promotion
::transformMaslExpression(masl_expression:masl_expression, expr_number:expr_number, smt:smt);
select any expr related by smt->Expression[R775] where (selected.expression_number == expr_number);

// create the actual parameter
create object instance act_parm of ActualParameter;
relate act_parm to expr across R794;
relate invocation to act_parm across R793;
if (not_empty parm)
  relate act_parm to parm across R3904;
end if;
if (not_empty prev_act_parm)
  relate prev_act_parm to act_parm across R3905.''precedes'';
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("0e46f8eb-43aa-4438-9f86-1900c44699a6",
	"29228760-e9fd-44d4-9c41-0dfcd038b372",
	'invocation',
	"887d1375-b0ab-4462-b2be-ec5b8e265583",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("887d1375-b0ab-4462-b2be-ec5b8e265583",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocation>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("fa8935b8-d588-4da8-b7b0-034e59a8058c",
	"29228760-e9fd-44d4-9c41-0dfcd038b372",
	'parm',
	"4f106c1b-2473-4622-9798-816c7eb93613",
	0,
	'',
	"0e46f8eb-43aa-4438-9f86-1900c44699a6",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4f106c1b-2473-4622-9798-816c7eb93613",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Formal Parameter>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/invocable/invocable.xtuml');
INSERT INTO S_SPARM
	VALUES ("d3a8a02e-4fc9-49b6-b6b4-484a8575d3ec",
	"29228760-e9fd-44d4-9c41-0dfcd038b372",
	'expression_num',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fa8935b8-d588-4da8-b7b0-034e59a8058c",
	'');
INSERT INTO S_SPARM
	VALUES ("3ce6be88-4d00-4e04-ae07-7483152f1692",
	"29228760-e9fd-44d4-9c41-0dfcd038b372",
	'argument',
	"55087eb6-f47a-4ad0-9d03-015c8f3c3663",
	0,
	'',
	"d3a8a02e-4fc9-49b6-b6b4-484a8575d3ec",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("55087eb6-f47a-4ad0-9d03-015c8f3c3663",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Argument>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("ef085794-a681-4ffd-b3de-e177ed5b3309",
	"29228760-e9fd-44d4-9c41-0dfcd038b372",
	'prev_act_parm',
	"15f335b9-816f-44ca-811f-2a2daa85f28b",
	0,
	'',
	"3ce6be88-4d00-4e04-ae07-7483152f1692",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("15f335b9-816f-44ca-811f-2a2daa85f28b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Actual Parameter>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/expression/expression.xtuml');
INSERT INTO PE_PE
	VALUES ("29228760-e9fd-44d4-9c41-0dfcd038b372",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("117a5174-ab8c-4ddc-a953-7d83d6398ed9",
	"00000000-0000-0000-0000-000000000000",
	'transformArguments',
	'',
	'invocation = param.invocation;
first_argument = param.first_argument;
expr_number = param.expr_number;
base_num = param.base_num;

// get first formal parameter
select any parm related by invocation->InvocableObject[R792]->FormalParameter[R429];
select one prev_parm related by parm->FormalParameter[R404.''follows''];
while (not_empty prev_parm)
  parm = prev_parm;
  select one prev_parm related by parm->FormalParameter[R404.''follows''];
end while;

// transform each parameter
num = base_num;
select any prev_act_parm from instances of ActualParameter where false;
current_argument = first_argument;
while (not_empty parm)
  ::transformArgument(invocation:invocation, parm:parm, expression_num:expr_number + "." + STRING::itoa(i:num), argument:current_argument, prev_act_parm:prev_act_parm);
  select any prev_act_parm related by invocation->ActualParameter[R793] where (selected.expression_number == expr_number + "." + STRING::itoa(i:num));
  select one parm related by parm->FormalParameter[R404.''precedes''];
  num = num + 1;
  select one current_argument related by current_argument->Argument[R5576.''precedes''];
end while;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("53e7c8f9-f637-4c96-95d2-b815abbf6545",
	"117a5174-ab8c-4ddc-a953-7d83d6398ed9",
	'invocation',
	"887d1375-b0ab-4462-b2be-ec5b8e265583",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9a08685a-b41d-4db7-b289-4b266cffcc53",
	"117a5174-ab8c-4ddc-a953-7d83d6398ed9",
	'first_argument',
	"55087eb6-f47a-4ad0-9d03-015c8f3c3663",
	0,
	'',
	"53e7c8f9-f637-4c96-95d2-b815abbf6545",
	'');
INSERT INTO S_SPARM
	VALUES ("35743f25-caed-42e1-a551-8d010955c613",
	"117a5174-ab8c-4ddc-a953-7d83d6398ed9",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9a08685a-b41d-4db7-b289-4b266cffcc53",
	'');
INSERT INTO S_SPARM
	VALUES ("aec3a95d-a3cc-47a2-8a4a-a62988cf3e87",
	"117a5174-ab8c-4ddc-a953-7d83d6398ed9",
	'base_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"35743f25-caed-42e1-a551-8d010955c613",
	'');
INSERT INTO PE_PE
	VALUES ("117a5174-ab8c-4ddc-a953-7d83d6398ed9",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("144c78dc-a3bb-48e7-aa14-e1e00036a790",
	"00000000-0000-0000-0000-000000000000",
	'transformParameterNameExpression',
	'',
	'param_ref = param.param_ref;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one basic_type related by param_ref->ParameterDefinition[R5536]->BasicType[R5200];
type = ::getTypeReferenceForMASLType(basic_type:basic_type);
relate type to expr across R795;

create object instance ref of ParameterReference;
relate ref to expr across R776;
select one param_def related by param_ref->ParameterDefinition[R5536];
select any formal_param related by smt->CodeBlock[R450]->InvocableObject[R4000]->FormalParameter[R429]
  where (selected.name == "p_" + param_def.name);
if (not_empty formal_param)
  relate formal_param to ref across R781;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	3);
INSERT INTO S_SPARM
	VALUES ("c2c935c5-7101-4b12-bb25-fc1d354b3134",
	"144c78dc-a3bb-48e7-aa14-e1e00036a790",
	'param_ref',
	"a3feb24c-045b-4744-bb9e-fe9bbfffe967",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a3feb24c-045b-4744-bb9e-fe9bbfffe967",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ParameterNameExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("6be0082d-b45b-435d-a513-4513aed98363",
	"144c78dc-a3bb-48e7-aa14-e1e00036a790",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"c2c935c5-7101-4b12-bb25-fc1d354b3134",
	'');
INSERT INTO S_SPARM
	VALUES ("f909db40-0ae3-4825-a373-c8c4b2a48784",
	"144c78dc-a3bb-48e7-aa14-e1e00036a790",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6be0082d-b45b-435d-a513-4513aed98363",
	'');
INSERT INTO PE_PE
	VALUES ("144c78dc-a3bb-48e7-aa14-e1e00036a790",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3b04df9d-b2a1-4dff-aef0-06e0e9e94af6",
	"00000000-0000-0000-0000-000000000000",
	'transformObjectNameExpression',
	'',
	'object_reference = param.object_reference;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one obj related by object_reference->ObjectDeclaration[R5533]->Class[R8300];
stream_type = ::getObjectStreamReference(obj:obj);
relate stream_type to expr across R795;

// create selector
create object instance sel of SelectExpr;
relate sel to expr across R776;
create object instance sel_fi of SelectFromInstances;
relate sel_fi to sel across R789;
relate obj to sel_fi across R799;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	4);
INSERT INTO S_SPARM
	VALUES ("238bddfd-6ecc-432f-830b-c67e02f3bf2c",
	"3b04df9d-b2a1-4dff-aef0-06e0e9e94af6",
	'object_reference',
	"5900757f-4fb3-40fb-901a-5bce08ec76ee",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5900757f-4fb3-40fb-901a-5bce08ec76ee",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ObjectNameExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("526d93c9-3b72-4f73-b260-fe8a9b1fab4f",
	"3b04df9d-b2a1-4dff-aef0-06e0e9e94af6",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"238bddfd-6ecc-432f-830b-c67e02f3bf2c",
	'');
INSERT INTO S_SPARM
	VALUES ("26fc56ed-e96f-446f-86be-5f92c8718fd1",
	"3b04df9d-b2a1-4dff-aef0-06e0e9e94af6",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"526d93c9-3b72-4f73-b260-fe8a9b1fab4f",
	'');
INSERT INTO PE_PE
	VALUES ("3b04df9d-b2a1-4dff-aef0-06e0e9e94af6",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a69974b3-9927-4e0d-90f4-cc597035e9ca",
	"00000000-0000-0000-0000-000000000000",
	'transformFindExpression',
	'',
	'find_expression = param.find_expression;
smt = param.smt;
expr_number = param.expr_number;

if find_expression.flavor == FindType::find  // simply pass it through
  select one root_expression related by find_expression->MaslExpression[R5519];
  ::transformMaslExpression(masl_expression:root_expression, expr_number:expr_number, smt:smt);
elif find_expression.flavor == FindType::find_one

  // create expression
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = expr_number;

  // link type
  select one find_class related by find_expression->MaslExpression[R5517]->BasicType[R5570]
    ->InstanceType[R6205]->ObjectDeclaration[R6220]->Class[R8300];
  inst_type = ::getObjectReference(obj:find_class);
  relate inst_type to expr across R795;
  
  // create any expression
  create object instance any_expr of AnyExpr;
  relate any_expr to expr across R776;
  select one root_expression related by find_expression->MaslExpression[R5519];
  ::transformMaslExpression(masl_expression:root_expression, expr_number:expr_number + ".1", smt:smt);
  select any root_expr related by smt->Expression[R775] where (selected.expression_number == expr_number + ".1");
  relate root_expr to any_expr across R783;

else
  // TODO find_only
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	5);
INSERT INTO S_SPARM
	VALUES ("8f1a492b-bd25-46d5-8192-477dc2f6b24e",
	"a69974b3-9927-4e0d-90f4-cc597035e9ca",
	'find_expression',
	"8148fd0d-6ecb-4359-9582-3aa1bb4ea4f9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8148fd0d-6ecb-4359-9582-3aa1bb4ea4f9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<FindExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("73e31994-516d-44b2-8b24-9c60a0e82e29",
	"a69974b3-9927-4e0d-90f4-cc597035e9ca",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"8f1a492b-bd25-46d5-8192-477dc2f6b24e",
	'');
INSERT INTO S_SPARM
	VALUES ("755d876e-482e-4bda-a343-028cadca470b",
	"a69974b3-9927-4e0d-90f4-cc597035e9ca",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"73e31994-516d-44b2-8b24-9c60a0e82e29",
	'');
INSERT INTO PE_PE
	VALUES ("a69974b3-9927-4e0d-90f4-cc597035e9ca",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1f49e223-377a-4f56-a00b-d6aa7bac6e06",
	"00000000-0000-0000-0000-000000000000",
	'transformNavigationExpression',
	'',
	'navigation_expression = param.navigation_expression;
smt = param.smt;
expr_number = param.expr_number;

select one rel_spec related by navigation_expression->RelationshipSpecification[R5531];
select one lhs related by navigation_expression->MaslExpression[R5532];
select one lhs_collection related by navigation_expression->MaslExpression[R5517]->BasicType[R5570]->CollectionType[R6205];

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
// if the rel spec is a "many" association or the lhs is a collection type,
// assure that the type of the expression is an instance set
if (rel_spec.multiplicity == MaslMultiplicity::many or not_empty lhs_collection)
  select one obj related by lhs_collection->BasicType[R6208]->InstanceType[R6205]->ObjectDeclaration[R6220]->Class[R8300];
  stream_type = ::getObjectStreamReference(obj:obj);
  relate stream_type to expr across R795;
else
  select one obj related by navigation_expression->MaslExpression[R5517]->BasicType[R5570]->InstanceType[R6205]->ObjectDeclaration[R6220]->Class[R8300];
  inst_type = ::getObjectReference(obj:obj);
  relate inst_type to expr across R795;
end if;

// create select expression
create object instance sel of SelectExpr;
relate sel to expr across R776;
create object instance sel_rel of SelectRelated;
relate sel_rel to sel across R789;

select one rel related by rel_spec->RelationshipDeclaration[R6015];
select one base_class related by rel_spec->ObjectDeclaration[R6014]->Class[R8300];
select one target_class related by rel_spec->ObjectDeclaration[R6011]->Class[R8300];
select one using_class related by rel->AssociativeRelationshipDeclaration[R6010]->ObjectDeclaration[R6001]->Class[R8300];

// for navigating all the way across an associative, create a second selection
if (not_empty using_class and using_class.name != base_class.name and using_class.name != target_class.name)

  // create expression
  create object instance expr1 of Expression;
  relate expr1 to smt across R775;
  expr1.expression_number = expr_number + ".1";

  // link type
  // if the rel spec is a "many" association or the lhs is a collection type,
  // assure that the type of the expression is an instance set
  if (rel_spec.multiplicity == MaslMultiplicity::many or not_empty lhs_collection)
    select one obj related by lhs_collection->BasicType[R6208]->InstanceType[R6205]->ObjectDeclaration[R6220]->Class[R8300];
    stream_type = ::getObjectStreamReference(obj:obj);
    relate stream_type to expr1 across R795;
  else
    select one obj related by navigation_expression->MaslExpression[R5517]->BasicType[R5570]->InstanceType[R6205]->ObjectDeclaration[R6220]->Class[R8300];
    inst_type = ::getObjectReference(obj:obj);
    relate inst_type to expr1 across R795;
  end if;

  // create select expression
  create object instance sel1 of SelectExpr;
  relate sel1 to expr1 across R776;
  create object instance sel_rel1 of SelectRelated;
  relate sel_rel1 to sel1 across R789;

  // transform the root value
  ::transformMaslExpression(masl_expression:lhs, expr_number:expr_number + ".1.1", smt:smt);
  select any lhs_expr related by smt->Expression[R775] where (selected.expression_number == expr_number + ".1.1");
  relate lhs_expr to sel_rel1 across R791;

  // get the first selector name
  selector1_name = "" + rel.name + "_";
  if (rel_spec.role != "")
    selector1_name = selector1_name + T::sub(format:"_", s:rel_spec.role) + "_";
  end if;
  selector1_name = selector1_name + using_class.name;
  select any selector1 related by base_class->Selector[R442] where (selected.name == selector1_name);
  if (not_empty selector1)
    relate selector1 to sel_rel1 across R797;
  else
    // TODO bad
  end if;

  // relate the first selector to the second selector
  relate expr1 to sel_rel across R791;

  // get the second selector
  selector2_name = "" + rel.name + "_";
  if (rel_spec.role != "")
    selector2_name = selector2_name + T::sub(format:"_", s:rel_spec.role) + "_";
  end if;
  selector2_name = selector2_name + target_class.name;
  select any selector2 related by using_class->Selector[R442] where (selected.name == selector2_name);
  if (not_empty selector2)
    relate selector2 to sel_rel across R797;
  else
    // TODO bad
  end if;

else

  // transform the root value
  ::transformMaslExpression(masl_expression:lhs, expr_number:expr_number + ".1", smt:smt);
  select any lhs_expr related by smt->Expression[R775] where (selected.expression_number == expr_number + ".1");
  relate lhs_expr to sel_rel across R791;

  // get the selector
  selector_name = "" + rel.name + "_";
  if (rel_spec.role != "")
    selector_name = selector_name + T::sub(format:"_", s:rel_spec.role) + "_";
  end if;
  selector_name = selector_name + target_class.name;
  select any selector related by base_class->Selector[R442] where (selected.name == selector_name);
  if (not_empty selector)
    relate selector to sel_rel across R797;
  else
    // TODO bad
  end if;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	4);
INSERT INTO S_SPARM
	VALUES ("d23badaf-e4ad-495f-85c4-76988eec7a4e",
	"1f49e223-377a-4f56-a00b-d6aa7bac6e06",
	'navigation_expression',
	"d9337886-2fea-4bb9-8378-d849e35c32a9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d9337886-2fea-4bb9-8378-d849e35c32a9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<NavigationExpression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO S_SPARM
	VALUES ("4d5347e5-73ba-43f1-ae7f-8edff110c988",
	"1f49e223-377a-4f56-a00b-d6aa7bac6e06",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"d23badaf-e4ad-495f-85c4-76988eec7a4e",
	'');
INSERT INTO S_SPARM
	VALUES ("13131329-2d71-4482-91d8-ba2878a1d197",
	"1f49e223-377a-4f56-a00b-d6aa7bac6e06",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4d5347e5-73ba-43f1-ae7f-8edff110c988",
	'');
INSERT INTO PE_PE
	VALUES ("1f49e223-377a-4f56-a00b-d6aa7bac6e06",
	1,
	"6b1296bb-978b-44fd-b197-7cada155e1c8",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("6b1296bb-978b-44fd-b197-7cada155e1c8",
	1,
	"e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("e57bc9b3-2b76-471e-8c8a-d7282e2c4fc0",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'transform',
	'',
	0,
	'../transform.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("ff182108-eff3-4cdc-81dd-efdc6098874b",
	'tool-core-masl',
	1,
	'../../tool-core-masl.xtuml');
