-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	"ff182108-eff3-4cdc-81dd-efdc6098874b",
	'core_masl_utility_functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("d5b4a2a1-9952-487e-9398-c5ede50dfd1d",
	112,
	"3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'tool-core-masl::core_masl_utility_functions');
INSERT INTO DIM_DIA
	VALUES ("d5b4a2a1-9952-487e-9398-c5ede50dfd1d",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("a908ce8d-07c5-44cf-925b-6e71bd3b9fed",
	"00000000-0000-0000-0000-000000000000",
	'attrIsUnique',
	'',
	'attr = param.attr;
if attr.isUnique
  return true;
else
  select many unique_ref_attrs related by attr->AttributeDeclaration[R5800.''refers_to''];
  for each unique_ref_attr in unique_ref_attrs
    if ::attrIsUnique(attr:unique_ref_attr)
      return true;
    end if;
  end for;
  return false;
end if;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0,
	11);
INSERT INTO S_SPARM
	VALUES ("06418faf-5553-4c7d-99de-3b5a40c93f2d",
	"a908ce8d-07c5-44cf-925b-6e71bd3b9fed",
	'attr',
	"bc9fb0af-6887-4a01-9bad-2412058db57c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc9fb0af-6887-4a01-9bad-2412058db57c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<AttributeDeclaration>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/object/object.xtuml');
INSERT INTO PE_PE
	VALUES ("a908ce8d-07c5-44cf-925b-6e71bd3b9fed",
	1,
	"3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b05a942b-b18c-4f6e-89ad-f5b247981068",
	"00000000-0000-0000-0000-000000000000",
	'transformBuiltinMaslTypeCharacteristics',
	'',
	'// TODO need to complete this for other types

// timer characteristics
::createCharacteristic(type:"Timer", name:"getPeriod", type_based:false, return_type:"Duration");
::createCharacteristic(type:"Timer", name:"getScheduledExpirationTime", type_based:false, return_type:"TimeStamp");
::createCharacteristic(type:"Timer", name:"getLastExpirationTime", type_based:false, return_type:"TimeStamp");
::createCharacteristic(type:"Timer", name:"isScheduled", type_based:false, return_type:"boolean");
::createCharacteristic(type:"Timer", name:"isExpired", type_based:false, return_type:"boolean");

// set characteristics TODO move this to the main arch project
::createCharacteristic(type:"Set", name:"size", type_based:false, return_type:"int");
::createCharacteristic(type:"List", name:"size", type_based:false, return_type:"int");
::createCharacteristic(type:"String", name:"length", type_based:false, return_type:"int");

::createCharacteristic(type:"TimeStamp", name:"now", type_based:true, return_type:"same");

::createCharacteristic(type:"any", name:"toString", type_based:false, return_type:"String");
::createCharacteristic(type:"any", name:"fromString", type_based:true, return_type:"same");

::createCharacteristic(type:"Duration", name:"fromString", type_based:true, return_type:"same");
::createCharacteristic(type:"TimeStamp", name:"fromString", type_based:true, return_type:"same");
::createCharacteristic(type:"boolean", name:"parseBoolean", type_based:true, return_type:"same");
::createCharacteristic(type:"byte", name:"parseByte", type_based:true, return_type:"same");
::createCharacteristic(type:"double", name:"parseDouble", type_based:true, return_type:"same");
::createCharacteristic(type:"int", name:"parseInt", type_based:true, return_type:"same");
::createCharacteristic(type:"long", name:"parseLong", type_based:true, return_type:"same");
::createCharacteristic(type:"short", name:"parseShort", type_based:true, return_type:"same");

::createCharacteristic(type:"Duration", name:"getSeconds", type_based:false, return_type:"int");',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("b05a942b-b18c-4f6e-89ad-f5b247981068",
	1,
	"3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1a0b792f-f254-4ac0-96c3-42a338848779",
	"00000000-0000-0000-0000-000000000000",
	'createCharacteristic',
	'',
	'// select all types if given type name is ''any'' or select the one type named
select many types from instances of Type where param.type == "any" or selected.name == param.type;
for each type in types
  select any return_type from instances of TypeReference where false;
  if param.return_type == "same"
    return_type = ::getBasicTypeReference(type:type);
  else
    return_type = ::getBasicTypeReferenceByName(name:param.return_type);
  end if;
  create object instance invocable of InvocableObject;
  invocable.parent_name = type.name;
  invocable.parent_package = type.package;
  invocable.name = param.name;
  relate return_type to invocable across R428;
  create object instance characteristic of Characteristic;
  characteristic.type_based = param.type_based;
  relate characteristic to invocable across R427;
  relate characteristic to type across R3820;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	12);
INSERT INTO S_SPARM
	VALUES ("d0fa080b-4e70-4ea5-874f-79a7304f62dd",
	"1a0b792f-f254-4ac0-96c3-42a338848779",
	'type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("12fab36b-4797-4dae-a48a-4b9d38a322dd",
	"1a0b792f-f254-4ac0-96c3-42a338848779",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d0fa080b-4e70-4ea5-874f-79a7304f62dd",
	'');
INSERT INTO S_SPARM
	VALUES ("91eab2cb-5660-4818-9c9f-f0529d9b139c",
	"1a0b792f-f254-4ac0-96c3-42a338848779",
	'return_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"edca9857-7605-43c8-b282-d90e075de06d",
	'');
INSERT INTO S_SPARM
	VALUES ("edca9857-7605-43c8-b282-d90e075de06d",
	"1a0b792f-f254-4ac0-96c3-42a338848779",
	'type_based',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"12fab36b-4797-4dae-a48a-4b9d38a322dd",
	'');
INSERT INTO PE_PE
	VALUES ("1a0b792f-f254-4ac0-96c3-42a338848779",
	1,
	"3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0cd552df-9657-4c1d-b29f-a782f6733a65",
	"00000000-0000-0000-0000-000000000000",
	'getTypeReferenceForMASLType',
	'',
	'basic_type = param.basic_type;

select any empty_type_ref from instances of TypeReference where false;

// TODO currently just support builtin types, instance types, enumerated types, and sets

// void type
if empty basic_type
  return ::getBasicTypeReferenceByName(name:"void");
end if;

// builtin types
select one builtin related by basic_type->BuiltinType[R6205];
if not_empty builtin
  // map from MASL builtins to Ciera builtins
  if ("" + builtin.name == "boolean")
    return ::getBasicTypeReferenceByName(name:"boolean");
  elif ("" + builtin.name == "event")
    // return ''Object'' for deprecated inst<Event> type
    return ::getBasicTypeReferenceByName(name:"Object");
  elif ("" + builtin.name == "timer")
    return ::getBasicTypeReferenceByName(name:"Timer");
  elif ("" + builtin.name == "integer")
    return ::getBasicTypeReferenceByName(name:"int");
  elif ("" + builtin.name == "real")
    return ::getBasicTypeReferenceByName(name:"double");
  elif ("" + builtin.name == "string")
    return ::getBasicTypeReferenceByName(name:"String");
  elif ("" + builtin.name == "timestamp")
    return ::getBasicTypeReferenceByName(name:"TimeStamp");
  elif ("" + builtin.name == "duration")
    return ::getBasicTypeReferenceByName(name:"Duration");
  elif ("" + builtin.name == "instance")
    return ::getBasicTypeReferenceByName(name:"ObjectInstance");
  elif ("" + builtin.name == "device")
    return ::getBasicTypeReferenceByName(name:"Device");
  elif ("" + builtin.name == "byte")
    return ::getBasicTypeReferenceByName(name:"byte");
  elif ("" + builtin.name == "character")
    return ::getBasicTypeReferenceByName(name:"char");
  elif ("" + builtin.name == "wcharacter")
    return ::getBasicTypeReferenceByName(name:"char");
  elif ("" + builtin.name == "wstring")
    return ::getBasicTypeReferenceByName(name:"String");
  elif ("" + builtin.name == "long_integer")
    return ::getBasicTypeReferenceByName(name:"long");
  end if;
end if;

// instance types
select one instance_type related by basic_type->InstanceType[R6205];
if not_empty instance_type
  select one obj related by instance_type->ObjectDeclaration[R6220]->Class[R8300];
  return ::getObjectReference(obj:obj);
end if;

// collection types
select one collection_type related by basic_type->CollectionType[R6205];
if not_empty collection_type
  select one element_type related by collection_type->BasicType[R6208];
  select one set_type related by collection_type->SetType[R6207];
  select one sequence_type related by collection_type->SequenceType[R6207];
  if not_empty set_type
    element_type_ref = ::getTypeReferenceForMASLType(basic_type:element_type);
    return ::getSetReference(element_type:element_type_ref);
  elif not_empty sequence_type
    element_type_ref = ::getTypeReferenceForMASLType(basic_type:element_type);
    return ::getListReference(element_type:element_type_ref);
  end if;
  // TODO handle other collections
end if;

// user defined types
select one user_defined_type related by basic_type->MaslUserDefinedType[R6205];
if not_empty user_defined_type
  select one type related by user_defined_type->Type[R8314];
  if not_empty type
    return ::getBasicTypeReference(type:type);
  else
    select one root_type related by user_defined_type->TypeDeclaration[R6241]->TypeDefinition[R6234]->BasicType[R6236];
    if not_empty root_type
      // alias this type as the root type
      return ::getTypeReferenceForMASLType(basic_type:root_type);
    else
      // TODO bad
    end if;
  end if;
end if;

return empty_type_ref;',
	"096d9dad-f227-4793-bb43-a1915881b825",
	1,
	'',
	0,
	13);
INSERT INTO S_SPARM
	VALUES ("368d8d1c-2a20-4aa7-b34c-6947a593cc85",
	"0cd552df-9657-4c1d-b29f-a782f6733a65",
	'basic_type',
	"f2470f88-fc4a-406d-ba1c-54179e448ed4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f2470f88-fc4a-406d-ba1c-54179e448ed4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<BasicType>',
	'',
	'',
	'../../../../ooamasl/models/ooamasl/ooamasl/type/type.xtuml');
INSERT INTO PE_PE
	VALUES ("0cd552df-9657-4c1d-b29f-a782f6733a65",
	1,
	"3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("096d9dad-f227-4793-bb43-a1915881b825",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Type Reference>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/type/type.xtuml');
INSERT INTO S_SYNC
	VALUES ("ae37fe58-7405-43b3-aeb4-3027ebd88fce",
	"00000000-0000-0000-0000-000000000000",
	'importUtility',
	'',
	'utility = param.utility;
comp_def = param.comp_def;

if not_empty utility and not_empty comp_def

  // link the utility and the component definition
  create object instance uic of UtilityInComponent;
  relate utility to comp_def across R4558 using uic;
  
  // create a module dependency
  select any util_package from instances of ExportedPackage where selected.name == utility.package;
  select one util_mod related by util_package->Module[R5750];
  select one comp_mod related by comp_def->Module[R5752];
  if not_empty util_mod and not_empty comp_mod and util_mod != comp_mod
    select any dependency related by comp_mod->Dependency[R5753.''requires''] where selected.required_module_name == util_mod.name;
    if empty dependency
      create object instance dependency of Dependency;
      relate util_mod to comp_mod across R5753.''required by'' using dependency;
    end if;
  end if;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	14);
INSERT INTO S_SPARM
	VALUES ("03d91030-4c78-4956-b3c2-71fd411300f3",
	"ae37fe58-7405-43b3-aeb4-3027ebd88fce",
	'utility',
	"05845c9d-7216-4905-8b60-6bf9f95f42e7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("05845c9d-7216-4905-8b60-6bf9f95f42e7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Utility>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/component/component.xtuml');
INSERT INTO S_SPARM
	VALUES ("4bce4917-b632-4b5b-98f2-6011af314706",
	"ae37fe58-7405-43b3-aeb4-3027ebd88fce",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"03d91030-4c78-4956-b3c2-71fd411300f3",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("109e90cb-1d66-46ee-88db-a568044879d0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/component/component.xtuml');
INSERT INTO PE_PE
	VALUES ("ae37fe58-7405-43b3-aeb4-3027ebd88fce",
	1,
	"3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("3e3aaf4c-aba5-451d-b263-e8fc1b717bce",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("ff182108-eff3-4cdc-81dd-efdc6098874b",
	'tool-core-masl',
	1,
	'../tool-core-masl.xtuml');
