-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("3ea869ae-ac55-4a67-92db-243b6342aed5",
	"386a382c-354c-40ec-bfc6-a79a57e91ce8",
	"386a382c-354c-40ec-bfc6-a79a57e91ce8",
	'transform',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("4736e65d-0e1c-4728-a2b5-bde957966dc6",
	112,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'tool-template::transform');
INSERT INTO DIM_DIA
	VALUES ("4736e65d-0e1c-4728-a2b5-bde957966dc6",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("85946a53-e34b-4e86-a172-5be46fa0b534",
	"00000000-0000-0000-0000-000000000000",
	'resolveTemplateHooks',
	'',
	'select many affected_files from instances of File where false;
select many invocables from instances of InvocableObject;
for each invocable in invocables
  select one generic_invoc related by invocable->GenericInvocable[R427];
  if ( empty generic_invoc )
    select many template_invocations related by invocable->CodeBlock[R4000]->Statement[R450]->Expression[R775]->Invocation[R776] where
      ( "T" == selected.invoked_parent_name and "io.ciera.runtime.template.util" == selected.invoked_parent_package and "include" == selected.invoked_name );
    for each template_invocation in template_invocations
      select one smt related by template_invocation->Expression[R776]->Statement[R775];
      // get required variables
      select any file_param related by template_invocation->ActualParameter[R793] where ( selected.param_name == "p_file" );
      select one file_val related by file_param->Expression[R794]->Literal[R776];
      if ( empty file_val )
        // TODO bad currently this only supports string literals to specify template name
      end if;
      select any temp from instances of Z_Template where ( selected.name == file_val.value );
      select many var_refs from instances of VariableReference where ( selected.parent_name == temp.registry_name and
                                                                       selected.parent_package == temp.registry_package and
                                                                       selected.body_name == temp.name );
      select many required_vars related by var_refs->Variable[R782];
      select any last_var from instances of Variable where false;
      select any current_var from instances of Variable where false;
      prev_act_parm = file_param;
      i = 0;
      // NOTE the following assumes that the last segment of the previous parameter expresion number is a one digit number
      subexpr_num = STRING::atoi(s:STRING::substr(s:file_param.expression_number, begin:STRING::strlen(s:file_param.expression_number)-1, end:-1)) + 1;
      while ( i < cardinality required_vars )
        for each required_var in required_vars
          if ( ( empty last_var or last_var.name < required_var.name ) and ( empty current_var or required_var.name < current_var.name ) )
            current_var = required_var;
          end if;
        end for;
        // create variable reference expression
        create object instance expr of Expression;
        relate expr to smt across R775;
        expr.expression_number = template_invocation.expression_number + "." + STRING::itoa(i:subexpr_num);
        select one type related by current_var->TypeReference[R461];
        relate type to expr across R795;
        if ("self" == T::sub(format:"l", s:current_var.name)) // reference to self
          // create named reference
          create object instance self_ref of NamedReference;
          relate self_ref to expr across R776;
          self_ref.name = "self()";
        else
          create object instance var_ref of VariableReference;
          relate current_var to var_ref across R782;
          relate var_ref to expr across R776;
        end if;
        // create actual parameter
        create object instance act_parm of ActualParameter;
        relate act_parm to expr across R794;
        relate template_invocation to act_parm across R793;
        relate prev_act_parm to act_parm across R3905.''precedes'';
        prev_act_parm = act_parm;
        // update counters
        last_var = current_var;
        select any current_var from instances of Variable where false;
        i = i + 1;
        subexpr_num = subexpr_num + 1;
      end while;
      // add to the affected files list
      file = ::getFileForInvocable( invocable:invocable );
      affected_files = affected_files | file;
    end for;
  end if;
end for;

// re-render affected files
for each file in affected_files
  if ( not file.exclude )
    file.render();
  end if;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("85946a53-e34b-4e86-a172-5be46fa0b534",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("72574ddd-9711-4fad-900b-dfd52a5e3bc5",
	"00000000-0000-0000-0000-000000000000",
	'templateAppend',
	'',
	'smt = param.smt;
expr_arg = param.expr;

// create an invocation to T::append
select any utility from instances of Utility where ( "T" == selected.name and "io.ciera.runtime.template.util" == selected.package );
if ( not_empty utility )
  select any util_func related by utility->UtilityFunction[R4559] where ( selected.name == "append" );
  select one invocable related by util_func->InvocableObject[R427];
  if ( not_empty invocable )
    // create expression as statement
    create object instance eas of ExpressionAsStatement;
    relate eas to smt across R451;
    // create main expression
    create object instance expr of Expression;
    relate expr to smt across R775;
    expr.expression_number = "1";
    void_type_ref = TypeReference::getBuiltinTypeReference( name:"void" );
    relate void_type_ref to expr across R795;
    // create invocation
    create object instance invoc of Invocation;
    relate invoc to expr across R776;
    relate invoc to invocable across R792;
    // relate expression to expression as statement
    relate eas to expr across R476;
    // create named reference expression
    create object instance expr2 of Expression;
    relate expr2 to smt across R775;
    expr2.expression_number = "1.1";
    relate void_type_ref to expr2 across R795;
    // create named reference
    create object instance named_ref of NamedReference;
    relate named_ref to expr2 across R776;
    relate expr2 to invoc across R798;
    named_ref.name = "context()." + utility.name + "()";
    // transform actual parameter
    create object instance act_parm of ActualParameter;
    relate act_parm to expr_arg across R794;
    select any parm related by invocable->FormalParameter[R429];
    relate invoc to act_parm across R793;
    relate parm to act_parm across R3904;
  else
    // TODO bad
  end if;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("fe2605b6-4801-4d9f-948e-f658a14fc0ac",
	"72574ddd-9711-4fad-900b-dfd52a5e3bc5",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../tool-core/models/tool-core/architecture/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("7a2da9e5-81cd-49a5-abe6-6a1d0430976f",
	"72574ddd-9711-4fad-900b-dfd52a5e3bc5",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"fe2605b6-4801-4d9f-948e-f658a14fc0ac",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c732060c-653b-48f6-8ce5-99439b2a9c63",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Expression>',
	'',
	'',
	'../../../../tool-core/models/tool-core/architecture/expression/expression.xtuml');
INSERT INTO PE_PE
	VALUES ("72574ddd-9711-4fad-900b-dfd52a5e3bc5",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("02194a38-3dfb-46b3-9e9d-5cfe80578e3c",
	"00000000-0000-0000-0000-000000000000",
	'templateAppendString',
	'',
	'block = param.block;

// get last statement in block
select any prev_smt related by block->Statement[R450];
select one next_smt related by prev_smt->Statement[R477.''executes before''];
while ( not_empty next_smt )
  prev_smt = next_smt;
  select one next_smt related by prev_smt->Statement[R477.''executes before''];
end while;

// if the last statement is an append call with a literal string, just
// concatenate this string to that string
select one invoc related by prev_smt->ExpressionAsStatement[R451]->Expression[R476]->Invocation[R776];
select one invocable related by invoc->InvocableObject[R792];
select any string_lit related by invoc->ActualParameter[R793]->Expression[R794]->Literal[R776];
if (not_empty invocable and "T" == invocable.parent_name and "io.ciera.runtime.template.util" == invocable.parent_package and "append" == invocable.name and not_empty string_lit)
  string_lit.value = string_lit.value + param.str;
else
  // create a statement
  create object instance smt of Statement;
  relate smt to block across R450;
  if ( not_empty prev_smt )
    smt.statement_number = STRING::itoa( i:STRING::atoi( s:prev_smt.statement_number ) + 1 );
    relate smt to prev_smt across R477.''executes after'';
  else
    smt.statement_number = "1";
  end if;
  smt.oal = "";

  // transform argument expression
  create object instance expr_arg of Expression;
  relate expr_arg to smt across R775;
  expr_arg.expression_number = "1.2";
  string_type_ref = TypeReference::getBuiltinTypeReference( name:"String" );
  relate string_type_ref to expr_arg across R795;
  create object instance lit of Literal;
  relate lit to expr_arg across R776;
  lit.value = param.str;
  ::templateAppend( smt:smt, expr:expr_arg );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("9e057d3f-8023-4eb4-83d2-2da0036be3ad",
	"02194a38-3dfb-46b3-9e9d-5cfe80578e3c",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Code Block>',
	'',
	'',
	'../../../../tool-core/models/tool-core/architecture/invocable/invocable.xtuml');
INSERT INTO S_SPARM
	VALUES ("c52bc47f-aa7b-4509-a26b-2f3403356684",
	"02194a38-3dfb-46b3-9e9d-5cfe80578e3c",
	'str',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9e057d3f-8023-4eb4-83d2-2da0036be3ad",
	'');
INSERT INTO PE_PE
	VALUES ("02194a38-3dfb-46b3-9e9d-5cfe80578e3c",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a1a59583-ec76-4c2f-8b77-824d2cbcb2c7",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralStringSubstitutions',
	'',
	'select many affected_files from instances of File where false;
select many non_temp_string_literals from instances of NonTemplateStringLiteral;
for each non_temp_string_literal in non_temp_string_literals
  select one string_literal related by non_temp_string_literal->Y_StringLiteral[R3089];
  // get the target expression
  select any expr from instances of Expression where (selected.parent_name == non_temp_string_literal.parent_name and
                                                      selected.parent_package == non_temp_string_literal.parent_package and
                                                      selected.body_name == non_temp_string_literal.body_name and
                                                      selected.block_number == non_temp_string_literal.block_number and
                                                      selected.statement_number == non_temp_string_literal.statement_number and
                                                      selected.expression_number == non_temp_string_literal.expression_number);
  select one smt related by expr->Statement[R775];
  select one lit related by expr->Literal[R776];
  if (not_empty expr and not_empty lit and not_empty string_literal)
    // unhook the old literal from the old expression
    unrelate lit from expr across R776;
    delete object instance lit;
    // transform the literal
    ::transformRSLStringLiteral(string_literal:string_literal, smt:smt, expr_number:expr.expression_number, expr:expr);
    // add this file to the list of affected files
    file = ::getFileForStatement(smt:smt);
    affected_files = affected_files | file;
  else
    // TODO bad
  end if;
end for;

// re-render affected files
for each file in affected_files
  if (not file.exclude)
    file.render();
  end if;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("a1a59583-ec76-4c2f-8b77-824d2cbcb2c7",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6e48425a-da8c-48e7-8d22-3316b397a764",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLAddition',
	'',
	'addition = param.addition;
smt = param.smt;
expr_number = param.expr_number;

select one l_mult related by addition->Y_Multiplication[R3065];
select many addition_ops related by addition->Y_AdditionOperation[R3074];
if ( not_empty addition_ops )
  // transform last addition operation in the chain
  select any addition_op related by addition->Y_AdditionOperation[R3074];
  for each current_addition_op in addition_ops
    if ( current_addition_op.node_id > addition_op.node_id )
      addition_op = current_addition_op;
    end if;
  end for;
  ::transformRSLAdditionOperation( addition_op:addition_op, smt:smt, expr_number:expr_number );
else
  ::transformRSLMultiplication( mult:l_mult, smt:smt, expr_number:expr_number );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b400cce3-3b70-4444-9fba-1343411a3013",
	"6e48425a-da8c-48e7-8d22-3316b397a764",
	'addition',
	"0c5133ac-85bb-4796-919f-aff7266df618",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0c5133ac-85bb-4796-919f-aff7266df618",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Addition>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("f2e94800-740c-4027-ae7c-4a0d20526eb6",
	"6e48425a-da8c-48e7-8d22-3316b397a764",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"b400cce3-3b70-4444-9fba-1343411a3013",
	'');
INSERT INTO S_SPARM
	VALUES ("3345d4f6-c847-4d86-a5a2-cf7ef9354cdf",
	"6e48425a-da8c-48e7-8d22-3316b397a764",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f2e94800-740c-4027-ae7c-4a0d20526eb6",
	'');
INSERT INTO PE_PE
	VALUES ("6e48425a-da8c-48e7-8d22-3316b397a764",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9b17b0b0-5183-4f99-9854-029e98a8ffdc",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLAdditionOperation',
	'',
	'addition_op = param.addition_op;
smt = param.smt;
expr_number = param.expr_number;

// transform the left operand
select any l_addition_op from instances of Y_AdditionOperation where false;
select many addition_ops related by addition_op->Y_Addition[R3074]->Y_AdditionOperation[R3074] where ( selected.node_id != addition_op.node_id );
for each current_addition_op in addition_ops
  if ( ( empty l_addition_op or current_addition_op.node_id > l_addition_op.node_id ) and current_addition_op.node_id < addition_op.node_id )
    l_addition_op = current_addition_op;
  end if;
end for;
if ( not_empty l_addition_op )
  ::transformRSLAdditionOperation( addition_op:l_addition_op, smt:smt, expr_number:expr_number + ".1" );
else
  select one l_mult related by addition_op->Y_Addition[R3074]->Y_Multiplication[R3065];
  ::transformRSLMultiplication( mult:l_mult, smt:smt, expr_number:expr_number + ".1" );
end if;
select any l_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// transform the right operand
select one r_mult related by addition_op->Y_Multiplication[R3075];
::transformRSLMultiplication( mult:r_mult, smt:smt, expr_number:expr_number + ".2" );
select any r_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".2" );

// create binary operation
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;
create object instance binary of BinaryOperation;
relate binary to expr across R776;
relate l_op to binary across R779;
relate r_op to binary across R778;
select one l_type_ref related by l_op->TypeReference[R795];
select one l_type related by l_type_ref->Type[R3800];
select one r_type_ref related by r_op->TypeReference[R795];
select one r_type related by r_type_ref->Type[R3800];

// link type
if ( r_type.name == "double" and r_type.package == "" )
  relate r_type_ref to expr across R795; // promote to real
else
  relate r_type_ref to expr across R795;
end if;

// translate the operator
if ( "" != addition_op.PLUS )
  if ( l_type.primitive() )
    binary.operator = "+";
    binary.invocation = false;
  else
    if ( "String" == l_type.name and "" == l_type.package )
      // TODO handle concatenation for UDTs based on string
      binary.operator = "+";
      binary.invocation = false;
    else
      binary.operator = "add";
    end if;
    binary.invocation = true;
  end if;
elif ( "" != addition_op.MINUS )
  if ( l_type.primitive() )
    binary.operator = "-";
    binary.invocation = false;
  else
    binary.operator = "subtract";
    binary.invocation = true;
  end if;
end if;
 ',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("e38663f5-037e-4ac3-9cef-92a5c6f7d0e0",
	"9b17b0b0-5183-4f99-9854-029e98a8ffdc",
	'addition_op',
	"0c671f7b-646f-40cb-a658-39191423b9b9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0c671f7b-646f-40cb-a658-39191423b9b9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Addition Operation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("d62be204-453a-4cac-814a-34815be73f4e",
	"9b17b0b0-5183-4f99-9854-029e98a8ffdc",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"e38663f5-037e-4ac3-9cef-92a5c6f7d0e0",
	'');
INSERT INTO S_SPARM
	VALUES ("fecbd166-12a1-4bc8-a447-421b792ca024",
	"9b17b0b0-5183-4f99-9854-029e98a8ffdc",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d62be204-453a-4cac-814a-34815be73f4e",
	'');
INSERT INTO PE_PE
	VALUES ("9b17b0b0-5183-4f99-9854-029e98a8ffdc",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5faaab22-b43a-445a-8098-a347e76c52b2",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLAttributeAccess',
	'',
	'attr_access = param.attr_access;
smt = param.smt;
expr_number = param.expr_number;
expr = param.expr;

// transform base expression
select any null_expr from instances of Expression where false;
select one base_attr_access related by attr_access->Y_AttributeAccess[R3084.''contained by''];
if ( not_empty base_attr_access )
  ::transformRSLAttributeAccess( attr_access:base_attr_access, smt:smt, expr_number:expr_number + ".1", expr:null_expr );
else
  select one var_access related by attr_access->Y_NamedAccess[R3083]->Y_VariableAccess[R3082];
  ::transformRSLVariableAccess( var_access:var_access, smt:smt, expr_number:expr_number + ".1", expr:null_expr );
end if;
select any root_expr related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// get the attribute to reference
select any attr related by root_expr->TypeReference[R795]->Type[R3800]->Class[R407]->Attribute[R410] where ( selected.base_name == attr_access.ID );
if ( empty attr )
  // TODO bad
end if;

// create expression
if (empty expr)
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = expr_number;
  // link type
  select one type_ref related by attr->TypeReference[R424];
  relate type_ref to expr across R795;
end if;

// create attribute access
create object instance acc of AttributeAccess;
relate acc to expr across R776;
relate root_expr to acc across R785;
relate attr to acc across R788;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b4651786-cdd0-4a9d-9666-234585ca0771",
	"5faaab22-b43a-445a-8098-a347e76c52b2",
	'attr_access',
	"8c8c28e3-b501-4d0c-b4d2-3cefe8186d57",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8c8c28e3-b501-4d0c-b4d2-3cefe8186d57",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Access>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("1abc69e1-2606-4a02-aeb4-fe11cdebe67f",
	"5faaab22-b43a-445a-8098-a347e76c52b2",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"b4651786-cdd0-4a9d-9666-234585ca0771",
	'');
INSERT INTO S_SPARM
	VALUES ("6da4c215-976e-499d-87a6-21cb084b06af",
	"5faaab22-b43a-445a-8098-a347e76c52b2",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1abc69e1-2606-4a02-aeb4-fe11cdebe67f",
	'');
INSERT INTO S_SPARM
	VALUES ("5117612e-196d-4628-9a20-f3e17ce74be7",
	"5faaab22-b43a-445a-8098-a347e76c52b2",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"6da4c215-976e-499d-87a6-21cb084b06af",
	'');
INSERT INTO PE_PE
	VALUES ("5faaab22-b43a-445a-8098-a347e76c52b2",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d7cac44-60e5-431a-b2e7-1858c12ce161",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLBlob',
	'',
	'blob = param.blob;
block = param.block;
blob_string = blob.BLOB;

// if this blob is the last element in the buffer line, handle line break special cases
// create a suffix that will be appended after other escaping rules are applied
blob_suffix = "";
select any next_buffer_element related by blob->Y_BufferElement[R3057]->Y_Buffer[R3056]->Y_BufferElement[R3056] where ( selected.node_id > blob.node_id );
if ( empty next_buffer_element )
  if ( "\\\\\\" == STRING::substr( s:blob_string, begin:STRING::strlen( s:blob_string ) - 3, end:-1 ) )  // three slashes = literal slash, no newline
    blob_string = STRING::substr( s:blob_string, begin:0, end:STRING::strlen( s:blob_string ) - 3 );
    blob_suffix = "\\\\";
  elif ( "\\\\" == STRING::substr( s:blob_string, begin:STRING::strlen( s:blob_string ) - 2, end:-1 ) )  // two slashes = literal slash, with newline
    blob_string = STRING::substr( s:blob_string, begin:0, end:STRING::strlen( s:blob_string ) - 2 );
    blob_suffix = "\\\\\\" + "n";
  elif ( "\\" == STRING::substr( s:blob_string, begin:STRING::strlen( s:blob_string ) - 1, end:-1 ) )    // one slash = no literal slash, no newline
    blob_string = STRING::substr( s:blob_string, begin:0, end:STRING::strlen( s:blob_string ) - 1 );
    blob_suffix = "";
  else                                                                                             // no slashes = no literal slash, with newline
    blob_suffix = "\\" + "n";
  end if;
end if;

// if this blob is the first element in the buffer line, handle initial dot cases
select one blob_buffer_element related by blob->Y_BufferElement[R3057];
select any prev_buffer_element related by blob_buffer_element->Y_Buffer[R3056]->Y_BufferElement[R3056] where ( selected.node_id < blob_buffer_element.node_id );
if (empty prev_buffer_element)
  if (0 == STRING::indexof(haystack:STRING::trim(s:blob_string), needle:".."))
    double_dot_index = STRING::indexof(haystack:blob_string, needle:"..");
    blob_string = STRING::substr(s:blob_string, begin:0, end:double_dot_index) + STRING::substr(s:blob_string, begin:double_dot_index + 1, end:-1);
  end if;
end if;

// convert double dollar to single dollar
double_dollar_index = STRING::indexof( haystack:blob_string, needle:"$"+"$" ); // four dollars necessary due to RSL substitution
while ( -1 != double_dollar_index )
  blob_string = STRING::substr( s:blob_string, begin:0, end:double_dollar_index ) + STRING::substr( s:blob_string, begin:double_dollar_index+1, end:-1 );
  double_dollar_index = STRING::indexof( haystack:blob_string, needle:"$"+"$" ); // four dollars necessary due to RSL substitution
end while;

// escape slashes
search_string = blob_string;
blob_string = "";
slash_index = STRING::indexof( haystack:search_string, needle:"\\" );
while ( -1 != slash_index )
  prefix = STRING::substr( s:search_string, begin:0, end:slash_index );
  suffix = STRING::substr( s:search_string, begin:slash_index, end:-1 );
  blob_string = blob_string + prefix + "\\\\";
  search_string = STRING::substr( s:suffix, begin:1, end:-1 );
  slash_index = STRING::indexof( haystack:search_string, needle:"\\" );
end while;
blob_string = blob_string + search_string;

// escape quotes
search_string = blob_string;
blob_string = "";
quote_index = STRING::indexof( haystack:search_string, needle:STRING::quote() );
while ( -1 != quote_index )
  prefix = STRING::substr( s:search_string, begin:0, end:quote_index );
  suffix = STRING::substr( s:search_string, begin:quote_index, end:-1 );
  blob_string = blob_string + prefix + "\\" + STRING::quote();
  search_string = STRING::substr( s:suffix, begin:1, end:-1 );
  quote_index = STRING::indexof( haystack:search_string, needle:STRING::quote() );
end while;
blob_string = blob_string + search_string;

// add blob suffix last
blob_string = blob_string + blob_suffix;

// create statement and expression
::templateAppendString( block:block, str:blob_string );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("ff7ba474-9d7f-4731-b4fb-833f1471ca78",
	"7d7cac44-60e5-431a-b2e7-1858c12ce161",
	'blob',
	"7dd0812c-0a61-4c4d-aac1-60a4c38a1184",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7dd0812c-0a61-4c4d-aac1-60a4c38a1184",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Blob>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("304da895-84bc-4181-941a-b0679761926f",
	"7d7cac44-60e5-431a-b2e7-1858c12ce161",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"ff7ba474-9d7f-4731-b4fb-833f1471ca78",
	'');
INSERT INTO PE_PE
	VALUES ("7d7cac44-60e5-431a-b2e7-1858c12ce161",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e3cc2139-024b-4638-8f32-8314ebe01c4f",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLBlobForString',
	'',
	'blob = param.blob;
smt = param.smt;
expr_number = param.expr_number;
expr = param.expr;

// create expression
if (empty expr)
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = expr_number;
  string_type_ref = TypeReference::getBuiltinTypeReference( name:"String" );
  relate string_type_ref to expr across R795;
end if;
// create literal
create object instance lit of Literal;
relate lit to expr across R776;

blob_string = blob.BLOB;
// convert double quotes to single quote
double_quote_index = STRING::indexof( haystack:blob_string, needle:STRING::quote() + STRING::quote() );
while ( -1 != double_quote_index )
  blob_string = STRING::substr( s:blob_string, begin:0, end:double_quote_index ) + "\\" + STRING::substr( s:blob_string, begin:double_quote_index+1, end:-1 );
  double_quote_index = STRING::indexof( haystack:blob_string, needle:STRING::quote() + STRING::quote() );
end while;
// convert double dollar to single dollar
double_dollar_index = STRING::indexof( haystack:blob_string, needle:"$"+"$" ); // four dollars necessary due to RSL substitution
while ( -1 != double_dollar_index )
  blob_string = STRING::substr( s:blob_string, begin:0, end:double_dollar_index ) + STRING::substr( s:blob_string, begin:double_dollar_index+1, end:-1 );
  double_dollar_index = STRING::indexof( haystack:blob_string, needle:"$"+"$" ); // four dollars necessary due to RSL substitution
end while;
lit.value = blob_string;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("e3c79aa8-83cf-4f9b-bb53-2351c45070a5",
	"e3cc2139-024b-4638-8f32-8314ebe01c4f",
	'blob',
	"7dd0812c-0a61-4c4d-aac1-60a4c38a1184",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("24f35d22-0a9d-4b33-992a-7b8f0ef602d1",
	"e3cc2139-024b-4638-8f32-8314ebe01c4f",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"e3c79aa8-83cf-4f9b-bb53-2351c45070a5",
	'');
INSERT INTO S_SPARM
	VALUES ("db415cda-1c83-4ab0-a08d-449a7edfa755",
	"e3cc2139-024b-4638-8f32-8314ebe01c4f",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"24f35d22-0a9d-4b33-992a-7b8f0ef602d1",
	'');
INSERT INTO S_SPARM
	VALUES ("8286cc90-6317-4db8-84d4-85f44674c30f",
	"e3cc2139-024b-4638-8f32-8314ebe01c4f",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"db415cda-1c83-4ab0-a08d-449a7edfa755",
	'');
INSERT INTO PE_PE
	VALUES ("e3cc2139-024b-4638-8f32-8314ebe01c4f",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("79b6c05b-f013-466e-8b1e-981bda1f68c8",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLBody',
	'',
	'body = param.body;
invocable = param.invocable;

// create code block
create object instance block of CodeBlock;
block.top_level = true;
block.tab_depth = 4;
relate block to invocable across R4000;
block.block_number = "1";

// create a null statement to hold variable declarations for all locals in context
// the variables that are copied is the intersection set of all the contexts where
// this particular template is included
// create a statement
create object instance smt of Statement;
relate smt to block across R450;
smt.statement_number = "1";
smt.oal = "";
create object instance nullsmt of NullSmt;
relate nullsmt to smt across R451;
select many includes from instances of Invocation where ( "T" == selected.invoked_parent_name and "io.ciera.runtime.template.util" == selected.invoked_parent_package and "include" == selected.invoked_name );
select many act_params related by includes->ActualParameter[R793]->Expression[R794]->Literal[R776] where ( body.filename == selected.value );
select many includes related by act_params->Expression[R776]->ActualParameter[R794]->Invocation[R793];
select many incl_vars related by includes->Expression[R776]->Statement[R775]->CodeBlock[R450]->Variable[R458];
for each incl_var in incl_vars
  matching_count = 0;
  for each incl in includes
    select any matching_var related by incl->Expression[R776]->Statement[R775]->CodeBlock[R450]->Variable[R458]
      where ( selected.name == incl_var.name and selected.type_name == incl_var.type_name and selected.type_package == incl_var.type_package );
    if (not_empty matching_var)
      matching_count = matching_count + 1;
    end if;
  end for;
  // if there is a variable with this name and type in context _everywhere_ where this template is included, add it to the template context
  if ( cardinality includes == matching_count )
    select any existing_var related by smt->Variable[R457] where ( selected.name == incl_var.name ); // do not allow duplicate variables
    if ( empty existing_var )
      // create new variable
      create object instance new_var of Variable;
      relate new_var to smt across R457;
      new_var.name = incl_var.name;
      // link type
      select one var_type_ref related by incl_var->TypeReference[R461];
      relate var_type_ref to new_var across R461;
      // create variable in scope
      create object instance var_in_scope of VariableInScope;
      relate new_var to block across R458 using var_in_scope;
    end if;
  end if;
end for;

// link the class context if it exists
select many template_invocations from instances of Invocation where ( "T" == selected.invoked_parent_name and "io.ciera.runtime.template.util" == selected.invoked_parent_package and "include" == selected.invoked_name );
select any real_param related by template_invocations->ActualParameter[R793]->Expression[R794]->Literal[R776] where ( selected.value == invocable.name );
select one template_invocable related by real_param->Expression[R776]->ActualParameter[R794]->Invocation[R793]->Expression[R776]->Statement[R775]->CodeBlock[R450]->InvocableObject[R4000];
select one operation related by template_invocable->Operation[R427] where ( not selected.is_class_based );
select one deriv_attr related by template_invocable->AttributeDerivation[R427];
if ( not_empty operation or not_empty deriv_attr )
  select one self_class related by operation->Class[R416];
  if ( empty self_class )
    select one self_class related by deriv_attr->AttributeAccessor[R441]->Attribute[R4510]->Class[R410];
  end if;
  // create new variable
  create object instance self_var of Variable;
  relate self_var to smt across R457;
  self_var.name = "self";
  // link type
  select one self_type related by self_class->Type[R407];
  select many s_dims from instances of S_DIM where false;
  self_type_ref = TypeReference::getInstanceFromType( type:self_type, s_dims:s_dims );
  relate self_type_ref to self_var across R461;
  // create variable in scope
  create object instance var_in_scope of VariableInScope;
  relate self_var to block across R458 using var_in_scope;
end if;

// transform each line
current_id = -1;
done = false;
select many lines related by body->Y_Line[R3054];
while not done
  // select next line to process
  select any current_line from instances of Y_Line where false;
  for each line in lines
    if ( ( empty current_line or line.node_id < current_line.node_id ) and ( line.node_id > current_id ) )
      current_line = line;
    end if;
  end for;
  // process current line
  if ( not_empty current_line )
    block = ::transformRSLLine( line:current_line, block:block );
    current_id = current_line.node_id;
  else
    done = true;
  end if;
end while;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("c860459a-22c6-44fc-b1e1-c33f9b3f0d35",
	"79b6c05b-f013-466e-8b1e-981bda1f68c8",
	'body',
	"3c4c9d08-d42e-43c6-91cd-f6a05bcbd6bc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3c4c9d08-d42e-43c6-91cd-f6a05bcbd6bc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Body>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("c7ba4bb0-1eee-4a96-be2f-c328ff56b075",
	"79b6c05b-f013-466e-8b1e-981bda1f68c8",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"c860459a-22c6-44fc-b1e1-c33f9b3f0d35",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3ab44839-4426-4754-b12a-0a00ce4dae1a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../../../../tool-core/models/tool-core/architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("79b6c05b-f013-466e-8b1e-981bda1f68c8",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8ac9eba3-5791-46bc-8952-1423fe999f2d",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLComparison',
	'',
	'comp = param.comp;
smt = param.smt;
expr_number = param.expr_number;

select one l_addition related by comp->Y_Addition[R3064];
select many comp_ops related by comp->Y_ComparisonOperation[R3072];
if ( not_empty comp_ops )
  // transform last comparison operation in the chain
  select any comp_op related by comp->Y_ComparisonOperation[R3072];
  for each current_comp_op in comp_ops
    if ( current_comp_op.node_id > comp_op.node_id )
      comp_op = current_comp_op;
    end if;
  end for;
  ::transformRSLComparisonOperation( comp_op:comp_op, smt:smt, expr_number:expr_number );
else
  ::transformRSLAddition( addition:l_addition, smt:smt, expr_number:expr_number );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("007e8dfe-aae1-479b-a5dd-a46ab21c3bc5",
	"8ac9eba3-5791-46bc-8952-1423fe999f2d",
	'comp',
	"57eb4f19-e485-413e-b7da-f3f314d451ea",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("57eb4f19-e485-413e-b7da-f3f314d451ea",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Comparison>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("3a134e63-f4d4-4652-9a36-329413906c59",
	"8ac9eba3-5791-46bc-8952-1423fe999f2d",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"007e8dfe-aae1-479b-a5dd-a46ab21c3bc5",
	'');
INSERT INTO S_SPARM
	VALUES ("20fdc0d7-7f79-4d60-aaa6-be93374569f4",
	"8ac9eba3-5791-46bc-8952-1423fe999f2d",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3a134e63-f4d4-4652-9a36-329413906c59",
	'');
INSERT INTO PE_PE
	VALUES ("8ac9eba3-5791-46bc-8952-1423fe999f2d",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("717d9feb-e25d-440a-bbc9-17e1925f8142",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLComparisonOperation',
	'',
	'comp_op = param.comp_op;
smt = param.smt;
expr_number = param.expr_number;

select one file related by smt->CodeBlock[R450]->InvocableObject[R4000]->GenericInvocable[R427]->Z_Template[R3053]->Z_TemplateRegistry[R3052]->GeneralFile[R3051]->File[R401];

// transform the left operand
select any l_comp_op from instances of Y_ComparisonOperation where false;
select many comp_ops related by comp_op->Y_Comparison[R3072]->Y_ComparisonOperation[R3072] where ( selected.node_id != comp_op.node_id );
for each current_comp_op in comp_ops
  if ( ( empty l_comp_op or current_comp_op.node_id > l_comp_op.node_id ) and current_comp_op.node_id < comp_op.node_id )
    l_comp_op = current_comp_op;
  end if;
end for;
if ( not_empty l_comp_op )
  ::transformRSLComparisonOperation( comp_op:l_comp_op, smt:smt, expr_number:expr_number + ".1" );
else
  select one l_addition related by comp_op->Y_Comparison[R3072]->Y_Addition[R3064];
  ::transformRSLAddition( addition:l_addition, smt:smt, expr_number:expr_number + ".1" );
end if;
select any l_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// transform the right operand
select one r_addition related by comp_op->Y_Addition[R3073];
::transformRSLAddition( addition:r_addition, smt:smt, expr_number:expr_number + ".2" );
select any r_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".2" );

// create binary operation
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;
create object instance binary of BinaryOperation;
relate binary to expr across R776;
relate l_op to binary across R779;
relate r_op to binary across R778;
select one l_type related by l_op->TypeReference[R795]->Type[R3800];

// link type
boolean_type_ref = TypeReference::getBuiltinTypeReference( name:"boolean" );
relate boolean_type_ref to expr across R795;

// translate the operator
binary.invocation = false;
if ( "" != comp_op.EQ )
  if ( l_type.primitive() )
    binary.operator = "==";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.equality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "equality";
      binary.invocation = true;
    end if;
  end if;
elif ( "" != comp_op.NE )
  if ( l_type.primitive() )
    binary.operator = "!=";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.inequality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "inequality";
      binary.invocation = true;
    end if;
  end if;
elif ( "" != comp_op.LT )
  if ( l_type.primitive() )
    binary.operator = "<";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.lessThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "lessThan";
      binary.invocation = true;
    end if;
  end if;
elif ( "" != comp_op.LTE )
  if ( l_type.primitive() )
    binary.operator = "<=";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.lessThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "lessThanOrEqual";
      binary.invocation = true;
    end if;
  end if;
elif ( "" != comp_op.GT )
  if ( l_type.primitive() )
    binary.operator = ">";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.greaterThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "greaterThan";
      binary.invocation = true;
    end if;
  end if;
elif ( "" != comp_op.GTE )
  if ( l_type.primitive() )
    binary.operator = ">=";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.greaterThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "greaterThanOrEqual";
      binary.invocation = true;
    end if;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("a305ece4-9995-4241-ac43-57615e163b79",
	"717d9feb-e25d-440a-bbc9-17e1925f8142",
	'comp_op',
	"90a94136-5348-4dfe-8ec1-5537ad10c110",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("90a94136-5348-4dfe-8ec1-5537ad10c110",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Comparison Operation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("3548f770-6379-4df5-acee-b13ff1e5c1e1",
	"717d9feb-e25d-440a-bbc9-17e1925f8142",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"a305ece4-9995-4241-ac43-57615e163b79",
	'');
INSERT INTO S_SPARM
	VALUES ("3b1d3608-c6d3-4ea3-ba55-3a87869f2782",
	"717d9feb-e25d-440a-bbc9-17e1925f8142",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3548f770-6379-4df5-acee-b13ff1e5c1e1",
	'');
INSERT INTO PE_PE
	VALUES ("717d9feb-e25d-440a-bbc9-17e1925f8142",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("82dd7b30-4b11-4664-8d2d-b13dbe6c0a0d",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLConjunction',
	'',
	'conj = param.conj;
smt = param.smt;
expr_number = param.expr_number;

select one l_comp related by conj->Y_Comparison[R3063];
select many conj_ops related by conj->Y_ConjunctionOperation[R3070];
if ( not_empty conj_ops )
  // transform last conjunction operation in the chain
  select any conj_op related by conj->Y_ConjunctionOperation[R3070];
  for each current_conj_op in conj_ops
    if ( current_conj_op.node_id > conj_op.node_id )
      conj_op = current_conj_op;
    end if;
  end for;
  ::transformRSLConjunctionOperation( conj_op:conj_op, smt:smt, expr_number:expr_number );
else
  ::transformRSLComparison( comp:l_comp, smt:smt, expr_number:expr_number );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("553e0f59-b139-4c94-ac11-030c7d48d9b1",
	"82dd7b30-4b11-4664-8d2d-b13dbe6c0a0d",
	'conj',
	"caecf8d1-0070-4d8d-8b18-8f49f7d89a04",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("caecf8d1-0070-4d8d-8b18-8f49f7d89a04",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Conjunction>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("cb1a6c45-6623-4043-92c7-447bb8d515d9",
	"82dd7b30-4b11-4664-8d2d-b13dbe6c0a0d",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"553e0f59-b139-4c94-ac11-030c7d48d9b1",
	'');
INSERT INTO S_SPARM
	VALUES ("71f8c65d-1b7b-4b46-a038-55b01ca4382f",
	"82dd7b30-4b11-4664-8d2d-b13dbe6c0a0d",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cb1a6c45-6623-4043-92c7-447bb8d515d9",
	'');
INSERT INTO PE_PE
	VALUES ("82dd7b30-4b11-4664-8d2d-b13dbe6c0a0d",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f7692021-b6ca-4acd-8ce4-0426b3df7364",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLConjunctionOperation',
	'',
	'conj_op = param.conj_op;
smt = param.smt;
expr_number = param.expr_number;

// transform the left operand
select any l_conj_op from instances of Y_ConjunctionOperation where false;
select many conj_ops related by conj_op->Y_Conjunction[R3070]->Y_ConjunctionOperation[R3070] where ( selected.node_id != conj_op.node_id );
for each current_conj_op in conj_ops
  if ( ( empty l_conj_op or current_conj_op.node_id > l_conj_op.node_id ) and current_conj_op.node_id < conj_op.node_id )
    l_conj_op = current_conj_op;
  end if;
end for;
if ( not_empty l_conj_op )
  ::transformRSLConjunctionOperation( conj_op:l_conj_op, smt:smt, expr_number:expr_number + ".1" );
else
  select one l_comp related by conj_op->Y_Conjunction[R3070]->Y_Comparison[R3063];
  ::transformRSLComparison( comp:l_comp, smt:smt, expr_number:expr_number + ".1" );
end if;
select any l_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// transform the right operand
select one r_comp related by conj_op->Y_Comparison[R3071];
::transformRSLComparison( comp:r_comp, smt:smt, expr_number:expr_number + ".2" );
select any r_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".2" );

// create binary operation
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;
create object instance binary of BinaryOperation;
relate binary to expr across R776;
relate l_op to binary across R779;
relate r_op to binary across R778;
select one l_type related by l_op->TypeReference[R795]->Type[R3800];

// link type
boolean_type_ref = TypeReference::getBuiltinTypeReference( name:"boolean" );
relate boolean_type_ref to expr across R795;

// translate the operator
if ( l_type.primitive() )
  binary.operator = "&&";
  binary.invocation = false;
else
  binary.operator = "and";
  binary.invocation = true;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("ca1b3441-580a-4c05-b42d-ef3a95050a23",
	"f7692021-b6ca-4acd-8ce4-0426b3df7364",
	'conj_op',
	"83b38635-9769-4ea4-b3b8-d182a0944593",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("83b38635-9769-4ea4-b3b8-d182a0944593",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Conjunction Operation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("be50eef3-eadd-4572-8bc3-b6e7d6a005a8",
	"f7692021-b6ca-4acd-8ce4-0426b3df7364",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"ca1b3441-580a-4c05-b42d-ef3a95050a23",
	'');
INSERT INTO S_SPARM
	VALUES ("3dea138e-a69a-46a5-8cdd-5209ea75e6e4",
	"f7692021-b6ca-4acd-8ce4-0426b3df7364",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"be50eef3-eadd-4572-8bc3-b6e7d6a005a8",
	'');
INSERT INTO PE_PE
	VALUES ("f7692021-b6ca-4acd-8ce4-0426b3df7364",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4f5ea17c-1afb-469a-b0ad-d1dbd9f45343",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLDisjunction',
	'',
	'disj = param.disj;
smt = param.smt;
expr_number = param.expr_number;

select one l_conj related by disj->Y_Conjunction[R3062];
select many disj_ops related by disj->Y_DisjunctionOperation[R3068];
if ( not_empty disj_ops )
  // transform last disjunction operation in the chain
  select any disj_op related by disj->Y_DisjunctionOperation[R3068];
  for each current_disj_op in disj_ops
    if ( current_disj_op.node_id > disj_op.node_id )
      disj_op = current_disj_op;
    end if;
  end for;
  ::transformRSLDisjunctionOperation( disj_op:disj_op, smt:smt, expr_number:expr_number );
else
  ::transformRSLConjunction( conj:l_conj, smt:smt, expr_number:expr_number );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("190dac73-67b4-4c81-be7d-6db7e7088724",
	"4f5ea17c-1afb-469a-b0ad-d1dbd9f45343",
	'disj',
	"21705e45-5074-43ac-90db-9cd4662d1ff2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("21705e45-5074-43ac-90db-9cd4662d1ff2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Disjunction>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("2d55919f-1bc4-4965-974f-04653a103008",
	"4f5ea17c-1afb-469a-b0ad-d1dbd9f45343",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"190dac73-67b4-4c81-be7d-6db7e7088724",
	'');
INSERT INTO S_SPARM
	VALUES ("9a9deca8-b1f0-4b40-b643-1d5bf40adcf9",
	"4f5ea17c-1afb-469a-b0ad-d1dbd9f45343",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2d55919f-1bc4-4965-974f-04653a103008",
	'');
INSERT INTO PE_PE
	VALUES ("4f5ea17c-1afb-469a-b0ad-d1dbd9f45343",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f6f2d11f-c81b-48aa-8b6a-964be4e1094a",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLDisjunctionOperation',
	'',
	'disj_op = param.disj_op;
smt = param.smt;
expr_number = param.expr_number;

// transform the left operand
select any l_disj_op from instances of Y_DisjunctionOperation where false;
select many disj_ops related by disj_op->Y_Disjunction[R3068]->Y_DisjunctionOperation[R3068] where ( selected.node_id != disj_op.node_id );
for each current_disj_op in disj_ops
  if ( ( empty l_disj_op or current_disj_op.node_id > l_disj_op.node_id ) and current_disj_op.node_id < disj_op.node_id )
    l_disj_op = current_disj_op;
  end if;
end for;
if ( not_empty l_disj_op )
  ::transformRSLDisjunctionOperation( disj_op:l_disj_op, smt:smt, expr_number:expr_number + ".1" );
else
  select one l_conj related by disj_op->Y_Disjunction[R3068]->Y_Conjunction[R3062];
  ::transformRSLConjunction( conj:l_conj, smt:smt, expr_number:expr_number + ".1" );
end if;
select any l_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// transform the right operand
select one r_conj related by disj_op->Y_Conjunction[R3069];
::transformRSLConjunction( conj:r_conj, smt:smt, expr_number:expr_number + ".2" );
select any r_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".2" );

// create binary operation
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;
create object instance binary of BinaryOperation;
relate binary to expr across R776;
relate l_op to binary across R779;
relate r_op to binary across R778;
select one l_type related by l_op->TypeReference[R795]->Type[R3800];

// link type
boolean_type_ref = TypeReference::getBuiltinTypeReference( name:"boolean" );
relate boolean_type_ref to expr across R795;

// translate the operator
if ( l_type.primitive() )
  binary.operator = "||";
  binary.invocation = false;
else
  binary.operator = "or";
  binary.invocation = true;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("33cd4f95-6262-4425-b2c6-d402d5416e3d",
	"f6f2d11f-c81b-48aa-8b6a-964be4e1094a",
	'disj_op',
	"71b23d2e-37ca-4da5-9939-a2ecc29e996e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("71b23d2e-37ca-4da5-9939-a2ecc29e996e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Disjunction Operation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("9d3cb863-c90a-498a-a33c-c7f47b941a4b",
	"f6f2d11f-c81b-48aa-8b6a-964be4e1094a",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"33cd4f95-6262-4425-b2c6-d402d5416e3d",
	'');
INSERT INTO S_SPARM
	VALUES ("caea986a-3a92-42f7-b899-8358d6a604dd",
	"f6f2d11f-c81b-48aa-8b6a-964be4e1094a",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9d3cb863-c90a-498a-a33c-c7f47b941a4b",
	'');
INSERT INTO PE_PE
	VALUES ("f6f2d11f-c81b-48aa-8b6a-964be4e1094a",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6d1a7f6-ff07-421d-b36b-ce43a0fdbe0e",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLElseStatement',
	'',
	'block = param.block;
is_else_if = param.is_else_if;

select one if_smt related by block->IfSmt[R453]; // else always comes from the context of a ''then'' block
if ( empty if_smt )
  // TODO bad
end if;
select one block related by if_smt->Statement[R451]->CodeBlock[R450];
// create else block
create object instance else_block of CodeBlock;
select one invocable related by block->InvocableObject[R4000];
else_block.top_level = false;
if ( is_else_if )
  else_block.tab_depth = block.tab_depth;
else
  else_block.tab_depth = block.tab_depth + 1;
end if;
relate else_block to invocable across R4000;
else_block.block_number = ::getNextBlockNumber( upper_block:block );
// copy visibile variables from upper block
select many vars related by block->Variable[R458];
for each var in vars
  create object instance var_in_scope of VariableInScope;
  relate var to else_block across R458 using var_in_scope;
end for;
relate else_block to if_smt across R454;
 
return else_block;',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("953d0e88-dc3b-4766-aaa4-22dd417af7be",
	"b6d1a7f6-ff07-421d-b36b-ce43a0fdbe0e",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("617c3828-10f5-4424-a3ec-011edb86d9c5",
	"b6d1a7f6-ff07-421d-b36b-ce43a0fdbe0e",
	'is_else_if',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"953d0e88-dc3b-4766-aaa4-22dd417af7be",
	'');
INSERT INTO PE_PE
	VALUES ("b6d1a7f6-ff07-421d-b36b-ce43a0fdbe0e",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a587af1e-5e12-4b3c-8363-e3a432099f6d",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLExpression',
	'',
	'expr = param.expr;
smt = param.smt;
expr_number = param.expr_number;

select one disj related by expr->Y_Disjunction[R3061];
::transformRSLDisjunction( disj:disj, smt:smt, expr_number:expr_number );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("9d24ac43-a224-463c-9df0-34062800450b",
	"a587af1e-5e12-4b3c-8363-e3a432099f6d",
	'expr',
	"5e4da366-fb8b-4167-83b7-11193a33635f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5e4da366-fb8b-4167-83b7-11193a33635f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Expression>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("05426993-e369-4b64-aa0b-c639d22b0e15",
	"a587af1e-5e12-4b3c-8363-e3a432099f6d",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"9d24ac43-a224-463c-9df0-34062800450b",
	'');
INSERT INTO S_SPARM
	VALUES ("69d190bc-1ce1-488b-a52d-8531b0fd77ff",
	"a587af1e-5e12-4b3c-8363-e3a432099f6d",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"05426993-e369-4b64-aa0b-c639d22b0e15",
	'');
INSERT INTO PE_PE
	VALUES ("a587af1e-5e12-4b3c-8363-e3a432099f6d",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("739307bb-076e-4738-8a29-b62849956298",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLIfStatement',
	'',
	'block = param.block;
expr = param.expr;
is_else_if = param.is_else_if;

// get last statement in block
select any prev_smt related by block->Statement[R450];
select one next_smt related by prev_smt->Statement[R477.''executes before''];
while ( not_empty next_smt )
  prev_smt = next_smt;
  select one next_smt related by prev_smt->Statement[R477.''executes before''];
end while;
// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if ( not_empty prev_smt )
  smt.statement_number = STRING::itoa( i:STRING::atoi( s:prev_smt.statement_number ) + 1 );
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.oal = "";
// create if statement
create object instance if_smt of IfSmt;
relate if_smt to smt across R451;
if_smt.is_else_if = is_else_if;
// translate if expression
::transformRSLExpression( expr:expr, smt:smt, expr_number:"1" );
select any if_expr related by smt->Expression[R775] where ( selected.expression_number == "1" );
relate if_expr to if_smt across R471;
// create then block
create object instance then_block of CodeBlock;
select one invocable related by block->InvocableObject[R4000];
then_block.top_level = false;
then_block.tab_depth = block.tab_depth + 1;
relate then_block to invocable across R4000;
then_block.block_number = ::getNextBlockNumber( upper_block:block );
// copy visibile variables from upper block
select many vars related by block->Variable[R458];
for each var in vars
  create object instance var_in_scope of VariableInScope;
  relate var to then_block across R458 using var_in_scope;
end for;
relate then_block to if_smt across R453;
  
return then_block;',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("9cb510c1-6300-4e7b-8b9f-8e04ae70b975",
	"739307bb-076e-4738-8a29-b62849956298",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("52e31b51-0951-4cc0-b22a-e44a08aa019b",
	"739307bb-076e-4738-8a29-b62849956298",
	'expr',
	"5e4da366-fb8b-4167-83b7-11193a33635f",
	0,
	'',
	"9cb510c1-6300-4e7b-8b9f-8e04ae70b975",
	'');
INSERT INTO S_SPARM
	VALUES ("747c23a5-9c2e-4120-9cb3-23b9898be235",
	"739307bb-076e-4738-8a29-b62849956298",
	'is_else_if',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"52e31b51-0951-4cc0-b22a-e44a08aa019b",
	'');
INSERT INTO PE_PE
	VALUES ("739307bb-076e-4738-8a29-b62849956298",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04b26b66-add3-426a-a263-a357ef203b52",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLLine',
	'',
	'line = param.line;
block = param.block;

select one buffer related by line->Y_Buffer[R3055];
if ( not_empty buffer )
  // transform each buffer element
  current_id = -1;
  done = false;
  select many buffer_elements related by buffer->Y_BufferElement[R3056];
  while not done
    // select next buffer element to process
    select any current_buffer_element from instances of Y_BufferElement where false;
    for each buffer_element in buffer_elements
      if ( ( empty current_buffer_element or buffer_element.node_id < current_buffer_element.node_id ) and ( buffer_element.node_id > current_id ) )
        current_buffer_element = buffer_element;
      end if;
    end for;
    // process current buffer element
    if ( not_empty current_buffer_element )
      select one blob related by current_buffer_element->Y_Blob[R3057];
      if ( not_empty blob )
        ::transformRSLBlob( blob:blob, block:block );
      else
      select one sub_var related by current_buffer_element->Y_SubstitutionVar[R3057];
      if ( not_empty sub_var )
        ::transformRSLSubstitutionVar( sub_var:sub_var, block:block );
      end if; end if;
      current_id = current_buffer_element.node_id;
    else
      done = true;
    end if;
  end while;

  // append newline to the end of empty buffer lines
  if (empty buffer_elements)
    ::templateAppendString( block:block, str:"\\" + "n" );
  end if;
  
else
select one if_smt related by line->Y_IfStatement[R3055];
if ( not_empty if_smt )
  select one if_expr related by if_smt->Y_Expression[R3059];
  block = ::transformRSLIfStatement( block:block, expr:if_expr, is_else_if:false );
else
select one elif_smt related by line->Y_ElifStatement[R3055];
if ( not_empty elif_smt )
  select one elif_expr related by elif_smt->Y_Expression[R3060];
  block = ::transformRSLElseStatement( block:block, is_else_if:true );
  block = ::transformRSLIfStatement( block:block, expr:elif_expr, is_else_if:true );
else
select one else_smt related by line->Y_ElseStatement[R3055];
if ( not_empty else_smt )
  block = ::transformRSLElseStatement( block:block, is_else_if:false );
  
else
select one endif_smt related by line->Y_EndIfStatement[R3055];
if ( not_empty endif_smt )
  // pop up to the parent block
  select one ifsmt related by block->IfSmt[R453];
  if ( empty ifsmt )
    select one ifsmt related by block->IfSmt[R454];
  end if;
  while ( ifsmt.is_else_if )
    select one ifsmt related by ifsmt->Statement[R451]->CodeBlock[R450]->IfSmt[R454]; // elif must be within an ''else'' block
    if ( empty ifsmt )
      // TODO bad
    end if;
  end while;
  select one block related by ifsmt->Statement[R451]->CodeBlock[R450];

end if; end if; end if; end if; end if;

return block;',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("3af96485-98cc-4be5-bd78-855afe53a10c",
	"04b26b66-add3-426a-a263-a357ef203b52",
	'line',
	"f1c55099-c718-4a88-b05f-f1b07446d2fe",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f1c55099-c718-4a88-b05f-f1b07446d2fe",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Line>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("b75d3754-cbb0-4891-bc16-4d8eb2deb937",
	"04b26b66-add3-426a-a263-a357ef203b52",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"3af96485-98cc-4be5-bd78-855afe53a10c",
	'');
INSERT INTO PE_PE
	VALUES ("04b26b66-add3-426a-a263-a357ef203b52",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("89fcf4a8-5051-4473-a062-81f0c3a2b18e",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLMultiplication',
	'',
	'mult = param.mult;
smt = param.smt;
expr_number = param.expr_number;

select one l_neg related by mult->Y_Negation[R3066];
select many mult_ops related by mult->Y_MultiplicationOperation[R3076];
if ( not_empty mult_ops )
  // transform last mult operation in the chain
  select any mult_op related by mult->Y_MultiplicationOperation[R3076];
  for each current_mult_op in mult_ops
    if ( current_mult_op.node_id > mult_op.node_id )
      mult_op = current_mult_op;
    end if;
  end for;
  ::transformRSLMultiplicationOperation( mult_op:mult_op, smt:smt, expr_number:expr_number );
else
  ::transformRSLNegation( neg:l_neg, smt:smt, expr_number:expr_number );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("c08ce0df-7e6e-4f54-abbc-004086cffb38",
	"89fcf4a8-5051-4473-a062-81f0c3a2b18e",
	'mult',
	"c5ef81a3-0956-49e3-b6bf-ae585ef77082",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c5ef81a3-0956-49e3-b6bf-ae585ef77082",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Multiplication>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("7efe80c6-6529-46ed-bc5e-c31285d49e62",
	"89fcf4a8-5051-4473-a062-81f0c3a2b18e",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"c08ce0df-7e6e-4f54-abbc-004086cffb38",
	'');
INSERT INTO S_SPARM
	VALUES ("384e6744-3e76-4a7f-98db-732abe6ecd46",
	"89fcf4a8-5051-4473-a062-81f0c3a2b18e",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7efe80c6-6529-46ed-bc5e-c31285d49e62",
	'');
INSERT INTO PE_PE
	VALUES ("89fcf4a8-5051-4473-a062-81f0c3a2b18e",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("23e6f290-4279-42a7-b708-360dcf74fe61",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLMultiplicationOperation',
	'',
	'mult_op = param.mult_op;
smt = param.smt;
expr_number = param.expr_number;

// transform the left operand
select any l_mult_op from instances of Y_MultiplicationOperation where false;
select many mult_ops related by mult_op->Y_Multiplication[R3076]->Y_MultiplicationOperation[R3076] where ( selected.node_id != mult_op.node_id );
for each current_mult_op in mult_ops
  if ( ( empty l_mult_op or current_mult_op.node_id > l_mult_op.node_id ) and current_mult_op.node_id < mult_op.node_id )
    l_mult_op = current_mult_op;
  end if;
end for;
if ( not_empty l_mult_op )
  ::transformRSLMultiplicationOperation( mult_op:l_mult_op, smt:smt, expr_number:expr_number + ".1" );
else
  select one l_neg related by mult_op->Y_Multiplication[R3076]->Y_Negation[R3066];
  ::transformRSLNegation( neg:l_neg, smt:smt, expr_number:expr_number + ".1" );
end if;
select any l_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// transform the right operand
select one r_neg related by mult_op->Y_Negation[R3077];
::transformRSLNegation( neg:r_neg, smt:smt, expr_number:expr_number + ".2" );
select any r_op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".2" );

// create binary operation
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;
create object instance binary of BinaryOperation;
relate binary to expr across R776;
relate l_op to binary across R779;
relate r_op to binary across R778;
select one l_type_ref related by l_op->TypeReference[R795];
select one l_type related by l_type_ref->Type[R3800];
select one r_type_ref related by r_op->TypeReference[R795];
select one r_type related by r_type_ref->Type[R3800];

// link type
if ( r_type.name == "double" and r_type.package == "" )
  relate r_type_ref to expr across R795; // promote to real
else
  relate r_type_ref to expr across R795;
end if;

// translate the operator
if ( "" != mult_op.TIMES )
  if ( l_type.primitive() )
    binary.operator = "*";
    binary.invocation = false;
  else
    binary.operator = "multiply";
    binary.invocation = true;
  end if;
elif ( "" != mult_op.DIVIDE )
  if ( l_type.primitive() )
    binary.operator = "/";
    binary.invocation = false;
  else
    binary.operator = "divide";
    binary.invocation = true;
  end if;
elif ( "" != mult_op.REM )
  if ( l_type.primitive() )
    binary.operator = "%";
    binary.invocation = false;
  else
    binary.operator = "remainder";
    binary.invocation = true;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("da0884d9-2f65-403d-ae32-19db44ce2aff",
	"23e6f290-4279-42a7-b708-360dcf74fe61",
	'mult_op',
	"f89328c4-50b8-4520-b298-78f5010b86e3",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f89328c4-50b8-4520-b298-78f5010b86e3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Multiplication Operation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("210f7d16-6dfa-4c76-b3cc-96afdb036d28",
	"23e6f290-4279-42a7-b708-360dcf74fe61",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"da0884d9-2f65-403d-ae32-19db44ce2aff",
	'');
INSERT INTO S_SPARM
	VALUES ("9c23f239-7c60-43c9-a53d-7c037b321223",
	"23e6f290-4279-42a7-b708-360dcf74fe61",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"210f7d16-6dfa-4c76-b3cc-96afdb036d28",
	'');
INSERT INTO PE_PE
	VALUES ("23e6f290-4279-42a7-b708-360dcf74fe61",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8404e82d-556e-426a-8fff-8dc8a07d000a",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLNamedAccess',
	'',
	'named_access = param.named_access;
smt = param.smt;
expr_number = param.expr_number;
expr = param.expr;

select one var_access related by named_access->Y_VariableAccess[R3082];
select one attr_access related by named_access->Y_AttributeAccess[R3083];
if ( not_empty attr_access )
  // create an attribute access expression for the last attribute access in the access chain
  select one next_attr_access related by attr_access->Y_AttributeAccess[R3084.''contains''];
  while ( not_empty next_attr_access )
    attr_access = next_attr_access;
    select one next_attr_access related by attr_access->Y_AttributeAccess[R3084.''contains''];
  end while;
  ::transformRSLAttributeAccess( attr_access:attr_access, smt:smt, expr_number:expr_number, expr:expr );
else
  // create a simple variable access
  ::transformRSLVariableAccess( var_access:var_access, smt:smt, expr_number:expr_number, expr:expr );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("4a161a48-bb7b-4359-bdfe-de9061fb1467",
	"8404e82d-556e-426a-8fff-8dc8a07d000a",
	'named_access',
	"a48e10f1-4c6c-4566-8002-ff1524df71dd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a48e10f1-4c6c-4566-8002-ff1524df71dd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Named Access>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("8c8e1062-101b-4a1b-816f-aea697f2f9d9",
	"8404e82d-556e-426a-8fff-8dc8a07d000a",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"4a161a48-bb7b-4359-bdfe-de9061fb1467",
	'');
INSERT INTO S_SPARM
	VALUES ("492fcf8d-4220-4772-8af5-e1b2c2c2697b",
	"8404e82d-556e-426a-8fff-8dc8a07d000a",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8c8e1062-101b-4a1b-816f-aea697f2f9d9",
	'');
INSERT INTO S_SPARM
	VALUES ("28c021ac-4cfa-43cd-b8b6-1e187a156585",
	"8404e82d-556e-426a-8fff-8dc8a07d000a",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"492fcf8d-4220-4772-8af5-e1b2c2c2697b",
	'');
INSERT INTO PE_PE
	VALUES ("8404e82d-556e-426a-8fff-8dc8a07d000a",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a8698661-98eb-4a14-bca5-6971a8212021",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLNegation',
	'',
	'neg = param.neg;
smt = param.smt;
expr_number = param.expr_number;

select one term related by neg->Y_Term[R3067];
select one neg_op related by neg->Y_NegationOperation[R3078];
if ( not_empty neg_op )
  // transform negation operation if it exists
  ::transformRSLNegationOperation( neg_op:neg_op, smt:smt, expr_number:expr_number );
else
  ::transformRSLTerm( term:term, smt:smt, expr_number:expr_number );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("5ef95536-708b-455b-a174-7dced5af01fa",
	"a8698661-98eb-4a14-bca5-6971a8212021",
	'neg',
	"f9a8f3ca-e956-41d3-830b-a730cf62f88b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f9a8f3ca-e956-41d3-830b-a730cf62f88b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Negation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("9027849b-6ff8-4227-a93a-6b031cdc9b80",
	"a8698661-98eb-4a14-bca5-6971a8212021",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"5ef95536-708b-455b-a174-7dced5af01fa",
	'');
INSERT INTO S_SPARM
	VALUES ("885e4bac-db65-47bf-8333-e7efc7cc2652",
	"a8698661-98eb-4a14-bca5-6971a8212021",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9027849b-6ff8-4227-a93a-6b031cdc9b80",
	'');
INSERT INTO PE_PE
	VALUES ("a8698661-98eb-4a14-bca5-6971a8212021",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("974fa083-7540-4460-bb96-57f4641d74a6",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLNegationOperation',
	'',
	'neg_op = param.neg_op;
smt = param.smt;
expr_number = param.expr_number;

// transform the operand
select one term related by neg_op->Y_Negation[R3078]->Y_Term[R3067];
::transformRSLTerm( term:term, smt:smt, expr_number:expr_number + ".1" );
select any op related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );

// create unary operation
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;
create object instance unary of UnaryOperation;
relate unary to expr across R776;
relate op to unary across R777;
select one type_ref related by op->TypeReference[R795];

// link type
relate type_ref to expr across R795;

// translate the operator
if ( "" != neg_op.NOT )
  unary.operator = "!";
  unary.invocation = false;
elif ( "" != neg_op.MINUS )
  unary.operator = "-";
  unary.invocation = false;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("4ee585eb-3f80-4b13-a1ec-593bdde781fe",
	"974fa083-7540-4460-bb96-57f4641d74a6",
	'neg_op',
	"b5a866dd-64ee-4119-b315-1ee4801f4669",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b5a866dd-64ee-4119-b315-1ee4801f4669",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Negation Operation>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("17dea44f-5ef9-4c6a-a445-e562d3a35d21",
	"974fa083-7540-4460-bb96-57f4641d74a6",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"4ee585eb-3f80-4b13-a1ec-593bdde781fe",
	'');
INSERT INTO S_SPARM
	VALUES ("2efdf9a3-7018-44e6-b065-74b216e20f8e",
	"974fa083-7540-4460-bb96-57f4641d74a6",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"17dea44f-5ef9-4c6a-a445-e562d3a35d21",
	'');
INSERT INTO PE_PE
	VALUES ("974fa083-7540-4460-bb96-57f4641d74a6",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("df7434f4-03ba-4657-975b-ead89f0a6cc4",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLStringLiteral',
	'',
	'string_literal = param.string_literal;
smt = param.smt;
expr_number = param.expr_number;
expr = param.expr;
create_expr = empty expr;

// transform each buffer element
select any prev_expr from instances of BinaryOperation where false;
num_processed = 0;
current_id = -1;
done = false;
select many buffer_elements related by string_literal->Y_BufferElement[R3088];
while not done
  // if there are at least 2 more to process, create a binary expression
  if ((cardinality buffer_elements) - num_processed >= 2)
    // create expression
    if (create_expr)
      create object instance expr of Expression;
      relate expr to smt across R775;
      expr.expression_number = expr_number;
      string_type_ref = TypeReference::getBuiltinTypeReference( name:"String" );
      relate string_type_ref to expr across R795;
    else
      create_expr = true;
    end if;
    // create concatenation
    create object instance binary of BinaryOperation;
    relate binary to expr across R776;
    binary.operator = "+";
    binary.invocation = false;
    // link this expression to the previous expression
    if (not_empty prev_expr)
      relate expr to prev_expr across R778; 
    end if;
    prev_expr = binary;
    expr_number = expr_number + ".1";
  end if;
  // select next buffer element to process
  select any current_buffer_element from instances of Y_BufferElement where false;
  for each buffer_element in buffer_elements
    if ( ( empty current_buffer_element or buffer_element.node_id < current_buffer_element.node_id ) and ( buffer_element.node_id > current_id ) )
      current_buffer_element = buffer_element;
    end if;
  end for;
  // process current buffer element
  if ( not_empty current_buffer_element )
    select one blob related by current_buffer_element->Y_Blob[R3057];
    if ( not_empty blob )
      if (create_expr)
        select any null_expr from instances of Expression where false;
        ::transformRSLBlobForString(blob:blob, smt:smt, expr_number:expr_number, expr:null_expr);
      else
        ::transformRSLBlobForString(blob:blob, smt:smt, expr_number:expr_number, expr:expr);
        create_expr = true;
      end if;
    else
    select one sub_var related by current_buffer_element->Y_SubstitutionVar[R3057];
    if ( not_empty sub_var )
      if (create_expr)
        select any null_expr from instances of Expression where false;
        ::transformRSLSubstitutionVarForString(sub_var:sub_var, smt:smt, expr_number:expr_number, expr:null_expr);
      else
        ::transformRSLSubstitutionVarForString(sub_var:sub_var, smt:smt, expr_number:expr_number, expr:expr);
        create_expr = true;
      end if;
    end if; end if;
    current_id = current_buffer_element.node_id;
    num_processed = num_processed + 1;
    // link up to previous expression
    if (not_empty prev_expr)
      select any new_expr related by smt->Expression[R775] where (selected.expression_number == expr_number);
      if ((cardinality buffer_elements) == num_processed) // if this is the last expression
        relate new_expr to prev_expr across R778;
      else
        relate new_expr to prev_expr across R779;
      end if;
    end if;
    expr_number = STRING::substr(s:expr_number, begin:0, end:STRING::strlen(s:expr_number) - 2) + ".2";
  else
    done = true;
  end if;
end while;

// if there are no buffer elements this is an empty string
if (empty buffer_elements)
  // create expression
  if (empty expr)
    create object instance expr of Expression;
    relate expr to smt across R775;
    expr.expression_number = expr_number;
    string_type_ref = TypeReference::getBuiltinTypeReference( name:"String" );
    relate string_type_ref to expr across R795;
  end if;
  // create literal
  create object instance lit of Literal;
  relate lit to expr across R776;
  lit.value = "";
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("081ff953-cdb1-4e77-95fb-3d472b311aae",
	"df7434f4-03ba-4657-975b-ead89f0a6cc4",
	'string_literal',
	"b85c20d1-20d0-4ae8-ada1-f0c5174a4cd1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b85c20d1-20d0-4ae8-ada1-f0c5174a4cd1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<String Literal>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("36306a19-9326-439c-9cdd-7c0e6222c75e",
	"df7434f4-03ba-4657-975b-ead89f0a6cc4",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"081ff953-cdb1-4e77-95fb-3d472b311aae",
	'');
INSERT INTO S_SPARM
	VALUES ("ac586af7-07dd-40f8-8c2d-95eb29807ff3",
	"df7434f4-03ba-4657-975b-ead89f0a6cc4",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"36306a19-9326-439c-9cdd-7c0e6222c75e",
	'');
INSERT INTO S_SPARM
	VALUES ("db0a02dc-075b-4b3b-9cb4-1cbdfe20104b",
	"df7434f4-03ba-4657-975b-ead89f0a6cc4",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"ac586af7-07dd-40f8-8c2d-95eb29807ff3",
	'');
INSERT INTO PE_PE
	VALUES ("df7434f4-03ba-4657-975b-ead89f0a6cc4",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9ba4a175-589b-4e7f-aefa-777f5a22778d",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLSubstitutionVar',
	'',
	'sub_var = param.sub_var;
block = param.block;

// get last statement in block
select any prev_smt related by block->Statement[R450];
select one next_smt related by prev_smt->Statement[R477.''executes before''];
while ( not_empty next_smt )
  prev_smt = next_smt;
  select one next_smt related by prev_smt->Statement[R477.''executes before''];
end while;

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if ( not_empty prev_smt )
  smt.statement_number = STRING::itoa( i:STRING::atoi( s:prev_smt.statement_number ) + 1 );
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.oal = "";

select one format_chars related by sub_var->Y_FormatChars[R3058];
select one named_access related by sub_var->Y_NamedAccess[R3085];
if ( "" != format_chars.FORMAT )
  // transform the named access
  // create an invocation to T::append
  select any invocable from instances of InvocableObject where ( "sub" == selected.name and "T" == selected.parent_name and "io.ciera.runtime.template.util" == selected.parent_package );
  if ( empty invocable )
    // TODO bad
  end if;
  // create invocation expression
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = "1.2";
  string_type_ref = TypeReference::getBuiltinTypeReference( name:"String" );
  relate string_type_ref to expr across R795;
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // create named reference expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = "1.2.1";
  void_type_ref = TypeReference::getBuiltinTypeReference( name:"void" );
  relate void_type_ref to expr2 across R795;
  // create named reference
  create object instance named_ref of NamedReference;
  relate named_ref to expr2 across R776;
  relate expr2 to invoc across R798;
  named_ref.name = "context()." + invocable.parent_name + "()";
  // transform actual parameters
  // format characters
  create object instance format_chars_expr of Expression;
  relate format_chars_expr to smt across R775;
  format_chars_expr.expression_number = "1.2.2";
  relate string_type_ref to format_chars_expr across R795;
  create object instance format_chars_lit of Literal;
  relate format_chars_lit to format_chars_expr across R776;
  format_chars_lit.value = format_chars.FORMAT;
  create object instance act_parm1 of ActualParameter;
  relate act_parm1 to format_chars_expr across R794;
  select any parm1 related by invocable->FormalParameter[R429] where ( selected.name == "p_format" );
  relate invoc to act_parm1 across R793;
  relate parm1 to act_parm1 across R3904;
  // named access parameter
  select any null_expr from instances of Expression where false;
  ::transformRSLNamedAccess( named_access:named_access, smt:smt, expr_number:"1.2.3", expr:null_expr );
  select any access_expr related by smt->Expression[R775] where ( selected.expression_number == "1.2.3" );
  create object instance act_parm2 of ActualParameter;
  relate act_parm2 to access_expr across R794;
  select any parm2 related by invocable->FormalParameter[R429] where ( selected.name == "p_s" );
  relate invoc to act_parm2 across R793;
  relate parm2 to act_parm2 across R3904;
  relate act_parm1 to act_parm2 across R3905.''precedes'';
  // add string type to imports
  select one registry_file related by block->InvocableObject[R4000]->GenericInvocable[R427]->Z_Template[R3053]->Z_TemplateRegistry[R3052]->GeneralFile[R3051]->File[R401];
  select one string_type related by string_type_ref->Type[R3800];
  ::addTypeToImports( file:registry_file, type_to_import:string_type, type:ImportType::IMPL );
else
  // transform the named access
  select any null_expr from instances of Expression where false;
  ::transformRSLNamedAccess( named_access:named_access, smt:smt, expr_number:"1.2", expr:null_expr );
end if;
select any expr related by smt->Expression[R775] where ( selected.expression_number == "1.2" );
::templateAppend( smt:smt, expr:expr );

// handle line break
select any next_buffer_element related by sub_var->Y_BufferElement[R3057]->Y_Buffer[R3056]->Y_BufferElement[R3056] where ( selected.node_id > sub_var.node_id );
if ( empty next_buffer_element )  // if this substitution is the last element in the buffer line, add a newline
  ::templateAppendString( block:block, str:"\\" + "n" );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("125e9f2e-acf8-48b8-a6b3-b6aadd0211fd",
	"9ba4a175-589b-4e7f-aefa-777f5a22778d",
	'sub_var',
	"4941caac-0b68-4b75-94bd-6d0a9c448def",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4941caac-0b68-4b75-94bd-6d0a9c448def",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Substitution Var>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("e8be0da7-1b79-4ee2-ae70-f5eecf2dacb0",
	"9ba4a175-589b-4e7f-aefa-777f5a22778d",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"125e9f2e-acf8-48b8-a6b3-b6aadd0211fd",
	'');
INSERT INTO PE_PE
	VALUES ("9ba4a175-589b-4e7f-aefa-777f5a22778d",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2183ae66-1dde-409f-9571-4bf31dc9197a",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLSubstitutionVarForString',
	'',
	'sub_var = param.sub_var;
smt = param.smt;
expr_number = param.expr_number;
expr = param.expr;

select one format_chars related by sub_var->Y_FormatChars[R3058];
select one named_access related by sub_var->Y_NamedAccess[R3085];
if ( "" != format_chars.FORMAT )
  // transform the named access
  // create an invocation to T::append
  select any invocable from instances of InvocableObject where ( "sub" == selected.name and "T" == selected.parent_name and "io.ciera.runtime.template.util" == selected.parent_package );
  if ( empty invocable )
    // TODO bad
  end if;
  // create invocation expression
  string_type_ref = TypeReference::getBuiltinTypeReference( name:"String" );
  if (empty expr)
    create object instance expr of Expression;
    relate expr to smt across R775;
    expr.expression_number = expr_number;
    relate string_type_ref to expr across R795;
  end if;
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // create named reference expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr_number + ".1";
  void_type_ref = TypeReference::getBuiltinTypeReference( name:"void" );
  relate void_type_ref to expr2 across R795;
  // create named reference
  create object instance named_ref of NamedReference;
  relate named_ref to expr2 across R776;
  relate expr2 to invoc across R798;
  named_ref.name = "context()." + invocable.parent_name + "()";
  // transform actual parameters
  // format characters
  create object instance format_chars_expr of Expression;
  relate format_chars_expr to smt across R775;
  format_chars_expr.expression_number = expr_number + ".2";
  relate string_type_ref to format_chars_expr across R795;
  create object instance format_chars_lit of Literal;
  relate format_chars_lit to format_chars_expr across R776;
  format_chars_lit.value = format_chars.FORMAT;
  create object instance act_parm1 of ActualParameter;
  relate act_parm1 to format_chars_expr across R794;
  select any parm1 related by invocable->FormalParameter[R429] where ( selected.name == "p_format" );
  relate invoc to act_parm1 across R793;
  relate parm1 to act_parm1 across R3904;
  // named access parameter
  select any null_expr from instances of Expression where false;
  ::transformRSLNamedAccess( named_access:named_access, smt:smt, expr_number:expr_number + ".3", expr:null_expr );
  select any access_expr related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".3" );
  create object instance act_parm2 of ActualParameter;
  relate act_parm2 to access_expr across R794;
  select any parm2 related by invocable->FormalParameter[R429] where ( selected.name == "p_s" );
  relate invoc to act_parm2 across R793;
  relate parm2 to act_parm2 across R3904;
  relate act_parm1 to act_parm2 across R3905.''precedes'';
else
  // transform the named access
  ::transformRSLNamedAccess( named_access:named_access, smt:smt, expr_number:expr_number, expr:expr );
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("3eb216f1-2fc5-4f6c-889e-d1996d4b93c8",
	"2183ae66-1dde-409f-9571-4bf31dc9197a",
	'sub_var',
	"4941caac-0b68-4b75-94bd-6d0a9c448def",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c70b20b1-44ec-4ab8-9a04-1acb0c8fbe42",
	"2183ae66-1dde-409f-9571-4bf31dc9197a",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"3eb216f1-2fc5-4f6c-889e-d1996d4b93c8",
	'');
INSERT INTO S_SPARM
	VALUES ("0003969d-7996-44c5-a0d8-c543148f1a1c",
	"2183ae66-1dde-409f-9571-4bf31dc9197a",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c70b20b1-44ec-4ab8-9a04-1acb0c8fbe42",
	'');
INSERT INTO S_SPARM
	VALUES ("719499a2-8681-48d2-b41e-49c0924b4060",
	"2183ae66-1dde-409f-9571-4bf31dc9197a",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"0003969d-7996-44c5-a0d8-c543148f1a1c",
	'');
INSERT INTO PE_PE
	VALUES ("2183ae66-1dde-409f-9571-4bf31dc9197a",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c7650204-7e77-4855-86cc-2ae660237a96",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLTerm',
	'',
	'term = param.term;
smt = param.smt;
expr_number = param.expr_number;

select one named_access related by term->Y_NamedAccess[R3081];
if ( not_empty named_access )
  select any null_expr from instances of Expression where false;
  ::transformRSLNamedAccess( named_access:named_access, smt:smt, expr_number:expr_number, expr:null_expr );

else
select one paren related by term->Y_Parenthesis[R3079];
if ( not_empty paren )
  // transform inner expression
  select one sub_expr related by paren->Y_Expression[R3080];
  ::transformRSLExpression( expr:sub_expr, smt:smt, expr_number:expr_number + ".1" );
  select any inner_expr related by smt->Expression[R775] where ( selected.expression_number == expr_number + ".1" );
  // create expression
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = expr_number;
  select one inner_type_ref related by inner_expr->TypeReference[R795];
  relate inner_type_ref to expr across R795;
  // create parenthesized expression
  create object instance paren_expr of ParenthesizedExpression;
  relate paren_expr to expr across R776;
  relate inner_expr to paren_expr across R784;

else
select one literal related by term->Y_Literal[R3086];
if ( not_empty literal )
  select one string_literal related by literal->Y_StringLiteral[R3087];
  if ( not_empty string_literal )
    select any null_expr from instances of Expression where false;
    ::transformRSLStringLiteral(string_literal: string_literal, smt:smt, expr_number:expr_number, expr:null_expr);
  else
    // create expression
    create object instance expr of Expression;
    relate expr to smt across R775;
    expr.expression_number = expr_number;
    // create literal
    create object instance lit of Literal;
    relate lit to expr across R776;

   if ( "" != literal.BOOLEAN_LITERAL )
      if ( "true" == T::sub( format:"l", s:literal.BOOLEAN_LITERAL ) )
        lit.value = "true";
      else
        lit.value = "false";
      end if;
      boolean_type_ref = TypeReference::getBuiltinTypeReference( name:"boolean" );
      relate boolean_type_ref to expr across R795;
    elif ( "" != literal.INTEGER_LITERAL )
      lit.value = literal.INTEGER_LITERAL;
      integer_type_ref = TypeReference::getBuiltinTypeReference( name:"int" );
      relate integer_type_ref to expr across R795;
    elif ( "" != literal.REAL_LITERAL )
      lit.value = literal.REAL_LITERAL;
      real_type_ref = TypeReference::getBuiltinTypeReference( name:"double" );
      relate real_type_ref to expr across R795;
    end if;
  end if;

end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("8bd4de72-c479-45e8-ac51-47627cfe0cb9",
	"c7650204-7e77-4855-86cc-2ae660237a96",
	'term',
	"e780eceb-c1c1-4d71-8e18-49d238bef7ce",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e780eceb-c1c1-4d71-8e18-49d238bef7ce",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Term>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("2fec4f25-887c-4216-9a3f-64d96f51297e",
	"c7650204-7e77-4855-86cc-2ae660237a96",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"8bd4de72-c479-45e8-ac51-47627cfe0cb9",
	'');
INSERT INTO S_SPARM
	VALUES ("14f5fc53-4205-4bb1-b6a3-462bf2c8765f",
	"c7650204-7e77-4855-86cc-2ae660237a96",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2fec4f25-887c-4216-9a3f-64d96f51297e",
	'');
INSERT INTO PE_PE
	VALUES ("c7650204-7e77-4855-86cc-2ae660237a96",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06e7fbbd-7433-4e63-bb80-6fc78435d995",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLVariableAccess',
	'',
	'var_access = param.var_access;
smt = param.smt;
expr = param.expr;

// create expression
if (empty expr)
  create object instance expr of Expression;
  relate expr to smt across R775;
  expr.expression_number = param.expr_number;
end if;

// select the referred to variable
select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == var_access.ID );
if ( empty var )
  // TODO bad
end if;

// create variable reference
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to expr across R776;

// link type
select one var_type_ref related by var->TypeReference[R461];
select one existing_type related by expr->TypeReference[R795];
if (not_empty existing_type)
  unrelate existing_type from expr across R795;
end if;
relate var_type_ref to expr across R795;

// add the type to the file imports
select one file related by smt->CodeBlock[R450]->InvocableObject[R4000]->GenericInvocable[R427]->Z_Template[R3053]->Z_TemplateRegistry[R3052]->GeneralFile[R3051]->File[R401];
if (empty file)
  file = ::getFileForStatement(smt:smt);
end if;
select one var_type related by var_type_ref->Type[R3800];
::addTypeToImports(file:file, type_to_import:var_type, type:ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f3182c8b-be26-4b57-8975-78386c2f62a0",
	"06e7fbbd-7433-4e63-bb80-6fc78435d995",
	'var_access',
	"16099895-7623-4dff-90d8-a2535265ce96",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("16099895-7623-4dff-90d8-a2535265ce96",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Variable Access>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("88885637-bbf3-4a7a-b243-5b01919012a4",
	"06e7fbbd-7433-4e63-bb80-6fc78435d995",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"f3182c8b-be26-4b57-8975-78386c2f62a0",
	'');
INSERT INTO S_SPARM
	VALUES ("0ceb7704-63da-4066-bd28-25dde36f0f94",
	"06e7fbbd-7433-4e63-bb80-6fc78435d995",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"88885637-bbf3-4a7a-b243-5b01919012a4",
	'');
INSERT INTO S_SPARM
	VALUES ("58ed3004-eb83-4def-87f8-e80eab761b53",
	"06e7fbbd-7433-4e63-bb80-6fc78435d995",
	'expr',
	"c732060c-653b-48f6-8ce5-99439b2a9c63",
	0,
	'',
	"0ceb7704-63da-4066-bd28-25dde36f0f94",
	'');
INSERT INTO PE_PE
	VALUES ("06e7fbbd-7433-4e63-bb80-6fc78435d995",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b49fb509-77c0-4d0b-a594-3ac2b13fe82e",
	"00000000-0000-0000-0000-000000000000",
	'transformTemplate',
	'',
	'filename = param.filename;
registry = param.registry;
comp_def = param.comp_def;
select one registry_file related by registry->GeneralFile[R3051]->File[R401];

// create the template instance
create object instance temp of Z_Template;
relate temp to registry across R3052;

// create the invocable instance
create object instance invocable of InvocableObject;
invocable.name = filename;
invocable.parent_name = registry.name;
invocable.parent_package = registry.package;
create object instance generic_invocable of GenericInvocable;
relate generic_invocable to invocable across R427;
invocable.oal = "";

relate temp to generic_invocable across R3053;
temp.comp_name = registry.comp_name;

// link void type
void_type_ref = TypeReference::getBuiltinTypeReference( name:"void" );
relate void_type_ref to invocable across R428;

// transform the body
select any body from instances of Y_Body where ( selected.filename == temp.name );
if ( not_empty body )
  ::transformRSLBody( body:body, invocable:invocable );
else
  // TODO bad
end if;

// unpack the symbol table
select any block related by invocable->CodeBlock[R4000] where ( selected.top_level );
indent = ::getIndent( tab_depth:block.tab_depth + 1 );
select many var_refs from instances of VariableReference where ( selected.parent_name == temp.registry_name and
                                                                 selected.parent_package == temp.registry_package and
                                                                 selected.body_name == temp.name );
select many referenced_vars related by var_refs->Variable[R782];
select any last_var from instances of Variable where false;
select any current_var from instances of Variable where false;
i = 0;
while ( i < cardinality referenced_vars )
  for each referenced_var in referenced_vars
    if ( ( empty last_var or last_var.name < referenced_var.name ) and ( empty current_var or referenced_var.name < current_var.name ) )
      current_var = referenced_var;
    end if;
  end for;
  block.prefix = block.prefix + indent + current_var.type_reference_name + " " + current_var.name + " = (" + current_var.type_reference_name + ")symbols[" + STRING::itoa( i:i ) + "];\n";
  last_var = current_var;
  select any current_var from instances of Variable where false;
  i = i + 1;
end while;

// create import block
select one comp_file related by comp_def->File[R401];
::addFileToImports( file:registry_file, file_to_import:comp_file, type:ImportType::IMPL );
::addStringToImports( file:registry_file, s:"io.ciera.runtime.summit.exceptions.XtumlException", type:ImportType::IMPL );
::addStringToImports( file:registry_file, s:"io.ciera.runtime.template.util.Template", type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("5cd0d588-5359-4677-a45e-9e4e72751046",
	"b49fb509-77c0-4d0b-a594-3ac2b13fe82e",
	'registry',
	"7ad9cd79-b13c-4746-adec-8fdcd3875d8c",
	0,
	'',
	"17b058a3-30ac-4f26-874f-520da178d8b6",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7ad9cd79-b13c-4746-adec-8fdcd3875d8c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Template Registry>',
	'',
	'',
	'../templating/templating.xtuml');
INSERT INTO S_SPARM
	VALUES ("48e5ce9e-e553-4506-b5a3-b24d786340f9",
	"b49fb509-77c0-4d0b-a594-3ac2b13fe82e",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"5cd0d588-5359-4677-a45e-9e4e72751046",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("109e90cb-1d66-46ee-88db-a568044879d0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../../../../tool-core/models/tool-core/architecture/component/component.xtuml');
INSERT INTO S_SPARM
	VALUES ("17b058a3-30ac-4f26-874f-520da178d8b6",
	"b49fb509-77c0-4d0b-a594-3ac2b13fe82e",
	'filename',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b49fb509-77c0-4d0b-a594-3ac2b13fe82e",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ac6a47ad-ad6f-452a-94c0-1149c5a16511",
	"00000000-0000-0000-0000-000000000000",
	'transformTemplateRegistries',
	'',
	'select many comp_defs from instances of ComponentDefinition;
for each comp_def in comp_defs
  ::transformTemplateRegistry( comp_def:comp_def );
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("ac6a47ad-ad6f-452a-94c0-1149c5a16511",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("72925771-4268-45d6-9e81-70fb2a6232da",
	"00000000-0000-0000-0000-000000000000",
	'transformTemplateRegistry',
	'',
	'comp_def = param.comp_def;
select one comp_def_file related by comp_def->File[R401];

// create the file
create object instance file of File;
file.name = comp_def.name + "TemplateRegistry";
file.path = comp_def_file.path;
file.package = ::pathToPackage( path:file.path );
file.extension = ".java";
file.exclude = false;

// create the general file
create object instance general_file of GeneralFile;
relate general_file to file across R401;

// create the template registry instance
create object instance registry of Z_TemplateRegistry;
relate registry to general_file across R3051;
registry.comp_name = comp_def.name;

// create a template for each reference in the component
select many invocs from instances of InvocableObject where false;
select many func_invocs related by comp_def->Function[R405]->InvocableObject[R427];
select many msg_invocs related by comp_def->Port[R417]->PortMessage[R420]->InvocableObject[R427];
invocs = func_invocs | msg_invocs;
select many op_invocs related by comp_def->Class[R408]->Operation[R416]->InvocableObject[R427];
invocs = invocs | op_invocs;
select many attr_invocs related by comp_def->Class[R408]->Attribute[R410]->AttributeAccessor[R4510]->AttributeDerivation[R441]->InvocableObject[R427];
invocs = invocs | attr_invocs;
select many util_invocs related by comp_def->Utility[R4558]->UtilityFunction[R4559]->InvocableObject[R427];
invocs = invocs | util_invocs;
select many template_includes related by invocs->CodeBlock[R4000]->Statement[R450]->ExpressionAsStatement[R451]->Expression[R476]->Invocation[R776]
  where ( selected.invoked_name == "include" and selected.invoked_parent_name == "T" and selected.invoked_parent_package == "io.ciera.runtime.template.util" );
for each template_include in template_includes
  select any filename_string related by template_include->ActualParameter[R793]->Expression[R794]->Literal[R776];
  if ( not_empty filename_string )
    select any existing_template related by registry->Z_Template[R3052] where ( selected.name == filename_string.value );
    if ( empty existing_template )
      LOG::LogInfo( message:"   Transforming: " + filename_string.value );
      ::transformTemplate( registry:registry, comp_def:comp_def, filename:filename_string.value );
    end if;
  else
    // TODO bad
  end if;
end for;

// create import block
::addFileToImports( file:file, file_to_import:comp_def_file, type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.template.util.ITemplate", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.template.util.ITemplateRegistry", type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("30021741-ea7d-4b6b-98d1-9107ebc82f0d",
	"72925771-4268-45d6-9e81-70fb2a6232da",
	'comp_def',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("72925771-4268-45d6-9e81-70fb2a6232da",
	1,
	"3ea869ae-ac55-4a67-92db-243b6342aed5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("3ea869ae-ac55-4a67-92db-243b6342aed5",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("386a382c-354c-40ec-bfc6-a79a57e91ce8",
	'tool-template',
	1,
	'../tool-template.xtuml');
