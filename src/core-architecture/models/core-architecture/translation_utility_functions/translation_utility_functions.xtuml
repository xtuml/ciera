-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("2e49e10f-3016-47ee-8a39-12e683e7075e",
	"21d38790-b93a-4ad6-b0a2-e3ba56baed8a",
	"21d38790-b93a-4ad6-b0a2-e3ba56baed8a",
	'translation_utility_functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b2b245c7-5fd4-4503-ad35-c12f55262f9a",
	112,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'core-architecture::translation_utility_functions');
INSERT INTO DIM_DIA
	VALUES ("b2b245c7-5fd4-4503-ad35-c12f55262f9a",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("32ee8604-1a4b-4c2a-b800-bc33049960ff",
	"00000000-0000-0000-0000-000000000000",
	'load_marks',
	'',
	'select any project_root from instances of Mark where selected.markable_name == "*" and selected.path == "*" and selected.feature_name == "ProjectRoot";
if ( "" != project_root.value )
  // Load marks
  LOG::LogInfo( message:"Loading marking data." );
  values[7] = "";
  Mark::load( filename:project_root.value + "/gen/application.mark", values:values );
  
  // Set system properties for system level marks
  select many system_marks from instances of Mark where selected.markable_name == "*" and selected.path == "*";
  for each system_mark in system_marks
    PROP::setProperty(key:"io.ciera." + system_mark.feature_name, value:system_mark.value);
  end for;
else
  LOG::LogInfo( message:"No project root specified." );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("32ee8604-1a4b-4c2a-b800-bc33049960ff",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("893fe17a-2708-45fc-8d4c-b1dfcb2c1b26",
	"00000000-0000-0000-0000-000000000000",
	'addStringToImports',
	'',
	'file = param.file;
if ( "" != param.s )
  select any import_ref related by file->TypeImportReference[R402] where ( selected.fully_qualified_name == param.s and selected.type == param.type );
  if ( empty import_ref )
    type_import = TypeImport::get_import( import:param.s );
    create object instance import_ref of TypeImportReference;
    import_ref.type = param.type;
    relate type_import to file across R402 using import_ref;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("e4468e5f-b8ad-406f-b5bd-c438faf8835c",
	"893fe17a-2708-45fc-8d4c-b1dfcb2c1b26",
	'file',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<File>',
	'',
	'',
	'../architecture/file/file.xtuml');
INSERT INTO S_SPARM
	VALUES ("63af2a4f-4236-459e-8b9f-bfe183719113",
	"893fe17a-2708-45fc-8d4c-b1dfcb2c1b26",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e4468e5f-b8ad-406f-b5bd-c438faf8835c",
	'');
INSERT INTO S_SPARM
	VALUES ("153fe0e1-5376-4ecc-83d1-3241358e9a35",
	"893fe17a-2708-45fc-8d4c-b1dfcb2c1b26",
	'type',
	"0216eb17-fbe4-49fc-b32f-fa5387d53466",
	0,
	'',
	"63af2a4f-4236-459e-8b9f-bfe183719113",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0216eb17-fbe4-49fc-b32f-fa5387d53466",
	"00000000-0000-0000-0000-000000000000",
	'ImportType',
	'',
	'',
	'../types/types.xtuml');
INSERT INTO PE_PE
	VALUES ("893fe17a-2708-45fc-8d4c-b1dfcb2c1b26",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8e70831b-822c-41fa-b1ab-30ffbe0553ca",
	"00000000-0000-0000-0000-000000000000",
	'TypeReference_getBuiltinTypeReference',
	'',
	'select any type_ref from instances of TypeReference where false;
select any builtin_type from instances of BuiltInType where ( selected.name == param.name );
if ( not_empty builtin_type )
  select any type_ref related by builtin_type->Type[R407]->TypeReference[R3800]->BasicTypeReference[R3801]->TypeReference[R3801];
  if ( empty type_ref )
    select one type related by builtin_type->Type[R407];
    create object instance type_ref of TypeReference;
    type_ref.type_reference_name = type.name;
    create object instance basic_type_ref of BasicTypeReference;
    relate type_ref to type across R3800;
    relate type_ref to basic_type_ref across R3801;
  end if;
else
  LOG::LogFailure(message:"Could not find builtin type " + param.name);
end if;
return type_ref;',
	"096d9dad-f227-4793-bb43-a1915881b825",
	1,
	'',
	0,
	2);
INSERT INTO S_SPARM
	VALUES ("2b974823-4404-4577-adce-3793dff08c14",
	"8e70831b-822c-41fa-b1ab-30ffbe0553ca",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8e70831b-822c-41fa-b1ab-30ffbe0553ca",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("096d9dad-f227-4793-bb43-a1915881b825",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Type Reference>',
	'',
	'',
	'../architecture/type/type.xtuml');
INSERT INTO S_SYNC
	VALUES ("8fd1a3e1-3dd7-4653-b00c-a30a7e7c56d4",
	"00000000-0000-0000-0000-000000000000",
	'pathToPackage',
	'',
	's = param.path;
slash_index = STRING::indexof( haystack:s, needle:"/" );
while ( -1 != slash_index )
  left = STRING::substr( s:s, begin:0, end:slash_index );
  right = STRING::substr( s:s, begin:slash_index + 1, end:-1 );
  s = left + "." + right;
  slash_index = STRING::indexof( haystack:s, needle:"/" );
end while;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("93086f25-6b8a-4be7-843f-99fd09581b89",
	"8fd1a3e1-3dd7-4653-b00c-a30a7e7c56d4",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8fd1a3e1-3dd7-4653-b00c-a30a7e7c56d4",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("193d0602-2bc2-4d0e-bc91-442b8824b6d4",
	"00000000-0000-0000-0000-000000000000",
	'addTypeToImports',
	'',
	'type_to_import = param.type_to_import;
type_to_import.addToImports(file:param.file, type:param.type);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("2804a425-af7c-4724-a2c3-a3f41717f91d",
	"193d0602-2bc2-4d0e-bc91-442b8824b6d4",
	'file',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5e9b4daa-a5b5-4d39-9e6a-565f188c6e06",
	"193d0602-2bc2-4d0e-bc91-442b8824b6d4",
	'type_to_import',
	"b4a754cc-b0a5-4777-ae98-df570434ea2a",
	0,
	'',
	"2804a425-af7c-4724-a2c3-a3f41717f91d",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b4a754cc-b0a5-4777-ae98-df570434ea2a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Type>',
	'',
	'',
	'../architecture/type/type.xtuml');
INSERT INTO S_SPARM
	VALUES ("349808d1-2cd9-463f-9d15-0fe63e0416a6",
	"193d0602-2bc2-4d0e-bc91-442b8824b6d4",
	'type',
	"0216eb17-fbe4-49fc-b32f-fa5387d53466",
	0,
	'',
	"5e9b4daa-a5b5-4d39-9e6a-565f188c6e06",
	'');
INSERT INTO PE_PE
	VALUES ("193d0602-2bc2-4d0e-bc91-442b8824b6d4",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6e1087e-e023-4cd3-af04-614b483c7703",
	"00000000-0000-0000-0000-000000000000",
	'addFileToImports',
	'',
	'file = param.file;
file_to_import = param.file_to_import;
if (file_to_import.package != file.package)
  import_string = ::pathToPackage( path:file_to_import.path ) + "." + file_to_import.name;
  ::addStringToImports( file:file, s:import_string, type:param.type );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("68b3d79a-2aaa-4d07-8b3e-03441b522ad0",
	"b6e1087e-e023-4cd3-af04-614b483c7703",
	'file',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a9334681-bb5a-4b4a-8796-839cb819ceb2",
	"b6e1087e-e023-4cd3-af04-614b483c7703",
	'file_to_import',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	0,
	'',
	"68b3d79a-2aaa-4d07-8b3e-03441b522ad0",
	'');
INSERT INTO S_SPARM
	VALUES ("cd05c505-c80c-41fd-ba6c-9d2a66c20fb4",
	"b6e1087e-e023-4cd3-af04-614b483c7703",
	'type',
	"0216eb17-fbe4-49fc-b32f-fa5387d53466",
	0,
	'',
	"a9334681-bb5a-4b4a-8796-839cb819ceb2",
	'');
INSERT INTO PE_PE
	VALUES ("b6e1087e-e023-4cd3-af04-614b483c7703",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	"00000000-0000-0000-0000-000000000000",
	'camelCaseName',
	'',
	'name = param.name;
underscore_index = STRING::indexof( haystack:name, needle:"_" );
while ( -1 != underscore_index )
  left = STRING::substr( s:name, begin:0, end:underscore_index );
  right = STRING::substr( s:name, begin:underscore_index + 1, end:-1 );
  name = left + "  " + right;
  underscore_index = STRING::indexof( haystack:name, needle:"_" );
end while;
name = T::sub( format:"c", s:name );
dblspc_index = STRING::indexof( haystack:name, needle:"  " );
while ( -1 != dblspc_index )
  left = STRING::substr( s:name, begin:0, end:dblspc_index );
  right = STRING::substr( s:name, begin:dblspc_index + 1, end:-1 );
  name = left + "_" + right;
  dblspc_index = STRING::indexof( haystack:name, needle:"  " );
end while;
if ( param.start_lower )
  left = STRING::substr( s:name, begin:0, end:1 );
  right = STRING::substr( s:name, begin:1, end:-1 );
  name = T::sub( format:"l", s:left ) + right;
end if;
return T::sub( format:"r", s:name );
// TODO make sure already camel cased does not get destroyed',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f8fc42c5-1da5-48dd-9ea5-f10817552941",
	"c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("d559dd9d-354d-4a97-a14a-75a81d5fe90f",
	"c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	'start_lower',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f8fc42c5-1da5-48dd-9ea5-f10817552941",
	'');
INSERT INTO PE_PE
	VALUES ("c9724af4-e561-417c-8dfa-1a3a570f4f7a",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fb49b3c5-ba10-462e-966c-52bd055950f5",
	"00000000-0000-0000-0000-000000000000",
	'formatPath',
	'',
	's = param.path;
dot_index = STRING::indexof( haystack:s, needle:"." );
while ( -1 != dot_index )
  left = STRING::substr( s:s, begin:0, end:dot_index );
  right = STRING::substr( s:s, begin:dot_index + 1, end:-1 );
  s = left + "/" + right;
  dot_index = STRING::indexof( haystack:s, needle:"." );
end while;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("a68e6a47-8233-4957-9446-5ba7a2c80f1d",
	"fb49b3c5-ba10-462e-966c-52bd055950f5",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fb49b3c5-ba10-462e-966c-52bd055950f5",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("100a2264-8337-48da-8aea-0e725b5f586a",
	"00000000-0000-0000-0000-000000000000",
	'getFileForInvocable',
	'',
	'invocable = param.invocable;
select one file related by invocable->Function[R427]->ComponentDefinition[R405]->File[R401];
if ( empty file )
  select one file related by invocable->PortMessage[R427]->Port[R420]->File[R401];
  if ( empty file )
    select one file related by invocable->Operation[R427]->Class[R416]->File[R401];
    if ( empty file )
      select one file related by invocable->AttributeDerivation[R427]->AttributeAccessor[R441]->Attribute[R4510]->Class[R410]->File[R401];
      if ( empty file )
        select one file related by invocable->UtilityFunction[R427]->Utility[R4559]->File[R401];
        if ( empty file )
          select one file related by invocable->State[R427]->StateMachine[R4751]->File[R401];
          if ( empty file )
            select one file related by invocable->Transition[R427]->State[R4757]->StateMachine[R4751]->File[R401];
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
return file;',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("0ee07d5c-04a9-46a9-8e1d-6b8804a09e30",
	"100a2264-8337-48da-8aea-0e725b5f586a",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3ab44839-4426-4754-b12a-0a00ce4dae1a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("100a2264-8337-48da-8aea-0e725b5f586a",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6b44b744-1fa6-4210-be2e-c95d3dce87e3",
	"00000000-0000-0000-0000-000000000000",
	'resolveTypeImports',
	'',
	'select many types from instances of Type;
for each type in types
  select many impl_files from instances of File where false;
  select many both_files from instances of File where false;

  // find files
  select many files related by type->TypeReference[R3800]->Attribute[R424]->Class[R410]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->Function[R427]->ComponentDefinition[R405]->File[R401];
  both_files = both_files | files;

  select many inst_ops related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->Operation[R427] where ( not selected.is_class_based );
  select many files related by inst_ops->Class[R416]->File[R401];
  both_files = both_files | files;

  select many class_ops related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->Operation[R427] where ( selected.is_class_based );
  select many files related by class_ops->Class[R416]->File[R401];
  impl_files = impl_files | files;

  select many files related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->PortMessage[R427]->Message[R420]->Interface[R419]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->PortMessage[R427]->Port[R420]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->UtilityFunction[R427]->Utility[R4559]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->Event[R427]->TransitionTableCell[R4756]->State[R4757]->StateMachine[R4751]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->FormalParameter[R431]->InvocableObject[R429]->Event[R427]->StateMachine[R4752]->Class[R4750]->File[R401];
  impl_files = impl_files | files;

  select many inst_ops related by type->TypeReference[R3800]->InvocableObject[R428]->Operation[R427] where ( not selected.is_class_based );
  select many files related by inst_ops->Class[R416]->File[R401];
  both_files = both_files | files;

  select many class_ops related by type->TypeReference[R3800]->InvocableObject[R428]->Operation[R427] where ( selected.is_class_based );
  select many files related by class_ops->Class[R416]->File[R401];
  impl_files = impl_files | files;

  select many files related by type->TypeReference[R3800]->InvocableObject[R428]->PortMessage[R427]->Message[R420]->Interface[R419]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->InvocableObject[R428]->PortMessage[R427]->Port[R420]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->InvocableObject[R428]->UtilityFunction[R427]->Utility[R4559]->File[R401];
  both_files = both_files | files;

  select many files related by type->TypeReference[R3800]->Selector[R446]->InstanceSelector[R445]->Class[R442]->File[R401];
  both_files = both_files | files;

  // add to imports
  for each file in impl_files
    type.addToImports( file:file, type:ImportType::IMPL );
  end for;
  for each file in both_files
    type.addToImports( file:file, type:ImportType::BOTH );
  end for;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("6b44b744-1fa6-4210-be2e-c95d3dce87e3",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e30a3db-097a-483d-9e1b-bf92d1fe2b4d",
	"00000000-0000-0000-0000-000000000000",
	'getFileForStatement',
	'',
	'smt = param.smt;
select one invocable related by smt->CodeBlock[R450]->InvocableObject[R4000];
return ::getFileForInvocable( invocable:invocable );',
	"133d5e7b-5ad2-41dd-b534-afe8f7cf56a8",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("257c3572-296a-4026-bb69-d762e987f204",
	"3e30a3db-097a-483d-9e1b-bf92d1fe2b4d",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../architecture/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("3e30a3db-097a-483d-9e1b-bf92d1fe2b4d",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("19b73a57-21bb-4ff4-9333-32fb6edbbe45",
	"00000000-0000-0000-0000-000000000000",
	'getNextBlockNumber',
	'',
	'upper_block = param.upper_block;

select many then_blocks related by upper_block->Statement[R450]->IfSmt[R451]->CodeBlock[R453];
select many else_blocks related by upper_block->Statement[R450]->IfSmt[R451]->CodeBlock[R454];
select many while_blocks related by upper_block->Statement[R450]->WhileSmt[R451]->CodeBlock[R456];
select many for_blocks related by upper_block->Statement[R450]->ForSmt[R451]->CodeBlock[R455];

child_blocks = then_blocks + else_blocks + while_blocks + for_blocks;

// find the most recent child block
block_number = "0";
int_block_number = 0;
if ( not_empty child_blocks )
  for each child_block in child_blocks
    child_block_number = STRING::atoi( s:STRING::substr( s:child_block.block_number, begin:STRING::strlen( s:upper_block.block_number ) + 1, end:-1 ) );
    if ( child_block_number > int_block_number )
      int_block_number = child_block_number;
    end if;
  end for;
  // increment
  block_number = upper_block.block_number + "." + STRING::itoa( i:int_block_number + 1 );
else
  block_number = upper_block.block_number + ".1";;
end if;

return block_number;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("1d44099c-5397-484a-a67c-3dac465e9971",
	"19b73a57-21bb-4ff4-9333-32fb6edbbe45",
	'upper_block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Code Block>',
	'',
	'',
	'../architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("19b73a57-21bb-4ff4-9333-32fb6edbbe45",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0c360182-681e-4852-95ef-402bb0030132",
	"00000000-0000-0000-0000-000000000000",
	'TypeReference_getInstanceWithDimString',
	'',
	'type = param.type;
dims = param.dims;
select any type_ref from instances of TypeReference where false;
if ( not_empty type )
  if ( "" != dims )
    select any array_type_ref related by type->TypeReference[R3800]->ArrayTypeReference[R3801] where ( selected.dims == dims );
    select one type_ref related by array_type_ref->TypeReference[R3801];
    if ( empty array_type_ref )
      create object instance type_ref of TypeReference;
      type_ref.type_reference_name = type.name + dims;
      create object instance array_type_ref of ArrayTypeReference;
      array_type_ref.dims = dims;
      relate type_ref to type across R3800;
      relate type_ref to array_type_ref across R3801;
    end if;
  else
    // basic type reference
    select any type_ref related by type->TypeReference[R3800]->BasicTypeReference[R3801]->TypeReference[R3801];
    if ( empty type_ref )
      create object instance type_ref of TypeReference;
      type_ref.type_reference_name = type.name;
      create object instance basic_type_ref of BasicTypeReference;
      relate type_ref to type across R3800;
      relate type_ref to basic_type_ref across R3801;
    end if;
  end if;
end if;
return type_ref;',
	"096d9dad-f227-4793-bb43-a1915881b825",
	1,
	'',
	0,
	3);
INSERT INTO S_SPARM
	VALUES ("c76e103e-ce4b-4376-9cb3-7bb701d809fa",
	"0c360182-681e-4852-95ef-402bb0030132",
	'type',
	"b4a754cc-b0a5-4777-ae98-df570434ea2a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0d8cc9da-5c25-4000-987e-c0974ed8a696",
	"0c360182-681e-4852-95ef-402bb0030132",
	'dims',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c76e103e-ce4b-4376-9cb3-7bb701d809fa",
	'');
INSERT INTO PE_PE
	VALUES ("0c360182-681e-4852-95ef-402bb0030132",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	"00000000-0000-0000-0000-000000000000",
	'transformSelector',
	'',
	'obj = param.obj;
rel = param.rel;
other_obj = param.other_obj;

// This function creates selectors for the class and set for a single path
// through a relationship. For single instances, a selectOne or selectMany
// are created based on multiplicity. For sets, a selectMany and is always
// created.

name = "R" + STRING::itoa( i:rel.num ) + "_";
if ( "" != param.phrase )
  name = name + T::sub( format:"_", s:param.phrase ) + "_";
end if;
name = name + other_obj.name;

// create set selectors
select one obj_set related by obj->ClassSet[R406];

// create ''many'' selector
create object instance sel of Selector;
sel.parent_name = obj_set.name;
sel.parent_package = obj_set.package;
sel.name = name;
sel.multiplicity = param.mult;
relate rel to sel across R4512;
create object instance set_sel of SetSelector;
relate set_sel to sel across R445;
relate set_sel to obj_set across R444;

// link up type
select one set_type_def related by other_obj->ClassSet[R406]->Type[R407];
set_type = ::TypeReference_getInstanceWithDimString(type:set_type_def, dims:"");
relate set_type to sel across R446;

select one class_type_def related by other_obj->Type[R407];
class_type = ::TypeReference_getInstanceWithDimString(type:class_type_def, dims:"");

// create the instance selectors
if (Mult::ONE == param.mult)

  // create ''one'' selector
  create object instance sel of Selector;
  sel.parent_name = obj.name;
  sel.parent_package = obj.package;
  sel.name = name;
  sel.multiplicity = param.mult;
  relate rel to sel across R4512;
  create object instance inst_sel of InstanceSelector;
  inst_sel.rel_num = rel.num;
  inst_sel.conditionality = param.cond;
  inst_sel.formalizer = param.formalizer;
  relate inst_sel to sel across R445;
  relate inst_sel to obj across R442;
  relate inst_sel to set_sel across R4505;

  // link up type
  relate class_type to sel across R446;

else

  // create ''many'' selector
  create object instance sel of Selector;
  sel.parent_name = obj.name;
  sel.parent_package = obj.package;
  sel.name = name;
  sel.multiplicity = param.mult;
  relate rel to sel across R4512;
  create object instance inst_sel of InstanceSelector;
  inst_sel.rel_num = rel.num;
  inst_sel.conditionality = param.cond;
  inst_sel.formalizer = param.formalizer;
  relate inst_sel to sel across R445;
  relate inst_sel to obj across R442;
  relate inst_sel to set_sel across R4505;

  // link up type
  relate set_type to sel across R446;

end if;

// add imports to object file
select one file related by obj->File[R401];
if (Cond::UNCONDITIONAL == param.cond or Mult::ONE == param.mult)
  //::addStringToImports(file:file, s:"io.ciera.runtime.summit.exceptions.ModelIntegrityException", type:ImportType::IMPL);
end if;
select one type related by class_type->Type[R3800];
::addTypeToImports(file:file, type_to_import:type, type:ImportType::BOTH);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f802002f-3a27-4b9c-8c9a-c21fb1e95402",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a519e323-b117-4a03-9435-b88e56c2443d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Inst>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO S_SPARM
	VALUES ("a00a3c72-94d6-4f4c-beaa-7e0d13fe02d0",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'rel',
	"0b0da94a-7a41-41a8-91ae-c91f2fdf7231",
	0,
	'',
	"f802002f-3a27-4b9c-8c9a-c21fb1e95402",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0b0da94a-7a41-41a8-91ae-c91f2fdf7231",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class Relationship>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO S_SPARM
	VALUES ("3e1bf172-6b8d-4933-99da-be71cacdcfbc",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'cond',
	"0a105e88-c4a7-4782-a19a-822614dc2d54",
	0,
	'',
	"a00a3c72-94d6-4f4c-beaa-7e0d13fe02d0",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0a105e88-c4a7-4782-a19a-822614dc2d54",
	"00000000-0000-0000-0000-000000000000",
	'Cond',
	'',
	'',
	'../types/types.xtuml');
INSERT INTO S_SPARM
	VALUES ("e15e91e6-803e-4180-93e6-2daf2e689ef6",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'mult',
	"05a31d0a-15c4-4fe9-84b5-004baff831ec",
	0,
	'',
	"3e1bf172-6b8d-4933-99da-be71cacdcfbc",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("05a31d0a-15c4-4fe9-84b5-004baff831ec",
	"00000000-0000-0000-0000-000000000000",
	'Mult',
	'',
	'',
	'../types/types.xtuml');
INSERT INTO S_SPARM
	VALUES ("6099baa8-2d8e-4a07-bd9a-56da65283e2d",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'other_obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"17bf1127-b819-4a90-8129-8db60979957e",
	'');
INSERT INTO S_SPARM
	VALUES ("ad3019a2-23f1-43c3-b343-ee82998e2828",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'formalizer',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e15e91e6-803e-4180-93e6-2daf2e689ef6",
	'');
INSERT INTO S_SPARM
	VALUES ("17bf1127-b819-4a90-8129-8db60979957e",
	"8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	'phrase',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ad3019a2-23f1-43c3-b343-ee82998e2828",
	'');
INSERT INTO PE_PE
	VALUES ("8ba04a7c-f4d8-4f9b-a5e9-32bfd7afe598",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b5ddd333-6031-4f09-9622-9535567a1342",
	"00000000-0000-0000-0000-000000000000",
	'transformSelectors',
	'',
	'obj = param.obj;

// transform selectors for associations
// form to part
select many form_to_part_rels related by obj->Relationship[R435];
for each rel in form_to_part_rels
  select one part_obj related by rel->Class[R434];
  ::transformSelector( obj:obj, rel:rel, phrase:rel.part_phrase, cond:rel.part_cond,
                       mult:rel.part_mult, formalizer:true, other_obj:part_obj );
end for;
// part to form
select many part_to_form_rels related by obj->Relationship[R434];
for each rel in part_to_form_rels
  select one form_obj related by rel->Class[R435];
  ::transformSelector( obj:obj, rel:rel, phrase:rel.form_phrase, cond:rel.form_cond,
                       mult:rel.form_mult, formalizer:false, other_obj:form_obj );
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("99546757-b520-4e48-80a2-fe4f989b76d3",
	"b5ddd333-6031-4f09-9622-9535567a1342",
	'obj',
	"a519e323-b117-4a03-9435-b88e56c2443d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b5ddd333-6031-4f09-9622-9535567a1342",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ddf36709-5c19-46c9-9595-b6a3bd478b37",
	"00000000-0000-0000-0000-000000000000",
	'linkParameter',
	'',
	'invocable = param.invocable;
parm = param.parameter;
// link parameter
select any last_parm related by invocable->FormalParameter[R429];
select one next_parm related by last_parm->FormalParameter[R404.''precedes''];
while ( not_empty next_parm )
  last_parm = next_parm;
  select one next_parm related by last_parm->FormalParameter[R404.''precedes''];
end while;
if ( not_empty last_parm )
  relate parm to last_parm across R404.''follows'';
end if;
relate parm to invocable across R429;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("d0a679fe-6069-41d1-950f-cfb28e7fc8d9",
	"ddf36709-5c19-46c9-9595-b6a3bd478b37",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fed25935-b1eb-4525-a58a-b387f230f652",
	"ddf36709-5c19-46c9-9595-b6a3bd478b37",
	'parameter',
	"4f106c1b-2473-4622-9798-816c7eb93613",
	0,
	'',
	"d0a679fe-6069-41d1-950f-cfb28e7fc8d9",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4f106c1b-2473-4622-9798-816c7eb93613",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Formal Parameter>',
	'',
	'',
	'../architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("ddf36709-5c19-46c9-9595-b6a3bd478b37",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5b81f2d9-5842-4708-97e2-4004c66cd797",
	"00000000-0000-0000-0000-000000000000",
	'resloveVariableFinalizations',
	'',
	'invocable = param.invocable;

select many affected_smts from instances of Statement where false;

select many where_clauses from instances of WhereExpr where ( selected.parent_name == invocable.parent_name and
                                                              selected.parent_package == invocable.parent_package and
                                                              selected.body_name == invocable.name );
for each where_clause in where_clauses
  select one where_expr related by where_clause->Expression[R796];
  select many var_refs from instances of VariableReference where ( selected.parent_name == invocable.parent_name and
                                                                   selected.parent_package == invocable.parent_package and
                                                                   selected.body_name == invocable.name and
                                                                   selected.block_number == where_expr.block_number and
                                                                   selected.statement_number == where_expr.statement_number and
                                                                   0 == STRING::indexof( haystack:selected.expression_number, needle:where_expr.expression_number ) );
  for each var_ref in var_refs
    select many var_assignments related by var_ref->Variable[R782]->VariableReference[R782]->Expression[R776]->BinaryOperation[R779] where ( selected.operator == "=" );
    select one for_smt related by var_ref->Variable[R782]->ForSmt[R459];
    if ( cardinality var_assignments > 1 or not_empty for_smt ) // the variable needs to be finalized because it is assigned later
      select one smt related by var_ref->Expression[R776]->Statement[R775];
      select one var related by var_ref->Variable[R782];
      select any finalization related by smt->Finalization[R485] where ( selected.var_block_number == var.block_number and selected.var_name == var.name );
      if ( empty finalization )
        create object instance finalization of Finalization;
        relate smt to var across R485 using finalization;
        affected_smts = affected_smts + smt;
      end if;
    end if;
  end for;
end for;

for each smt in affected_smts
  select many finalizations related by smt->Finalization[R485];
  for each finalization in finalizations
    finalization.render();
  end for;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("0876c286-3654-46b0-88a1-7fe4d81e506e",
	"5b81f2d9-5842-4708-97e2-4004c66cd797",
	'invocable',
	"3ab44839-4426-4754-b12a-0a00ce4dae1a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5b81f2d9-5842-4708-97e2-4004c66cd797",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a77e65bd-c8ae-439d-9209-37eeeacf2242",
	"00000000-0000-0000-0000-000000000000",
	'getCompDefForStatement',
	'',
	'smt = param.smt;
select one invocable related by smt->CodeBlock[R450]->InvocableObject[R4000];
select one comp_def related by invocable->Function[R427]->ComponentDefinition[R405];
if ( empty comp_def )
  select one comp_def related by invocable->PortMessage[R427]->Port[R420]->ComponentDefinition[R417];
  if ( empty comp_def )
    select one comp_def related by invocable->Operation[R427]->Class[R416]->ComponentDefinition[R408];
    if ( empty comp_def )
      select one comp_def related by invocable->AttributeDerivation[R427]->AttributeAccessor[R441]->Attribute[R4510]->Class[R410]->ComponentDefinition[R408];
      if ( empty comp_def )
        select one comp_def related by invocable->State[R427]->StateMachine[R4751]->Class[R4750]->ComponentDefinition[R408];
        if ( empty comp_def )
          select one comp_def related by invocable->Transition[R427]->State[R4757]->StateMachine[R4751]->Class[R4750]->ComponentDefinition[R408];
          // TODO utility will return empty
        end if;
      end if;
    end if;
  end if;
end if;
return comp_def;',
	"109e90cb-1d66-46ee-88db-a568044879d0",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("85e483d7-fa03-43da-a88e-3cc59508347e",
	"a77e65bd-c8ae-439d-9209-37eeeacf2242",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a77e65bd-c8ae-439d-9209-37eeeacf2242",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("109e90cb-1d66-46ee-88db-a568044879d0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../architecture/component/component.xtuml');
INSERT INTO S_SYNC
	VALUES ("6d208ff5-6ca0-44cc-8a36-1af28c569cd1",
	"00000000-0000-0000-0000-000000000000",
	'lastStatementInBlock',
	'',
	'block = param.block;
select any last_smt from instances of Statement where false;
select any smt related by block->Statement[R450];
while not_empty smt
  last_smt = smt;
  select one smt related by smt->Statement[R477.''executes before''];
end while;
return last_smt;',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	1,
	'',
	0,
	12);
INSERT INTO S_SPARM
	VALUES ("5d46de0d-381e-488c-bcde-c67d6ea319fc",
	"6d208ff5-6ca0-44cc-8a36-1af28c569cd1",
	'block',
	"60d4da0e-4cbe-4620-8c16-4e1dba1c6b8d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("6d208ff5-6ca0-44cc-8a36-1af28c569cd1",
	1,
	"2e49e10f-3016-47ee-8a39-12e683e7075e",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("2e49e10f-3016-47ee-8a39-12e683e7075e",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("21d38790-b93a-4ad6-b0a2-e3ba56baed8a",
	'core-architecture',
	1,
	'../core-architecture.xtuml');
