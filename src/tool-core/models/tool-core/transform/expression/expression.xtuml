-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	"9092a4a9-91f5-4e59-984b-3ca72917240d",
	'expression',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("238347f6-a694-446c-ab76-870bc94ba1ea",
	112,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'4.1.17',
	'tool-core::transform::expression');
INSERT INTO DIM_DIA
	VALUES ("238347f6-a694-446c-ab76-870bc94ba1ea",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("2776dcaa-4ceb-45b5-afe2-3a96ec17aed9",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralString',
	'',
	'v_lst = param.v_lst;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lst->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
lit.value = v_lst.Value;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("faa8035a-3a98-4672-adc7-e8cda3987afd",
	"2776dcaa-4ceb-45b5-afe2-3a96ec17aed9",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"5144714e-1e3f-4b7f-8fdb-b3d464499fda",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../../core-architecture/models/core-architecture/architecture/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("7a579de1-1253-40d8-b988-4754ce2bfa45",
	"2776dcaa-4ceb-45b5-afe2-3a96ec17aed9",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"faa8035a-3a98-4672-adc7-e8cda3987afd",
	'');
INSERT INTO S_SPARM
	VALUES ("5144714e-1e3f-4b7f-8fdb-b3d464499fda",
	"2776dcaa-4ceb-45b5-afe2-3a96ec17aed9",
	'v_lst',
	"666662db-c722-4168-962e-44206d77b36d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("666662db-c722-4168-962e-44206d77b36d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal String>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("2776dcaa-4ceb-45b5-afe2-3a96ec17aed9",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fdb26d2d-aaf2-4fb3-afba-baf8f04a34d3",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralBoolean',
	'',
	'v_lbo = param.v_lbo;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lbo->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
if ( "true" == T::sub( format:"l", s:v_lbo.Value ) )
  lit.value = "true";
else
  lit.value = "false";
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("07ac8201-0773-4a14-9e99-8b4e7e52dd3e",
	"fdb26d2d-aaf2-4fb3-afba-baf8f04a34d3",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"9eb8989b-9632-4e9f-94b7-8eb9ea6bfc98",
	'');
INSERT INTO S_SPARM
	VALUES ("42dfc48d-28b4-4885-9b5d-8a4054c26399",
	"fdb26d2d-aaf2-4fb3-afba-baf8f04a34d3",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"07ac8201-0773-4a14-9e99-8b4e7e52dd3e",
	'');
INSERT INTO S_SPARM
	VALUES ("9eb8989b-9632-4e9f-94b7-8eb9ea6bfc98",
	"fdb26d2d-aaf2-4fb3-afba-baf8f04a34d3",
	'v_lbo',
	"fecf81e2-9424-4fe2-87ea-e1391b11dc03",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("fecf81e2-9424-4fe2-87ea-e1391b11dc03",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Boolean>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("fdb26d2d-aaf2-4fb3-afba-baf8f04a34d3",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a6d5210d-3c45-4bb3-8c63-04db8eb1358e",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralInteger',
	'',
	'v_lin = param.v_lin;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lin->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
lit.value = v_lin.Value;
if (C_UTIL::isLong(int_string:lit.value))
  lit.value = lit.value + "L";
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("ba901d4c-4b39-4844-bf4e-62e3794991bb",
	"a6d5210d-3c45-4bb3-8c63-04db8eb1358e",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"7c250ac8-4faf-47a2-9c2c-a34a320de2f7",
	'');
INSERT INTO S_SPARM
	VALUES ("8c720eb2-cb58-4493-b370-83b4d7c68a17",
	"a6d5210d-3c45-4bb3-8c63-04db8eb1358e",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ba901d4c-4b39-4844-bf4e-62e3794991bb",
	'');
INSERT INTO S_SPARM
	VALUES ("7c250ac8-4faf-47a2-9c2c-a34a320de2f7",
	"a6d5210d-3c45-4bb3-8c63-04db8eb1358e",
	'v_lin',
	"d3e773c6-5c55-41f1-9e19-b99adc6231fb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d3e773c6-5c55-41f1-9e19-b99adc6231fb",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Integer>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("a6d5210d-3c45-4bb3-8c63-04db8eb1358e",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("86ea030b-83bb-47ed-b761-86437d26df38",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralReal',
	'',
	'v_lrl = param.v_lrl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lrl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
lit.value = v_lrl.Value;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("dafe8a6d-04fd-4cba-a82a-a94f80399117",
	"86ea030b-83bb-47ed-b761-86437d26df38",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"1244fe41-6346-4ec3-9709-d1a4cab8495c",
	'');
INSERT INTO S_SPARM
	VALUES ("31f8a81b-b472-404f-a164-564ebf585865",
	"86ea030b-83bb-47ed-b761-86437d26df38",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"dafe8a6d-04fd-4cba-a82a-a94f80399117",
	'');
INSERT INTO S_SPARM
	VALUES ("1244fe41-6346-4ec3-9709-d1a4cab8495c",
	"86ea030b-83bb-47ed-b761-86437d26df38",
	'v_lrl',
	"30a9f6d7-41c6-41db-b5ed-53368c1bfb0a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("30a9f6d7-41c6-41db-b5ed-53368c1bfb0a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Real>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("86ea030b-83bb-47ed-b761-86437d26df38",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cd6d571a-1e24-4020-b154-24daeca45932",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralEnumerator',
	'',
	'v_len = param.v_len;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_len->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create enumerator reference
create object instance enum_ref of EnumeratorReference;
relate enum_ref to expr across R776;
select one s_enum related by v_len->S_ENUM[R824];
select any enumer related by s_enum->S_EDT[R27]->S_DT[R17]->Type[R423]->EnumeratedType[R407]->Enumerator[R415] where ( selected.name == T::sub( format:"u", s:s_enum.Name ) );
if ( not_empty enumer )
  select one edt_file related by enumer->EnumeratedType[R415]->File[R401];
  ::addFileToImports( file: ::getFileForStatement( smt:smt ), file_to_import:edt_file, type:ImportType::IMPL );
  relate enumer to enum_ref across R786;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("98ede4ba-1587-4bff-a5c3-4207a16b0a62",
	"cd6d571a-1e24-4020-b154-24daeca45932",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"ebbfbf2c-cf14-4821-b540-6ceec86032d2",
	'');
INSERT INTO S_SPARM
	VALUES ("5d7a8e65-0926-4dcb-863e-806317d480b9",
	"cd6d571a-1e24-4020-b154-24daeca45932",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"98ede4ba-1587-4bff-a5c3-4207a16b0a62",
	'');
INSERT INTO S_SPARM
	VALUES ("ebbfbf2c-cf14-4821-b540-6ceec86032d2",
	"cd6d571a-1e24-4020-b154-24daeca45932",
	'v_len',
	"24bb2ed2-1c7b-43d7-ade3-39372b27dbcc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("24bb2ed2-1c7b-43d7-ade3-39372b27dbcc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Enumerator>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("cd6d571a-1e24-4020-b154-24daeca45932",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("360568b3-a14d-4c6c-bc89-849dacbd82e7",
	"00000000-0000-0000-0000-000000000000",
	'transformTransientValueReference',
	'',
	'v_tvl = param.v_tvl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_tvl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// if this is the first location, create a new variable
select one v_var related by v_tvl->V_VAR[R805];
select any existing_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
if ( empty existing_var ) // cannot declare two variables of the same name in the same scope
  ::transformVariable( v_var:v_var, smt:smt );
end if;

// create variable reference
select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to expr across R776;
// add type reference to file
select one expr_type related by var->TypeReference[R461]->Type[R3800];
::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("aa8ec031-6986-443b-9d3d-feea0f678714",
	"360568b3-a14d-4c6c-bc89-849dacbd82e7",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"afbec573-f673-4c9e-a699-bc8a77e69cff",
	'');
INSERT INTO S_SPARM
	VALUES ("4930a882-3818-46be-8d73-e525820615c5",
	"360568b3-a14d-4c6c-bc89-849dacbd82e7",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aa8ec031-6986-443b-9d3d-feea0f678714",
	'');
INSERT INTO S_SPARM
	VALUES ("afbec573-f673-4c9e-a699-bc8a77e69cff",
	"360568b3-a14d-4c6c-bc89-849dacbd82e7",
	'v_tvl',
	"6458e266-dbd1-453f-b475-dbd63f086878",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6458e266-dbd1-453f-b475-dbd63f086878",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Transient Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("360568b3-a14d-4c6c-bc89-849dacbd82e7",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2cb1e6f0-95a7-4cad-aaad-f8794d04cd8d",
	"00000000-0000-0000-0000-000000000000",
	'transformInstanceReference',
	'',
	'v_irf = param.v_irf;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_irf->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// if this is the first location, create a new variable
select one v_var related by v_irf->V_VAR[R808];
if ( "self" == T::sub( format:"l", s:v_var.Name ) ) // reference to self
  // create named reference
  create object instance self_ref of NamedReference;
  relate self_ref to expr across R776;
  self_ref.name = "self()";
else
  select any existing_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
  if ( empty existing_var ) // cannot declare two variables of the same name in the same scope
    ::transformVariable( v_var:v_var, smt:smt );
  end if;
  // create variable reference
  select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
  create object instance var_ref of VariableReference;
  relate var to var_ref across R782;
  relate var_ref to expr across R776;
  // add type reference to file
  select one expr_type related by var->TypeReference[R461]->Type[R3800];
  ::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("3b1ff9be-b265-48d6-b65a-025ebc436492",
	"2cb1e6f0-95a7-4cad-aaad-f8794d04cd8d",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"d715ec12-eb79-4ff6-8a2d-8aa0a7e1b0d2",
	'');
INSERT INTO S_SPARM
	VALUES ("02a7a9a7-c936-4e5d-aa6a-9f3d4823d1ef",
	"2cb1e6f0-95a7-4cad-aaad-f8794d04cd8d",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3b1ff9be-b265-48d6-b65a-025ebc436492",
	'');
INSERT INTO S_SPARM
	VALUES ("d715ec12-eb79-4ff6-8a2d-8aa0a7e1b0d2",
	"2cb1e6f0-95a7-4cad-aaad-f8794d04cd8d",
	'v_irf',
	"e8b1ed3a-682d-4973-a5b6-9902253e77b0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e8b1ed3a-682d-4973-a5b6-9902253e77b0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Instance Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("2cb1e6f0-95a7-4cad-aaad-f8794d04cd8d",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("98f2a56a-20c1-4ba5-a6b2-161ff5ee99f4",
	"00000000-0000-0000-0000-000000000000",
	'transformInstanceSetReference',
	'',
	'v_isr = param.v_isr;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_isr->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// if this is the first location, create a new variable
select one v_var related by v_isr->V_VAR[R809];
select any existing_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
if ( empty existing_var ) // cannot declare two variables of the same name in the same scope
  ::transformVariable( v_var:v_var, smt:smt );
end if;

// create variable reference
select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to expr across R776;
// add type reference to file
select one expr_type related by var->TypeReference[R461]->Type[R3800];
::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("75f1de69-8790-476d-acdf-651780191790",
	"98f2a56a-20c1-4ba5-a6b2-161ff5ee99f4",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"b36f1bf4-faed-4d04-bd34-fe76aeaf2010",
	'');
INSERT INTO S_SPARM
	VALUES ("83e4ce85-e8a6-4d6f-917e-184138de5589",
	"98f2a56a-20c1-4ba5-a6b2-161ff5ee99f4",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"75f1de69-8790-476d-acdf-651780191790",
	'');
INSERT INTO S_SPARM
	VALUES ("b36f1bf4-faed-4d04-bd34-fe76aeaf2010",
	"98f2a56a-20c1-4ba5-a6b2-161ff5ee99f4",
	'v_isr',
	"8fd83df6-a99a-4701-a61f-75349c3e6b4d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8fd83df6-a99a-4701-a61f-75349c3e6b4d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Instance Set Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("98f2a56a-20c1-4ba5-a6b2-161ff5ee99f4",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3984d7da-5744-4e5d-a196-dc6fd9f2a2bf",
	"00000000-0000-0000-0000-000000000000",
	'transformAttributeValueReference',
	'',
	'v_avl = param.v_avl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_avl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance acc of AttributeAccess;
relate acc to expr across R776;
select one root_val related by v_avl->V_VAL[R807];
::transformExpression( v_val:root_val, expr_number:expr.expression_number + ".1", smt:smt );
select any root_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
relate root_expr to acc across R785;
select one attr related by v_avl->O_ATTR[R806]->Attribute[R414];
relate attr to acc across R788;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("c4c38053-be3c-4908-a038-50ff45041e8d",
	"3984d7da-5744-4e5d-a196-dc6fd9f2a2bf",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"812780c7-45b1-4352-ae0e-1a8b3607a739",
	'');
INSERT INTO S_SPARM
	VALUES ("d08498bc-7ce0-4cb6-adfe-bbfaffdf1926",
	"3984d7da-5744-4e5d-a196-dc6fd9f2a2bf",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c4c38053-be3c-4908-a038-50ff45041e8d",
	'');
INSERT INTO S_SPARM
	VALUES ("812780c7-45b1-4352-ae0e-1a8b3607a739",
	"3984d7da-5744-4e5d-a196-dc6fd9f2a2bf",
	'v_avl',
	"71ed37d1-359a-4941-b904-f5450eb45d4e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("71ed37d1-359a-4941-b904-f5450eb45d4e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("3984d7da-5744-4e5d-a196-dc6fd9f2a2bf",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("18d27040-a6eb-442b-986c-f1fc9ad7c3ba",
	"00000000-0000-0000-0000-000000000000",
	'transformParameterValue',
	'',
	'v_pvl = param.v_pvl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_pvl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance ref of ParameterReference;
relate ref to expr across R776;
param_name = "";
select one brg_param related by v_pvl->S_BPARM[R831];
if ( not_empty brg_param ) param_name = brg_param.Name; else
select one fnc_param related by v_pvl->S_SPARM[R832];
if ( not_empty fnc_param ) param_name = fnc_param.Name; else
select one op_param related by v_pvl->O_TPARM[R833];
if ( not_empty op_param ) param_name = op_param.Name; else
select one ep_param related by v_pvl->C_PP[R843];
if ( not_empty ep_param ) param_name = ep_param.Name;
else
  // TODO bad
end if; end if; end if; end if;
select any formal_param related by smt->CodeBlock[R450]->InvocableObject[R4000]->FormalParameter[R429]
  where ( selected.name == "p_" + param_name );
if ( not_empty formal_param )
  relate formal_param to ref across R781;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("350ce5ce-368e-4d6a-a153-675fd1181de2",
	"18d27040-a6eb-442b-986c-f1fc9ad7c3ba",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"f7bcb166-cfe7-456f-bdf1-0847cfb7e18e",
	'');
INSERT INTO S_SPARM
	VALUES ("4c7b7ecf-ad70-445c-a6eb-353cd38a8e94",
	"18d27040-a6eb-442b-986c-f1fc9ad7c3ba",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"350ce5ce-368e-4d6a-a153-675fd1181de2",
	'');
INSERT INTO S_SPARM
	VALUES ("f7bcb166-cfe7-456f-bdf1-0847cfb7e18e",
	"18d27040-a6eb-442b-986c-f1fc9ad7c3ba",
	'v_pvl',
	"6f6d9360-7969-4454-abf8-336e689f3bbd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6f6d9360-7969-4454-abf8-336e689f3bbd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Parameter Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("18d27040-a6eb-442b-986c-f1fc9ad7c3ba",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1d983544-78ca-4568-a8cc-61cd1425f514",
	"00000000-0000-0000-0000-000000000000",
	'transformBridgeValue',
	'',
	'v_brv = param.v_brv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_brv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

select one util_func related by v_brv->S_BRG[R828]->UtilityFunction[R4570];
if ( empty util_func )
  select one s_ee related by v_brv->S_BRG[R828]->S_EE[R19];
  select one s_ee_pkg related by s_ee->PE_PE[R8001]->EP_PKG[R8000];
  select any empty_comp_def from instances of ComponentDefinition where false;
  ::transformUtility( s_ee:s_ee, ep_pkg:s_ee_pkg, containing_comp_def:empty_comp_def, exclude:true, path: ::ep_pkgToPath( ep_pkg:s_ee_pkg ) );
  select one util_func related by v_brv->S_BRG[R828]->UtilityFunction[R4570];
end if;
select one invocable related by util_func->InvocableObject[R427];
select one utility related by util_func->Utility[R4559];
select one utility_file related by utility->File[R401];
containing_comp_def = ::getCompDefForStatement( smt:smt );
select one containing_comp_file related by containing_comp_def->File[R401];
::addFileToImports( file:containing_comp_file, file_to_import:utility_file, type:ImportType::IMPL );
::addStringToImports( file:containing_comp_file, s: ::pathToPackage( path:utility_file.path ) + ".impl." + utility_file.name + "Impl", type:ImportType::IMPL );
if ( not_empty containing_comp_def )
  select any util_ref related by utility->UtilityReference[R4558] where ( selected.comp_name == containing_comp_def.name and selected.comp_package == containing_comp_def.package );
  if ( empty util_ref )
    create object instance util_ref of UtilityReference;
    relate utility to containing_comp_def across R4558 using util_ref;
  end if;
end if;
if ( not_empty invocable )
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // create named reference expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr.expression_number + ".1";
  void_type = ::TypeReference_getBuiltinTypeReference( name:"void" );
  relate void_type to expr2 across R795;
  // create named reference
  create object instance named_ref of NamedReference;
  relate named_ref to expr2 across R776;
  relate expr2 to invoc across R798;
  named_ref.name = "context()." + utility.name + "()";
  // transform actual parameters
  select many v_pars related by v_brv->V_PAR[R810];
  ::transformActualParameters( invocation:invoc, v_pars:v_pars, expr_number:expr.expression_number, base_num:2 );
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("37425530-2dc1-4677-bfd6-fc5dc5d64f84",
	"1d983544-78ca-4568-a8cc-61cd1425f514",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"0ab8fc9b-68f1-4993-a845-7a7ba84d11c0",
	'');
INSERT INTO S_SPARM
	VALUES ("16157cad-1162-4e0a-bc8a-79099cbf26be",
	"1d983544-78ca-4568-a8cc-61cd1425f514",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"37425530-2dc1-4677-bfd6-fc5dc5d64f84",
	'');
INSERT INTO S_SPARM
	VALUES ("0ab8fc9b-68f1-4993-a845-7a7ba84d11c0",
	"1d983544-78ca-4568-a8cc-61cd1425f514",
	'v_brv',
	"cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("1d983544-78ca-4568-a8cc-61cd1425f514",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8b3894b6-c48a-446a-8486-03277f790e37",
	"00000000-0000-0000-0000-000000000000",
	'transformFunctionValue',
	'',
	'v_fnv = param.v_fnv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_fnv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

select one s_sync related by v_fnv->S_SYNC[R827];
containing_comp_def = ::getCompDefForStatement( smt:smt );
select any invocable related by containing_comp_def->Function[R405]->InvocableObject[R427] where ( selected.name == s_sync.Name );
if ( not_empty invocable )
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // create named reference expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr.expression_number + ".1";
  void_type = ::TypeReference_getBuiltinTypeReference( name:"void" );
  relate void_type to expr2 across R795;
  // create named reference
  create object instance named_ref of NamedReference;
  relate named_ref to expr2 across R776;
  relate expr2 to invoc across R798;
  named_ref.name = "context()";
  // transform actual parameters
  select many v_pars related by v_fnv->V_PAR[R817];
  ::transformActualParameters( invocation:invoc, v_pars:v_pars, expr_number:expr.expression_number, base_num:2 );
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("d4ce5aa3-1ea4-49d2-8499-f367b093b117",
	"8b3894b6-c48a-446a-8486-03277f790e37",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"ed68ac5f-d9d1-4048-b0b1-7b5acf316ad5",
	'');
INSERT INTO S_SPARM
	VALUES ("c8278176-a23f-4ce5-a6a5-39a1794fe40b",
	"8b3894b6-c48a-446a-8486-03277f790e37",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d4ce5aa3-1ea4-49d2-8499-f367b093b117",
	'');
INSERT INTO S_SPARM
	VALUES ("ed68ac5f-d9d1-4048-b0b1-7b5acf316ad5",
	"8b3894b6-c48a-446a-8486-03277f790e37",
	'v_fnv',
	"6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("8b3894b6-c48a-446a-8486-03277f790e37",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7f0b1aa7-3ae9-4ba3-9227-de4a2481b7d8",
	"00000000-0000-0000-0000-000000000000",
	'transformOperationValue',
	'',
	'v_trv = param.v_trv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_trv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

select one o_tfr related by v_trv->O_TFR[R829];
select any invocable related by o_tfr->O_OBJ[R115]->Class[R409]->Operation[R416]->InvocableObject[R427] where ( selected.name == o_tfr.Name );
if ( not_empty invocable )
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // relate expression to expression as statement
  if ( Scope::Instance == o_tfr.Instance_Based )
    select one op_v_var related by v_trv->V_VAR[R830];
    if ( not_empty op_v_var ) // instance based operation
      // create variable reference expression
      create object instance expr2 of Expression;
      relate expr2 to smt across R775;
      expr2.expression_number = expr.expression_number + ".1";
      relate expr2 to invoc across R798;
      select one op_s_dt related by op_v_var->S_DT[R848];
      select one op_obj related by o_tfr->O_OBJ[R115];
      op_s_dt = ::getInstRefTypeForClass( s_dt:op_s_dt, o_obj:op_obj );
      select many s_dims related by op_v_var->S_DIM[R849];
      op_type = ::TypeReference_getInstance( s_dt:op_s_dt, s_dims:s_dims );
      relate op_type to expr2 across R795;
      select any op_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == op_v_var.Name );
      if ( not_empty op_var ) // cannot declare two variables of the same name in the same scope
        create object instance var_ref of VariableReference;
        relate op_var to var_ref across R782;
        relate var_ref to expr2 across R776;
        // add type reference to file
        select one expr_type related by expr2->TypeReference[R795]->Type[R3800];
        ::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );
      elif ( "self" == op_v_var.Name )
        // create named reference
        create object instance self_ref of NamedReference;
        relate self_ref to expr2 across R776;
        self_ref.name = "self()";
      else
        // TODO bad
      end if;
    else // must be a selected reference
      // create named reference expression
      create object instance expr2 of Expression;
      relate expr2 to smt across R775;
      expr2.expression_number = expr.expression_number + ".1";
      relate expr2 to invoc across R798;
      select any s_irdt related by o_tfr->O_OBJ[R115]->S_IRDT[R123] where ( not selected.isSet );
      select one s_dt related by s_irdt->S_DT[R17];
      select many s_dims from instances of S_DIM where false;
      op_type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
      relate op_type to expr2 across R795;
      // create selected reference
      select one op_cls related by o_tfr->O_OBJ[R115]->Class[R409];
      create object instance sel of SelectedExpr;
      sel.cast = op_cls.name;
      relate sel to expr2 across R776;
      // add import
      select one sel_type related by op_cls->Type[R407];
      ::addTypeToImports(file: ::getFileForStatement(smt:smt), type_to_import:sel_type, type:ImportType::IMPL);
    end if;
  else // class based operation
    // create named reference expression
    create object instance expr2 of Expression;
    relate expr2 to smt across R775;
    expr2.expression_number = expr.expression_number + ".1";
    relate expr2 to invoc across R798;
    void_type = ::TypeReference_getBuiltinTypeReference( name:"void" );
    relate void_type to expr2 across R795;
    // create named reference
    create object instance named_ref of NamedReference;
    relate named_ref to expr2 across R776;
    select one target_class related by invocable->Operation[R427]->Class[R416];
    named_ref.name = "new " + target_class.name + "Impl.CLASS(context())";
    select one class_file related by target_class->File[R401];
    ::addStringToImports( file: ::getFileForStatement( smt:smt ), s: ::pathToPackage( path:class_file.path ) + ".impl." + class_file.name + "Impl", type:ImportType::IMPL );
  end if;
  // transform actual parameters
  select many v_pars related by v_trv->V_PAR[R811];
  ::transformActualParameters( invocation:invoc, v_pars:v_pars, expr_number:expr.expression_number, base_num:2 );
else
  // TODO bad
end if; ',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("02bb5a09-3d1a-4e22-b512-a7dd55035928",
	"7f0b1aa7-3ae9-4ba3-9227-de4a2481b7d8",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"592c1c36-db72-4c2e-bf3b-c8c9f261588e",
	'');
INSERT INTO S_SPARM
	VALUES ("cb644393-5807-436e-9e77-55c6a0328aef",
	"7f0b1aa7-3ae9-4ba3-9227-de4a2481b7d8",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"02bb5a09-3d1a-4e22-b512-a7dd55035928",
	'');
INSERT INTO S_SPARM
	VALUES ("592c1c36-db72-4c2e-bf3b-c8c9f261588e",
	"7f0b1aa7-3ae9-4ba3-9227-de4a2481b7d8",
	'v_trv',
	"ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("7f0b1aa7-3ae9-4ba3-9227-de4a2481b7d8",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c31b6437-8265-468e-8e35-5603c0c1149c",
	"00000000-0000-0000-0000-000000000000",
	'transformSelectedReference',
	'',
	'v_slr = param.v_slr;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_slr->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create selected reference
create object instance sel of SelectedExpr;
relate sel to expr across R776;

// this assumes that the select expression is the right hand operand of a
// binary operation used as a statement (which is currently always the case in
// OAL)
select one select_expr related by smt->ExpressionAsStatement[R451]->Expression[R476]->BinaryOperation[R776]->Expression[R778]
                                   ->WhereExpr[R776]->Expression[R790]->SelectExpr[R776];
select one sel_cls related by select_expr->SelectRelated[R789]->Selector[R797]->TypeReference[R446]->Type[R3800]->Class[R407];
if empty sel_cls
  select one sel_cls related by select_expr->SelectRelated[R789]->Selector[R797]->TypeReference[R446]->Type[R3800]->ClassSet[R407]->Class[R406];
  if empty sel_cls
    select one sel_cls related by select_expr->SelectFromInstances[R789]->InstancePopulationSelector[R799]->Class[R449];
  end if;
end if;
sel.cast = sel_cls.name;

// add import
select one sel_type related by sel_cls->Type[R407];
file = ::getFileForStatement(smt:smt);
::addTypeToImports(file:file, type_to_import:sel_type, type: ImportType::IMPL);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("d675c5f6-6fa1-4740-8899-4ba1fe1ab89d",
	"c31b6437-8265-468e-8e35-5603c0c1149c",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"1f418cbb-22f5-4ef4-b47e-596bb0a4e44a",
	'');
INSERT INTO S_SPARM
	VALUES ("31d8321d-d0c5-40ed-a3f2-203829f93311",
	"c31b6437-8265-468e-8e35-5603c0c1149c",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d675c5f6-6fa1-4740-8899-4ba1fe1ab89d",
	'');
INSERT INTO S_SPARM
	VALUES ("1f418cbb-22f5-4ef4-b47e-596bb0a4e44a",
	"c31b6437-8265-468e-8e35-5603c0c1149c",
	'v_slr',
	"2e3ac016-f3b4-4115-ba61-4a4c0be721f1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2e3ac016-f3b4-4115-ba61-4a4c0be721f1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Selected Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("c31b6437-8265-468e-8e35-5603c0c1149c",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8be1f3b4-63fc-425a-be3c-3abb0202a793",
	"00000000-0000-0000-0000-000000000000",
	'transformUnaryOperation',
	'',
	'v_uny = param.v_uny;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_uny->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create the unary expression
create object instance unary of UnaryOperation;
relate unary to expr across R776;
select one op_val related by v_uny->V_VAL[R804];
if ( "not_empty" == T::sub( format:"l", s:v_uny.Operator ) ) // create an additional ''not'' expression before transforming an ''empty'' expression
  unary.operator = "!";
  unary.invocation = false;
  // create ''empty'' expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr.expression_number + ".1";
  relate expr2 to unary across R777;
  boolean_type = ::TypeReference_getBuiltinTypeReference( name:"boolean" );
  relate boolean_type to expr2 across R795;
  create object instance unary2 of UnaryOperation;
  relate unary2 to expr2 across R776;
  unary2.operator = "isEmpty";
  unary2.invocation = true;
  // transform the operatnd expression
  ::transformExpression( v_val:op_val, expr_number:expr2.expression_number + ".1", smt:smt );
  select any op_expr related by smt->Expression[R775] where ( selected.expression_number == expr2.expression_number + ".1" );
  relate op_expr to unary2 across R777;
else
  if ( "not" == T::sub( format:"l", s:v_uny.Operator ) )
    unary.operator = "!";
    unary.invocation = false;
  elif ( "empty" == T::sub( format:"l", s:v_uny.Operator ) )
    unary.operator = "isEmpty";
    unary.invocation = true;
  elif ( "cardinality" == T::sub( format:"l", s:v_uny.Operator ) )
    unary.operator = "size";
    unary.invocation = true;
  elif ( ( "+" == T::sub( format:"l", s:v_uny.Operator ) ) or ( "-" == T::sub( format:"l", s:v_uny.Operator ) ) )
    unary.operator = v_uny.Operator;
    unary.invocation = false;
  else
    // TODO bad
  end if;
  // transform the operatnd expression
  ::transformExpression( v_val:op_val, expr_number:expr.expression_number + ".1", smt:smt );
  select any op_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
  relate op_expr to unary across R777;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("dd4a5423-17a5-47c0-a8ce-5bd6efb97a4f",
	"8be1f3b4-63fc-425a-be3c-3abb0202a793",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"8e32d9f3-1b53-4cfc-b8b7-720c2bea20bb",
	'');
INSERT INTO S_SPARM
	VALUES ("a596c4da-be51-4a7e-88af-c6377a186559",
	"8be1f3b4-63fc-425a-be3c-3abb0202a793",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"dd4a5423-17a5-47c0-a8ce-5bd6efb97a4f",
	'');
INSERT INTO S_SPARM
	VALUES ("8e32d9f3-1b53-4cfc-b8b7-720c2bea20bb",
	"8be1f3b4-63fc-425a-be3c-3abb0202a793",
	'v_uny',
	"59a775c7-8153-4a74-9471-99ef6c7254a0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("59a775c7-8153-4a74-9471-99ef6c7254a0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("8be1f3b4-63fc-425a-be3c-3abb0202a793",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c0727d2b-4eb0-48e1-b403-4fe4bc6371dd",
	"00000000-0000-0000-0000-000000000000",
	'transformBinaryOperation',
	'',
	'v_bin = param.v_bin;
smt = param.smt;
expr_number = param.expr_number;

file = ::getFileForStatement(smt:smt);

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one v_val related by v_bin->V_VAL[R801];
select one s_dt related by v_val->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance(s_dt:s_dt, s_dims:s_dims);
select one array_type related by type->ArrayTypeReference[R3801];
relate type to expr across R795;

// create the binary expression
create object instance binary of BinaryOperation;
relate binary to expr across R776;
select one l_val related by v_bin->V_VAL[R802];
select one r_val related by v_bin->V_VAL[R803];
select one l_s_dt related by l_val->S_DT[R820];
select one l_type related by l_s_dt->Type[R423];
select one l_set related by l_type->ClassSet[R407];
// translate the operator
binary.invocation = false;
binary.util = false;
if ("and" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "&&";
  else
    binary.operator = "and";
    binary.invocation = true;
  end if;
elif ("or" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "||";
  else
    binary.operator = "or";
    binary.invocation = true;
  end if;
elif ("==" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "==";
  else
    if (not_empty array_type)
      binary.operator = "ArrayUtil.equality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.ArrayUtil", type:ImportType::IMPL);
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "StringUtil.equality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL);
    else
      binary.operator = "equality";
      binary.invocation = true;
    end if;
  end if;
elif ("!=" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "!=";
  else
    if (not_empty array_type)
      binary.operator = "ArrayUtil.inequality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.ArrayUtil", type:ImportType::IMPL);
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "StringUtil.inequality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL);
    else
      binary.operator = "inequality";
      binary.invocation = true;
    end if;
  end if;
elif ("<" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "<";
  else
    if (not_empty array_type)
      binary.operator = "ArrayUtil.lessThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.ArrayUtil", type:ImportType::IMPL);
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "StringUtil.lessThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL);
    else
      binary.operator = "lessThan";
      binary.invocation = true;
    end if;
  end if;
elif ("<=" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "<=";
  else
    if (not_empty array_type)
      binary.operator = "ArrayUtil.lessThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.ArrayUtil", type:ImportType::IMPL);
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "StringUtil.lessThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL);
    else
      binary.operator = "lessThanOrEqual";
      binary.invocation = true;
    end if;
  end if;
elif (">" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = ">";
  else
    if (not_empty array_type)
      binary.operator = "ArrayUtil.greaterThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.ArrayUtil", type:ImportType::IMPL);
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "StringUtil.greaterThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL);
    else
      binary.operator = "greaterThan";
      binary.invocation = true;
    end if;
  end if;
elif (">=" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = ">=";
  else
    if (not_empty array_type)
      binary.operator = "ArrayUtil.greaterThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.ArrayUtil", type:ImportType::IMPL);
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "StringUtil.greaterThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports(file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL);
    else
      binary.operator = "greaterThanOrEqual";
      binary.invocation = true;
    end if;
  end if;
elif ("+" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "+";
  else
    if (not_empty l_set) // set type
      binary.operator = "union";
      binary.invocation = true;
      binary.cast = l_type.name;
    elif ("String" == l_type.name and "" == l_type.package)
      binary.operator = "+";
    else
      binary.operator = "add";
      binary.invocation = true;
    end if;
  end if;
elif ("-" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "-";
  else
    if (not_empty l_set) // set type
      binary.operator = "difference";
      binary.cast = l_type.name;
    else
      binary.operator = "subtract";
    end if;
    binary.invocation = true;
  end if;
elif ("*" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "*";
  else
    binary.operator = "multiply";
    binary.invocation = true;
  end if;
elif ("/" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "/";
  else
    binary.operator = "divide";
    binary.invocation = true;
  end if;
elif ("%" == T::sub(format:"l", s:v_bin.Operator))
  if (l_type.primitive())
    binary.operator = "%";
  else
    binary.operator = "remainder";
    binary.invocation = true;
  end if;
elif ("|" == T::sub(format:"l", s:v_bin.Operator))
  binary.operator = "union";
  binary.invocation = true;
  binary.cast = l_type.name;
elif ("&" == T::sub(format:"l", s:v_bin.Operator))
  binary.operator = "intersection";
  binary.invocation = true;
  binary.cast = l_type.name;
elif ("^" == T::sub(format:"l", s:v_bin.Operator))
  binary.operator = "disunion";
  binary.invocation = true;
  binary.cast = l_type.name;
end if;
// translate the left operand
if (::precedenceCheck(val1:l_val, val2:v_val) <= 0) // if the left operand is lower precedence than the current operator, force it to be evaluated first with parentheses
  // transform the left hand expression
  ::transformExpression(v_val:l_val, expr_number:expr.expression_number + ".1.1", smt:smt);
  select any paren_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1.1");
  // create the parenthesis
  create object instance l_expr of Expression;
  relate l_expr to smt across R775;
  l_expr.expression_number = expr.expression_number + ".1";
  select one l_type_ref related by paren_expr->TypeReference[R795];
  relate l_type_ref to l_expr across R795;
  create object instance l_paren of ParenthesizedExpression;
  relate l_paren to l_expr across R776;
  relate l_expr to binary across R779;
  relate paren_expr to l_paren across R784;
else
  // transform the left hand expression
  ::transformExpression(v_val:l_val, expr_number:expr.expression_number + ".1", smt:smt);
  select any l_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".1");
  relate l_expr to binary across R779;
end if;
// translate the right operand
if (::precedenceCheck(val1:r_val, val2:v_val) <= 0) // if the right operand is lower precedence than the current operator, force it to be evaluated first with parentheses
  // transform the right hand expression
  ::transformExpression(v_val:r_val, expr_number:expr.expression_number + ".2.1", smt:smt);
  select any paren_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".2.1");
  // create the parenthesis
  create object instance r_expr of Expression;
  relate r_expr to smt across R775;
  r_expr.expression_number = expr.expression_number + ".2";
  select one r_type_ref related by paren_expr->TypeReference[R795];
  relate r_type_ref to r_expr across R795;
  create object instance r_paren of ParenthesizedExpression;
  relate r_paren to r_expr across R776;
  relate r_expr to binary across R778;
  relate paren_expr to r_paren across R784;
else
  // transform the right hand expression
  ::transformExpression(v_val:r_val, expr_number:expr.expression_number + ".2", smt:smt);
  select any r_expr related by smt->Expression[R775] where (selected.expression_number == expr.expression_number + ".2");
  relate r_expr to binary across R778;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("387b9098-d9d3-454d-aceb-681dbf2ab0ac",
	"c0727d2b-4eb0-48e1-b403-4fe4bc6371dd",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"70cec9f5-9c59-49f2-86e8-09f63e68c94c",
	'');
INSERT INTO S_SPARM
	VALUES ("5fb91be1-e1e1-4948-906b-5ce862c6ff0f",
	"c0727d2b-4eb0-48e1-b403-4fe4bc6371dd",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"387b9098-d9d3-454d-aceb-681dbf2ab0ac",
	'');
INSERT INTO S_SPARM
	VALUES ("70cec9f5-9c59-49f2-86e8-09f63e68c94c",
	"c0727d2b-4eb0-48e1-b403-4fe4bc6371dd",
	'v_bin',
	"146d5fb3-fcd3-4deb-a49c-f516ef703827",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("146d5fb3-fcd3-4deb-a49c-f516ef703827",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Binary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("c0727d2b-4eb0-48e1-b403-4fe4bc6371dd",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("63a9337c-7b61-42fb-8eeb-f59c2f32d411",
	"00000000-0000-0000-0000-000000000000",
	'transformArrayElementReference',
	'',
	'v_aer = param.v_aer;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_aer->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// transform root expression
select one root_val related by v_aer->V_VAL[R838];
::transformExpression( v_val:root_val, expr_number:expr.expression_number + ".1", smt:smt );
select any root_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
// transform index expression
select one index_val related by v_aer->V_VAL[R839];
::transformExpression( v_val:index_val, expr_number:expr.expression_number + ".2", smt:smt );
select any index_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".2" );
// create array element reference
create object instance array_ref of ArrayElementReference;
relate array_ref to expr across R776;
relate array_ref to root_expr across R3900;
relate array_ref to index_expr across R3901;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("ae79d391-ed67-46c5-83e8-c7c7153b9911",
	"63a9337c-7b61-42fb-8eeb-f59c2f32d411",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"c4365fb7-9255-413b-9368-778b39f9213c",
	'');
INSERT INTO S_SPARM
	VALUES ("8702f7a0-e47d-4f7a-8765-e6950aa67381",
	"63a9337c-7b61-42fb-8eeb-f59c2f32d411",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ae79d391-ed67-46c5-83e8-c7c7153b9911",
	'');
INSERT INTO S_SPARM
	VALUES ("c4365fb7-9255-413b-9368-778b39f9213c",
	"63a9337c-7b61-42fb-8eeb-f59c2f32d411",
	'v_aer',
	"9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Element Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("63a9337c-7b61-42fb-8eeb-f59c2f32d411",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d9d59ac2-8ea6-4398-99dc-04fb2deeb708",
	"00000000-0000-0000-0000-000000000000",
	'transformExpression',
	'',
	'v_val = param.v_val;
smt = param.smt;
expr_number = param.expr_number;

select one v_lst related by v_val->V_LST[R801];
if ( not_empty v_lst )
  ::transformLiteralString( v_lst:v_lst, smt:smt, expr_number:expr_number );

else
select one v_lbo related by v_val->V_LBO[R801];
if ( not_empty v_lbo )
  ::transformLiteralBoolean( v_lbo:v_lbo, smt:smt, expr_number:expr_number );

else
select one v_lin related by v_val->V_LIN[R801];
if ( not_empty v_lin )
  ::transformLiteralInteger( v_lin:v_lin, smt:smt, expr_number:expr_number );

else
select one v_lrl related by v_val->V_LRL[R801];
if ( not_empty v_lrl )
  ::transformLiteralReal( v_lrl:v_lrl, smt:smt, expr_number:expr_number );

else
select one v_len related by v_val->V_LEN[R801];
if ( not_empty v_len )
  ::transformLiteralEnumerator( v_len:v_len, smt:smt, expr_number:expr_number );

else
select one v_tvl related by v_val->V_TVL[R801];
if ( not_empty v_tvl )
  ::transformTransientValueReference( v_tvl:v_tvl, smt:smt, expr_number:expr_number );

else
select one v_irf related by v_val->V_IRF[R801];
if ( not_empty v_irf )
  ::transformInstanceReference( v_irf:v_irf, smt:smt, expr_number:expr_number );

else
select one v_isr related by v_val->V_ISR[R801];
if ( not_empty v_isr )
  ::transformInstanceSetReference( v_isr:v_isr, smt:smt, expr_number:expr_number );
 
else
select one v_avl related by v_val->V_AVL[R801];
if ( not_empty v_avl )
  ::transformAttributeValueReference( v_avl:v_avl, smt:smt, expr_number:expr_number );
 
else
select one v_pvl related by v_val->V_PVL[R801];
if ( not_empty v_pvl )
  ::transformParameterValue( v_pvl:v_pvl, smt:smt, expr_number:expr_number );

else
select one v_edv related by v_val->V_EDV[R801];
if ( not_empty v_edv )
  ::transformEventDatumValue( v_edv:v_edv, smt:smt, expr_number:expr_number );

else
select one v_brv related by v_val->V_BRV[R801];
if ( not_empty v_brv )
  ::transformBridgeValue( v_brv:v_brv, smt:smt, expr_number:expr_number );

else
select one v_fnv related by v_val->V_FNV[R801];
if ( not_empty v_fnv )
  ::transformFunctionValue( v_fnv:v_fnv, smt:smt, expr_number:expr_number );

else
select one v_trv related by v_val->V_TRV[R801];
if ( not_empty v_trv )
  ::transformOperationValue( v_trv:v_trv, smt:smt, expr_number:expr_number );

else
select one v_slr related by v_val->V_SLR[R801];
if ( not_empty v_slr )
  ::transformSelectedReference( v_slr:v_slr, smt:smt, expr_number:expr_number );

else
select one v_uny related by v_val->V_UNY[R801];
if ( not_empty v_uny )
  ::transformUnaryOperation( v_uny:v_uny, smt:smt, expr_number:expr_number );

else
select one v_bin related by v_val->V_BIN[R801];
if ( not_empty v_bin )
  ::transformBinaryOperation( v_bin:v_bin, smt:smt, expr_number:expr_number );

else
select one v_aer related by v_val->V_AER[R801];
if ( not_empty v_aer )
  ::transformArrayElementReference( v_aer:v_aer, smt:smt, expr_number:expr_number );

else
select one v_scv related by v_val->V_SCV[R801];
if ( not_empty v_scv )
  ::transformConstantReference( v_scv:v_scv, smt:smt, expr_number:expr_number );

else
select one v_mvl related by v_val->V_MVL[R801];
if ( not_empty v_mvl )
  ::transformMemberValueReference( v_mvl:v_mvl, smt:smt, expr_number:expr_number );

else
  LOG::LogInfo( message:"expression type not yet supported" );
end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("1a3e6394-c79f-4eb8-9c63-f5daccf920e0",
	"d9d59ac2-8ea6-4398-99dc-04fb2deeb708",
	'v_val',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5400d269-ee31-4742-ac70-8532512a854c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("f59ed691-3b8f-46af-9b3c-bb511eb1a109",
	"d9d59ac2-8ea6-4398-99dc-04fb2deeb708",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1a3e6394-c79f-4eb8-9c63-f5daccf920e0",
	'');
INSERT INTO S_SPARM
	VALUES ("7ebf14f7-598c-4da6-b147-7800f4e5f316",
	"d9d59ac2-8ea6-4398-99dc-04fb2deeb708",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"f59ed691-3b8f-46af-9b3c-bb511eb1a109",
	'');
INSERT INTO PE_PE
	VALUES ("d9d59ac2-8ea6-4398-99dc-04fb2deeb708",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0f99e7d4-7ef9-4e3e-93bc-03c9d032ef2a",
	"00000000-0000-0000-0000-000000000000",
	'transformConstantReference',
	'',
	'v_scv = param.v_scv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_scv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance const_ref of ConstantReference;
relate const_ref to expr across R776;
select one cnst_lsc related by v_scv->CNST_SYC[R850]->CNST_LFSC[R1502]->CNST_LSC[R1503];
const_ref.value = cnst_lsc.Value;

// check if it is a long constant
if (type.type_reference_name == "long")
  const_ref.value = const_ref.value + "L";
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("53f650a0-b778-4cad-8688-c8e7486c3a93",
	"0f99e7d4-7ef9-4e3e-93bc-03c9d032ef2a",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"b8049f9b-4646-4aa3-999f-fce4cbd520d0",
	'');
INSERT INTO S_SPARM
	VALUES ("f339c28c-b198-40e2-a051-b0417bafb897",
	"0f99e7d4-7ef9-4e3e-93bc-03c9d032ef2a",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"53f650a0-b778-4cad-8688-c8e7486c3a93",
	'');
INSERT INTO S_SPARM
	VALUES ("b8049f9b-4646-4aa3-999f-fce4cbd520d0",
	"0f99e7d4-7ef9-4e3e-93bc-03c9d032ef2a",
	'v_scv',
	"f71ef091-38bf-437f-bf05-dd3d0bbcda6a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f71ef091-38bf-437f-bf05-dd3d0bbcda6a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Symbolic Constant Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("0f99e7d4-7ef9-4e3e-93bc-03c9d032ef2a",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9a987d1b-8a64-4aaf-9eec-1d4796e78a5f",
	"00000000-0000-0000-0000-000000000000",
	'transformEventDatumValue',
	'',
	'v_edv = param.v_edv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_edv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance ref of ParameterReference;
relate ref to expr across R776;
param_name = "";
select any sm_evtdi related by v_edv->V_EPR[R834]->SM_EVTDI[R846];
if ( empty sm_evtdi )
  // TODO bad
  LOG::LogFailure( message:"No event data item found" );
else
  param_name = sm_evtdi.Name;
end if;
select any formal_param related by sm_evtdi->SM_EVT[R532]->Event[R4759]->InvocableObject[R427]->FormalParameter[R429]
  where ( selected.name == "p_" + param_name );
if ( not_empty formal_param )
  relate formal_param to ref across R781;
else
  // TODO bad
  LOG::LogFailure( message:"No formal parameter found" );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b128b8e7-47f5-47b9-ae6a-cf305b35886b",
	"9a987d1b-8a64-4aaf-9eec-1d4796e78a5f",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"66127c8c-8ac5-4e4e-b516-ca369040b700",
	'');
INSERT INTO S_SPARM
	VALUES ("abe62c9d-3388-47f5-9db3-e62d49086e7e",
	"9a987d1b-8a64-4aaf-9eec-1d4796e78a5f",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b128b8e7-47f5-47b9-ae6a-cf305b35886b",
	'');
INSERT INTO S_SPARM
	VALUES ("66127c8c-8ac5-4e4e-b516-ca369040b700",
	"9a987d1b-8a64-4aaf-9eec-1d4796e78a5f",
	'v_edv',
	"1afb12b7-8ed1-43b4-87c7-b16623b2679a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1afb12b7-8ed1-43b4-87c7-b16623b2679a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Event Datum Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("9a987d1b-8a64-4aaf-9eec-1d4796e78a5f",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2175d89-2c7f-4f2d-8d4f-9168fe4cb9ad",
	"00000000-0000-0000-0000-000000000000",
	'transformMemberValueReference',
	'',
	'v_mvl = param.v_mvl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_mvl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = ::TypeReference_getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance acc of AttributeAccess;
relate acc to expr across R776;
select one root_val related by v_mvl->V_VAL[R837];
::transformExpression( v_val:root_val, expr_number:expr.expression_number + ".1", smt:smt );
select any root_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
relate root_expr to acc across R785;
select one attr related by v_mvl->S_MBR[R836]->Attribute[R4760];
relate attr to acc across R788;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("1fdd3134-fc78-433c-a45e-a63aec05276f",
	"a2175d89-2c7f-4f2d-8d4f-9168fe4cb9ad",
	'smt',
	"b586ec7e-41fe-4d50-9cf3-27b173e9848a",
	0,
	'',
	"62b1b5ea-584f-4b4f-bd8f-5afd1dffb5c6",
	'');
INSERT INTO S_SPARM
	VALUES ("f87350c4-3a44-498b-8fcc-e3f01a41c4b0",
	"a2175d89-2c7f-4f2d-8d4f-9168fe4cb9ad",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1fdd3134-fc78-433c-a45e-a63aec05276f",
	'');
INSERT INTO S_SPARM
	VALUES ("62b1b5ea-584f-4b4f-bd8f-5afd1dffb5c6",
	"a2175d89-2c7f-4f2d-8d4f-9168fe4cb9ad",
	'v_mvl',
	"e023df9a-7028-4de9-9907-becb527ba8e2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e023df9a-7028-4de9-9907-becb527ba8e2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Member Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("a2175d89-2c7f-4f2d-8d4f-9168fe4cb9ad",
	1,
	"f9a85e65-cedd-4444-aef5-bae5288e31bc",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("f9a85e65-cedd-4444-aef5-bae5288e31bc",
	1,
	"302d02ea-52a7-489d-a14b-18b29f3c8d86",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("302d02ea-52a7-489d-a14b-18b29f3c8d86",
	"9092a4a9-91f5-4e59-984b-3ca72917240d",
	"9092a4a9-91f5-4e59-984b-3ca72917240d",
	'transform',
	'',
	0,
	'../transform.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("9092a4a9-91f5-4e59-984b-3ca72917240d",
	'tool-core',
	1,
	'../../tool-core.xtuml');
