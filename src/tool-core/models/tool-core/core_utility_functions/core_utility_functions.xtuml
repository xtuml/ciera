-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"9092a4a9-91f5-4e59-984b-3ca72917240d",
	"9092a4a9-91f5-4e59-984b-3ca72917240d",
	'core_utility_functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("2f9b8212-6e62-4195-a069-b1a951c0f9ff",
	112,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'tool-core::core_utility_functions');
INSERT INTO DIM_DIA
	VALUES ("2f9b8212-6e62-4195-a069-b1a951c0f9ff",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("89400ce7-dc54-4564-aee4-89f10e0979a8",
	"00000000-0000-0000-0000-000000000000",
	'act_lnkGetMult',
	'',
	'act_lnk = param.act_lnk;
mult = Mult::ONE;

if ( Multiplicity::Many == act_lnk.Mult )
  mult = Mult::MANY;
elif ( Multiplicity::Unknown == act_lnk.Mult )
  select one r_simp related by act_lnk->R_REL[R681]->R_SIMP[R206];
  select one r_assoc related by act_lnk->R_REL[R681]->R_ASSOC[R206];
  if ( not_empty r_simp or not_empty r_assoc )
    // get base object
    select one base_o_obj related by act_lnk->ACT_LNK[R604.''succeeds'']->O_OBJ[R678];
    if ( empty base_o_obj )
      select one base_o_obj related by act_lnk->ACT_SEL[R637]->V_VAL[R613]->V_IRF[R801]->V_VAR[R808]->V_INT[R814]->O_OBJ[R818];
      if ( empty base_o_obj )
        select one base_o_obj related by act_lnk->ACT_SEL[R637]->V_VAL[R613]->V_ISR[R801]->V_VAR[R809]->V_INS[R814]->O_OBJ[R819];
      end if;
    end if;
    // get target object
    select one target_o_obj related by act_lnk->O_OBJ[R678];
    not_reflexive = target_o_obj.Obj_ID != base_o_obj.Obj_ID;
    phrase = C_UTIL::stripTics( s:act_lnk.Rel_Phrase );
    if ( not_empty r_simp )
      select one r_form related by r_simp->R_FORM[R208];
      if ( not_empty r_form and r_form.Mult == 1 and r_form.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == r_form.Txt_Phrs ) ) // target is simple formalizer and is many
        mult = Mult::MANY;
      else
        select any r_part related by r_simp->R_PART[R207] where
          ( selected.Mult == 1 and selected.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == selected.Txt_Phrs ) ); // target is simple participant and is many
        if ( not_empty r_part )
          mult = Mult::MANY;
        end if;
      end if;
    else
      select one r_aone related by r_assoc->R_AONE[R209];
      select one r_aoth related by r_assoc->R_AOTH[R210];
      select one r_assr related by r_assoc->R_ASSR[R211];
      if ( r_aone.Mult == 1 and r_aone.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == r_aone.Txt_Phrs ) ) or                                          // target is associative one and is many
         ( r_aoth.Mult == 1 and r_aoth.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == r_aoth.Txt_Phrs ) ) or                                          // target is associative other and is many
         ( r_assr.Mult == 1 and r_assr.Obj_ID == target_o_obj.Obj_ID ) or                                                                                             // target is associative link and is many
         ( r_aoth.Mult == 1 and r_assr.Obj_ID == target_o_obj.Obj_ID and r_aone.Obj_ID == base_o_obj.Obj_ID and ( not_reflexive or phrase == r_aoth.Txt_Phrs ) ) or   // target is associative link in the direction of other and other is many
         ( r_aone.Mult == 1 and r_assr.Obj_ID == target_o_obj.Obj_ID and r_aoth.Obj_ID == base_o_obj.Obj_ID and ( not_reflexive or phrase == r_aone.Txt_Phrs ) )      // target is associative link in the direction of one and one is many
        mult = Mult::MANY;
      end if;
    end if;
  end if;
end if;

return mult;',
	"05a31d0a-15c4-4fe9-84b5-004baff831ec",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f61b2083-52b9-4d1b-9525-7ad28e2d1bb0",
	"89400ce7-dc54-4564-aee4-89f10e0979a8",
	'act_lnk',
	"bcbe8755-e8ea-4d2b-9f81-529c5437c084",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bcbe8755-e8ea-4d2b-9f81-529c5437c084",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Chain Link>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Selection/Selection.xtuml');
INSERT INTO PE_PE
	VALUES ("89400ce7-dc54-4564-aee4-89f10e0979a8",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("05a31d0a-15c4-4fe9-84b5-004baff831ec",
	"00000000-0000-0000-0000-000000000000",
	'Mult',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/types/types.xtuml');
INSERT INTO S_SYNC
	VALUES ("500db810-8625-4d25-bb73-68ef14883481",
	"00000000-0000-0000-0000-000000000000",
	'c_cToPath',
	'',
	'c_c = param.c_c;
path = ::formatPath( path:T::sub( format:"l", s:T::sub( format:"r", s:c_c.Name ) ) );
select one containing_ep_pkg related by c_c->PE_PE[R8001]->EP_PKG[R8000];
if ( not_empty containing_ep_pkg )
  path = ::ep_pkgToPath( ep_pkg:containing_ep_pkg ) + "/" + path;
else
  select one containing_c_c related by c_c->PE_PE[R8001]->C_C[R8003];
  if ( not_empty containing_c_c )
    path = ::c_cToPath( c_c:containing_c_c ) + "/" + path;
  end if;
end if;
return path;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("3fcc766b-1443-496c-a2ed-73f63ac077b1",
	"500db810-8625-4d25-bb73-68ef14883481",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("67f93d18-1045-4c6c-b0d5-a692023c471c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO PE_PE
	VALUES ("500db810-8625-4d25-bb73-68ef14883481",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4b5043be-4e1c-4c10-825a-8c6574064a95",
	"00000000-0000-0000-0000-000000000000",
	'containerMarkingPath',
	'',
	'pe = param.pe;
path = "";
select one ep_pkg related by pe->EP_PKG[R8000];
if ( not_empty ep_pkg )
  path = ep_pkg.Name;
else
  select one c_c related by pe->C_C[R8003];
  if ( not_empty c_c )
    path = c_c.Name;
  end if;
end if;
select one containing_pe related by pe->EP_PKG[R8000]->PE_PE[R8001];
if ( empty containing_pe )
  select one containing_pe related by pe->C_C[R8003]->PE_PE[R8001];
end if;
if ( not_empty containing_pe )
  container_path = ::containerMarkingPath( pe:containing_pe );
  if ("" != container_path)
    return container_path + "::" + path;
  else
    return path;
  end if;
else
  return path;
end if;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("f74db15e-0c8c-44ed-ab75-84bc0b98de3b",
	"4b5043be-4e1c-4c10-825a-8c6574064a95",
	'pe',
	"e988e223-9ca4-4b6f-a675-001eefe3aa24",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e988e223-9ca4-4b6f-a675-001eefe3aa24",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Packageable Element>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Packageable Element/Packageable Element.xtuml');
INSERT INTO PE_PE
	VALUES ("4b5043be-4e1c-4c10-825a-8c6574064a95",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("02367865-627d-4dfd-ad3d-07afac1a05d0",
	"00000000-0000-0000-0000-000000000000",
	'ep_pkgToPath',
	'',
	'ep_pkg = param.ep_pkg;
path = "";

// remap the path if necessary
select one pe related by ep_pkg->PE_PE[R8001];
select any remap_package_mark from instances of Mark where ( selected.markable_name == "Package" and
                                                            selected.path == ::containerMarkingPath( pe:pe ) + "::" + ep_pkg.Name and
                                                            selected.feature_name == "RemapPackage" );
 
if ( not_empty remap_package_mark )

  path = ::formatPath(path: remap_package_mark.value);
  
else

	path = ::formatPath( path:T::sub( format:"l", s:T::sub( format:"r", s:ep_pkg.Name ) ) );
	select one containing_ep_pkg related by ep_pkg->PE_PE[R8001]->EP_PKG[R8000];
	if ( not_empty containing_ep_pkg )
		path = ::ep_pkgToPath( ep_pkg:containing_ep_pkg ) + "/" + path;
	else
		select one containing_c_c related by ep_pkg->PE_PE[R8001]->C_C[R8003];
		if ( not_empty containing_c_c )
			path = ::c_cToPath( c_c:containing_c_c ) + "/" + path;
		end if;
	end if;

end if;
return path;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("dee45e6c-2ddb-405c-9dc1-53c1175de628",
	"02367865-627d-4dfd-ad3d-07afac1a05d0",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9939c670-a721-4742-a824-ed4b0df4acd6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Element Packaging/Element Packaging.xtuml');
INSERT INTO PE_PE
	VALUES ("02367865-627d-4dfd-ad3d-07afac1a05d0",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f3958084-9e75-4dcd-9c5b-acc44aa9cc7f",
	"00000000-0000-0000-0000-000000000000",
	'getInstRefTypeForClass',
	'',
	's_dt = param.s_dt;
o_obj = param.o_obj;
if ( not_empty s_dt and not_empty o_obj )
  if ( "inst_ref<Object>" == s_dt.Name )
    select any s_irdt related by o_obj->S_IRDT[R123] where ( not selected.isSet );
    select one s_dt related by s_irdt->S_DT[R17];
  elif ( "inst_ref_set<Object>" == s_dt.Name )
    select any s_irdt related by o_obj->S_IRDT[R123] where ( selected.isSet );
    select one s_dt related by s_irdt->S_DT[R17];
  end if;
end if;
return s_dt;',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("cfeeacf6-552e-46fe-ad93-59f2664c34da",
	"f3958084-9e75-4dcd-9c5b-acc44aa9cc7f",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Data Type>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("4ace5fe7-2ac8-4731-bf67-cf55c9b8869f",
	"f3958084-9e75-4dcd-9c5b-acc44aa9cc7f",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"cfeeacf6-552e-46fe-ad93-59f2664c34da",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("63f4ff99-f127-443b-a678-30ace41da702",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Class>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO PE_PE
	VALUES ("f3958084-9e75-4dcd-9c5b-acc44aa9cc7f",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("49e1849f-89ff-4aad-a91a-b882a0e32410",
	"00000000-0000-0000-0000-000000000000",
	'getOalStatement',
	'',
	'// TODO this routine assumes a statement is only one line long

body = param.body;
line_num = param.line_num;

i = 0;
line = "";
while ( i < line_num )
  end_of_line = STRING::indexof( haystack:body, needle:"\n" );
  if ( -1 != end_of_line )
    line = STRING::substr( s:body, begin:0, end:end_of_line );
    body = STRING::substr( s:body, begin:end_of_line+1, end:-1 );
  else
    line = body;
    break;
  end if;
  i = i + 1;
end while;

return STRING::trim( s:line );',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("67fd0ddd-1560-4db2-be9f-245148f5c09f",
	"49e1849f-89ff-4aad-a91a-b882a0e32410",
	'body',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a492c3af-35d7-41c1-99b1-15e289d4d8f8",
	"49e1849f-89ff-4aad-a91a-b882a0e32410",
	'line_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"67fd0ddd-1560-4db2-be9f-245148f5c09f",
	'');
INSERT INTO PE_PE
	VALUES ("49e1849f-89ff-4aad-a91a-b882a0e32410",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4dd4ddbc-b26f-4506-bc30-e080cd7ed717",
	"00000000-0000-0000-0000-000000000000",
	'getParType',
	'',
	'v_par = param.v_par;

select any o_tparm related by v_par->ACT_TFM[R627]->O_TFR[R673]->O_TPARM[R117] where (selected.Name == v_par.Name);
if empty o_tparm
  select any o_tparm related by v_par->V_TRV[R811]->O_TFR[R829]->O_TPARM[R117] where (selected.Name == v_par.Name);
end if;
select one par_s_dt related by o_tparm->S_DT[R118];

if empty par_s_dt

  select any s_bparm related by v_par->ACT_BRG[R628]->S_BRG[R674]->S_BPARM[R21] where (selected.Name == v_par.Name);
  if empty s_bparm
    select any s_bparm related by v_par->V_BRV[R810]->S_BRG[R828]->S_BPARM[R21] where (selected.Name == v_par.Name);
  end if;
  select one par_s_dt related by s_bparm->S_DT[R22];
  
  if empty par_s_dt
  
    select any c_pp related by v_par->ACT_SGN[R662]->SPR_RS[R660]->SPR_REP[R4502]->C_EP[R4500]->C_PP[R4006] where (selected.Name == v_par.Name);
    if empty c_pp
      select any c_pp related by v_par->ACT_SGN[R662]->SPR_PS[R663]->SPR_PEP[R4503]->C_EP[R4501]->C_PP[R4006] where (selected.Name == v_par.Name);
      if empty c_pp
        select any c_pp related by v_par->ACT_IOP[R679]->SPR_RO[R657]->SPR_REP[R4502]->C_EP[R4500]->C_PP[R4006] where (selected.Name == v_par.Name);
        if empty c_pp
          select any c_pp related by v_par->ACT_IOP[R679]->SPR_PO[R680]->SPR_PEP[R4503]->C_EP[R4501]->C_PP[R4006] where (selected.Name == v_par.Name);
          if empty c_pp
            select any c_pp related by v_par->V_MSV[R842]->SPR_REP[R845]->C_EP[R4500]->C_PP[R4006] where (selected.Name == v_par.Name);
            if empty c_pp
              select any c_pp related by v_par->V_MSV[R842]->SPR_PEP[R841]->C_EP[R4501]->C_PP[R4006] where (selected.Name == v_par.Name);
            end if;
          end if;
        end if;
      end if;
    end if;
    select one par_s_dt related by c_pp->S_DT[R4007];
    
    if empty par_s_dt
    
      select any s_sparm related by v_par->ACT_FNC[R669]->S_SYNC[R675]->S_SPARM[R24] where (selected.Name == v_par.Name);
      if empty s_sparm
        select any s_sparm related by v_par->V_FNV[R817]->S_SYNC[R827]->S_SPARM[R24] where (selected.Name == v_par.Name);
      end if;
      select one par_s_dt related by s_sparm->S_DT[R26];
      
      if empty par_s_dt
      
        select any sm_evtdi related by v_par->E_ESS[R700]->E_CES[R701]->E_CSME[R702]->SM_EVT[R706]->SM_EVTDI[R532] where (selected.Name == v_par.Name);
        if empty sm_evtdi
          select any sm_evtdi related by v_par->E_ESS[R700]->E_GES[R701]->E_GSME[R703]->SM_EVT[R707]->SM_EVTDI[R532] where (selected.Name == v_par.Name);
        end if;
        select one par_s_dt related by sm_evtdi->S_DT[R524];
      
      end if;
    end if;
  end if;
end if;

return par_s_dt;',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("9d400812-77ad-479d-9490-0350c974e25a",
	"4dd4ddbc-b26f-4506-bc30-e080cd7ed717",
	'v_par',
	"2f2a9dba-8f5a-45a4-8c26-dfe684dbe206",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2f2a9dba-8f5a-45a4-8c26-dfe684dbe206",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Actual Parameter>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("4dd4ddbc-b26f-4506-bc30-e080cd7ed717",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("30a8a39d-35cf-4601-9643-e0b5785ae1ec",
	"00000000-0000-0000-0000-000000000000",
	'getUDTCoreType',
	'',
	's_udt = param.s_udt;
select any s_dt from instances of S_DT where false;
if ( not_empty s_udt )
  select one s_dt related by s_udt->S_DT[R18];
  select one base_udt related by s_dt->S_UDT[R17];
  if ( not_empty base_udt )
    return ::getUDTCoreType( s_udt:base_udt );
  end if;
end if;
return s_dt;',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b25f41e0-25a9-45a5-a3db-02a8c0c11417",
	"30a8a39d-35cf-4601-9643-e0b5785ae1ec",
	's_udt',
	"587d8963-4757-4426-bc18-b235bcbd7937",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("587d8963-4757-4426-bc18-b235bcbd7937",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<User Data Type>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("30a8a39d-35cf-4601-9643-e0b5785ae1ec",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5f3553f1-badb-440e-aa47-4a2c6cf419f4",
	"00000000-0000-0000-0000-000000000000",
	'numReferences',
	'',
	'v_var = param.v_var;
num_references = 0;
select many refs1 related by v_var->ACT_FOR[R614];
num_references = num_references + cardinality refs1;
select many refs2 related by v_var->ACT_REL[R615];
num_references = num_references + cardinality refs2;
select many refs3 related by v_var->ACT_REL[R616];
num_references = num_references + cardinality refs3;
select many refs4 related by v_var->ACT_RU[R617];
num_references = num_references + cardinality refs4;
select many refs5 related by v_var->ACT_UNR[R620];
num_references = num_references + cardinality refs5;
select many refs6 related by v_var->ACT_UNR[R621];
num_references = num_references + cardinality refs6;
select many refs7 related by v_var->ACT_URU[R622];
num_references = num_references + cardinality refs7;
select many refs8 related by v_var->ACT_URU[R623];
num_references = num_references + cardinality refs8;
select many refs9 related by v_var->ACT_URU[R624];
num_references = num_references + cardinality refs9;
select many refs10 related by v_var->ACT_CR[R633];
num_references = num_references + cardinality refs10;
select many refs11 related by v_var->ACT_DEL[R634];
num_references = num_references + cardinality refs11;
select many refs12 related by v_var->ACT_SEL[R638];
num_references = num_references + cardinality refs12;
select many refs13 related by v_var->ACT_FIO[R639];
num_references = num_references + cardinality refs13;
select many refs14 related by v_var->ACT_FOR[R652];
num_references = num_references + cardinality refs14;
select many refs15 related by v_var->ACT_FIW[R665];
num_references = num_references + cardinality refs15;
select many refs16 related by v_var->ACT_TFM[R667];
num_references = num_references + cardinality refs16;
select many refs17 related by v_var->E_CES[R710];
num_references = num_references + cardinality refs17;
select many refs18 related by v_var->E_CEI[R711];
num_references = num_references + cardinality refs18;
select many refs19 related by v_var->E_GEN[R712];
num_references = num_references + cardinality refs19;
select many refs20 related by v_var->V_TVL[R805];
num_references = num_references + cardinality refs20;
select many refs21 related by v_var->V_IRF[R808];
num_references = num_references + cardinality refs21;
select many refs22 related by v_var->V_ISR[R809];
num_references = num_references + cardinality refs22;
select many refs23 related by v_var->ACT_RU[R618];
num_references = num_references + cardinality refs23;
select many refs24 related by v_var->ACT_RU[R619];
num_references = num_references + cardinality refs24;
return num_references;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b0093fed-0288-4a3e-87fa-e66b47f177a0",
	"5f3553f1-badb-440e-aa47-4a2c6cf419f4",
	'v_var',
	"0e65b778-e815-4f26-b470-456b52561157",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0e65b778-e815-4f26-b470-456b52561157",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Variable>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("5f3553f1-badb-440e-aa47-4a2c6cf419f4",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3c9ba2cb-4e91-4125-a372-ad6bbd47032f",
	"00000000-0000-0000-0000-000000000000",
	'oirGetPhrase',
	'',
	'select any r_oir from instances of R_OIR where ( selected.OIR_ID == param.r_oir_id );
phrase = "";
select one r_part related by r_oir->R_RTO[R203]->R_PART[R204];
if ( not_empty r_part )
  phrase = r_part.Txt_Phrs;
else
select one r_form related by r_oir->R_RGO[R203]->R_FORM[R205];
if ( not_empty r_form )
  phrase = r_form.Txt_Phrs;
else
select one r_aone related by r_oir->R_RTO[R203]->R_AONE[R204];
if ( not_empty r_aone )
  phrase = r_aone.Txt_Phrs;
else
select one r_aoth related by r_oir->R_RTO[R203]->R_AOTH[R204];
if ( not_empty r_aoth )
  phrase = r_aoth.Txt_Phrs;
else
select one r_sub related by r_oir->R_RGO[R203]->R_SUB[R205];
select one r_super related by r_oir->R_RTO[R203]->R_SUPER[R204];
if ( not_empty r_sub or not_empty r_super )
  phrase = "is_a";
end if; end if; end if; end if; end if;
return phrase;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("4201683e-ea8c-4e09-ad81-d16b7144fae2",
	"3c9ba2cb-4e91-4125-a372-ad6bbd47032f",
	'r_oir_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3c9ba2cb-4e91-4125-a372-ad6bbd47032f",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e82bc2bc-c546-4476-b4cc-6e9d72ac60cb",
	"00000000-0000-0000-0000-000000000000",
	'precedenceCheck',
	'',
	'// returns < 0 if op1 is lower precedence than op2
// returns > 0 if op1 is greater precedence than op2
// returns 0 if op1 is the same precedence than op2

// | Operator Precedence                                              |        |
// | Operator(s)                   | Description                      | Number |
// |-------------------------------|----------------------------------|--------|
// | primary expression            | atomic value                     | 7      |
// | cardinality, empty, not_empty | instance reference and set tests | 6      |
// | not , -                       | negation                         | 5      |
// | * , / , % , & , ^             | multiplicative operation         | 4      |
// | + , - , |                     | additive operation               | 3      |
// | == , != , < , > , <= , >=     | comparison operation             | 2      |
// | and                           | logical conjunction              | 1      |
// | or                            | logical disjunction              | 0      |


val1 = param.val1;
val2 = param.val2;

prec1 = 7;
prec2 = 7;

i = 0;
while i < 2
  prec = 7;
  val = val1;
  if ( i != 0 )
    val = val2;
  end if;
  select one v_uny related by val->V_UNY[R801];
  if ( not_empty v_uny )
    if ( ( "cardinality" == T::sub( format:"l", s:v_uny.Operator ) ) or ( "empty" == T::sub( format:"l", s:v_uny.Operator ) ) or ( "not_empty" == T::sub( format:"l", s:v_uny.Operator ) ) )
      prec = 6;
    elif ( ( "not" == T::sub( format:"l", s:v_uny.Operator ) ) or ( "-" == v_uny.Operator ) or ( "+" == v_uny.Operator ) )
      prec = 5;
    end if;
  else
    select one v_bin related by val->V_BIN[R801];
    if ( not_empty v_bin )
      if ( ( "*" == v_bin.Operator ) or ( "/" == v_bin.Operator ) or ( "%" == v_bin.Operator ) or ( "&" == v_bin.Operator ) or ( "^" == v_bin.Operator ) )
        prec = 4;
      elif ( ( "+" == v_bin.Operator ) or ( "-" == v_bin.Operator ) or ( "|" == v_bin.Operator ) )
        prec = 3;
      elif ( ( "==" == v_bin.Operator ) or ( "!=" == v_bin.Operator ) or ( "<" == v_bin.Operator ) or ( ">" == v_bin.Operator ) or ( "<=" == v_bin.Operator ) or ( ">=" == v_bin.Operator ) )
        prec = 2;
      elif ( "and" == T::sub( format:"l", s:v_bin.Operator ) )
        prec = 1;
      elif ( "or" == T::sub( format:"l", s:v_bin.Operator ) )
        prec = 0;
      end if;
    end if;
  end if;
  if ( i == 0 )
    prec1 = prec;
  else
    prec2 = prec;
  end if;
  i = i + 1;
end while;

return prec1 - prec2;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("c3021527-2051-4986-81e5-da2e616b064d",
	"e82bc2bc-c546-4476-b4cc-6e9d72ac60cb",
	'val1',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5400d269-ee31-4742-ac70-8532512a854c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("ea26c0d2-8a08-4282-9cc5-8cb913722787",
	"e82bc2bc-c546-4476-b4cc-6e9d72ac60cb",
	'val2',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"c3021527-2051-4986-81e5-da2e616b064d",
	'');
INSERT INTO PE_PE
	VALUES ("e82bc2bc-c546-4476-b4cc-6e9d72ac60cb",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("51bf8c96-b362-4f6d-8d28-a17fdb1058f1",
	"00000000-0000-0000-0000-000000000000",
	'r_rel_is_formal',
	'',
	'r_rel = param.r_rel;
select one simp related by r_rel->R_SIMP[R206];
if ( not_empty simp )
  select one form related by simp->R_FORM[R208];
  if ( not_empty form )
    return true;
  end if;
else
  select one assoc related by r_rel->R_ASSOC[R206];
  if ( not_empty assoc )
    select one rto1 related by assoc->R_AONE[R209]->R_RTO[R204];
    select any rtida1 related by rto1->O_RTIDA[R110];
    select one rto2 related by assoc->R_AOTH[R210]->R_RTO[R204];
    select any rtida2 related by rto2->O_RTIDA[R110];
    return not_empty rtida1 and not_empty rtida2;
  else
    select one subsup related by r_rel->R_SUBSUP[R206];
    if ( not_empty subsup )
      select one rto related by subsup->R_SUPER[R212]->R_RTO[R204];
      select any rtida related by rto->O_RTIDA[R110];
      return not_empty rtida;
    end if;
  end if;
end if;
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("e3bfa540-cef6-48e2-b4b6-a0a65eb034f6",
	"51bf8c96-b362-4f6d-8d28-a17fdb1058f1",
	'r_rel',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4480b008-8c74-4f57-9256-08b7365520bc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Association>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO PE_PE
	VALUES ("51bf8c96-b362-4f6d-8d28-a17fdb1058f1",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("21291b74-fa17-45f9-9cd3-9f36d4fafd56",
	"00000000-0000-0000-0000-000000000000",
	'r_rel_is_reflexive',
	'',
	'r_rel = param.r_rel;
select one srel related by r_rel->R_SIMP[R206];
if ( not_empty srel )
  select many part_set related by srel->R_PART[R207];
  if ( cardinality part_set > 1 )
    select any part1 related by srel->R_PART[R207];
    select any part2 related by srel->R_PART[R207]
      where selected.OIR_ID != part1.OIR_ID;
    if ( part1.Obj_ID == part2.Obj_ID )
      return true;
    end if;
  else
    select any part related by srel->R_PART[R207];
    select one form related by srel->R_FORM[R208];
    if ( not_empty form )
      if ( part.Obj_ID == form.Obj_ID )
        return true;
      end if;
    end if;
  end if;
else
  select one arel related by r_rel->R_ASSOC[R206];
  if ( not_empty arel )
    select one aone related by arel->R_AONE[R209];
    select one aoth related by arel->R_AOTH[R210];
    if ( aone.Obj_ID == aoth.Obj_ID )
      return true;
    end if;
  end if;
end if;
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("864262c1-abd9-4e25-a10c-4af16f0e9e99",
	"21291b74-fa17-45f9-9cd3-9f36d4fafd56",
	'r_rel',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("21291b74-fa17-45f9-9cd3-9f36d4fafd56",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4a31cd64-c145-4174-91a2-a32944f69be6",
	"00000000-0000-0000-0000-000000000000",
	's_dtIsBuiltin',
	'',
	's_dt = param.s_dt;
// builtin types have not containing package or component
select one c_c related by s_dt->PE_PE[R8001]->C_C[R8003];
select one ep_pkg related by s_dt->PE_PE[R8001]->EP_PKG[R8000];
return ( empty c_c and empty ep_pkg );',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("a485d8e4-eeaf-4deb-bbcf-a33609812cf5",
	"4a31cd64-c145-4174-91a2-a32944f69be6",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4a31cd64-c145-4174-91a2-a32944f69be6",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("44793d4c-db6c-4bb1-8ee6-2b6bfff4361e",
	"00000000-0000-0000-0000-000000000000",
	'typeIsBasedOn',
	'',
	's_dt = param.type;
parentType = param.parentType;
while not_empty s_dt
  if (s_dt == parentType)
    return true;
  elif (s_dt.Name == "real" and parentType.Name == "integer")
    return true;  // special case: real types can be converted to integer with a simple cast
  elif (s_dt.Name == "timestamp" and parentType.Name == "integer")
    return true;  // special case: timestamp (long) can be converted to integer with a simple cast
  end if;
  select one s_dt related by s_dt->S_UDT[R17]->S_DT[R18];
end while;
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("4cb5dcc3-b489-4860-9b8c-db0e1c0c8b77",
	"44793d4c-db6c-4bb1-8ee6-2b6bfff4361e",
	'type',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a2443cde-92e8-44bc-bf03-41431448f903",
	"44793d4c-db6c-4bb1-8ee6-2b6bfff4361e",
	'parentType',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"4cb5dcc3-b489-4860-9b8c-db0e1c0c8b77",
	'');
INSERT INTO PE_PE
	VALUES ("44793d4c-db6c-4bb1-8ee6-2b6bfff4361e",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5371c110-4c98-4780-9faa-a41d42fbe12b",
	"00000000-0000-0000-0000-000000000000",
	'getReturnType',
	'',
	'act_act = param.act_act;
select one s_dt related by act_act->ACT_FNB[R698]->S_SYNC[R695]->S_DT[R25];
if (empty s_dt)
  select one s_dt related by act_act->ACT_OPB[R698]->O_TFR[R696]->S_DT[R116];
  if (empty s_dt)
    select one s_dt related by act_act->ACT_BRB[R698]->S_BRG[R697]->S_DT[R20];
    if (empty s_dt)
      select one s_dt related by act_act->ACT_DAB[R698]->O_DBATTR[R693]->O_BATTR[R107]->O_ATTR[R106]->S_DT[R114];
    end if;
  end if;
end if;
return s_dt;',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("5ca2f4d2-777d-4c7e-9161-d168b4dd56d8",
	"5371c110-4c98-4780-9faa-a41d42fbe12b",
	'act_act',
	"2916519f-66f5-47c2-9e5d-9beb4c945efc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2916519f-66f5-47c2-9e5d-9beb4c945efc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Body>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Body/Body.xtuml');
INSERT INTO PE_PE
	VALUES ("5371c110-4c98-4780-9faa-a41d42fbe12b",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("69e225ca-1e1d-49bf-b836-419932fa9142",
	"00000000-0000-0000-0000-000000000000",
	'transformBuiltinTypes',
	'',
	'select many s_dts from instances of S_DT;
for each s_dt in s_dts

  if ( ::s_dtIsBuiltin( s_dt:s_dt ) )

    type_name = "";
    type_package = "";
    type_primitive = false;
    type_unique = false;
    type_inst = false;
    type_instset = false;
    type_default_value = "";
    if ( "boolean" == s_dt.Name )
      type_name = "boolean";
      type_primitive = true;
      type_default_value = "false";
    elif ( "component_ref" == s_dt.Name )
      type_name = "IComponent";
      type_package = "io.ciera.runtime.summit.components";
      type_default_value = "null";
    elif ( "date" == s_dt.Name )
      type_name = "Date";
      type_package = "io.ciera.runtime.summit.types";
      type_default_value = "new Date()";
    elif ( "inst<Event>" == s_dt.Name )
      type_name = "EventHandle";
      type_package = "io.ciera.runtime.summit.statemachine";
      type_default_value = "new EventHandle()";
    elif ( "inst_ref<Timer>" == s_dt.Name )
      type_name = "TimerHandle";
      type_package = "io.ciera.runtime.summit.time";
      type_default_value = "new TimerHandle()";
    elif ( "integer" == s_dt.Name )
      type_name = "int";
      type_primitive = true;
      type_default_value = "0";
    elif ( "real" == s_dt.Name )
      type_name = "double";
      type_primitive = true;
      type_default_value = "0d";
    elif ( "string" == s_dt.Name )
      type_name = "String";
      type_package = "";
      type_default_value = STRING::quote() + STRING::quote();
    elif ( "timestamp" == s_dt.Name )
      type_name = "long";
      type_primitive = true;
      type_default_value = "0L";
    elif ( "unique_id" == s_dt.Name )
      type_name = "UniqueId";
      type_package = "io.ciera.runtime.summit.types";
      type_unique = true;
      type_default_value = "new UniqueId()";
    elif ( "void" == s_dt.Name )
      type_name = "void";
      type_primitive = true;
      type_default_value = "";
    elif ( "inst_ref_set<Object>" == s_dt.Name )
      type_name = "IInstanceSet";
      type_package = "io.ciera.runtime.summit.classes";
      type_instset = true;
      type_default_value = "null";
    elif ( "inst_ref<Object>" == s_dt.Name )
      type_name = "IModelInstance";
      type_package = "io.ciera.runtime.summit.classes";
      type_inst = true;
      type_default_value = "null";
    elif ( "inst_ref<Mapping>" == s_dt.Name ) // TODO
      type_name = "InstRefMapping";
      type_package = "io.ciera.runtime.summit.types";
      type_default_value = "null";
    elif ( "inst<Mapping>" == s_dt.Name ) // TODO
      type_name = "InstMapping";
      type_package = "io.ciera.runtime.summit.types";
      type_default_value = "null";
    end if;

    if ( "" != type_name )
      create object instance type of Type;
      type.name = type_name;
      type.package = type_package;
      type.default_value = type_default_value;
      ::Type_resolve(t:type,  s_dt:s_dt );
      create object instance builtin of BuiltInType;
      relate builtin to type across R407;
      builtin.primitive = type_primitive;
      builtin.unique = type_unique;
      builtin.inst = type_inst;
      builtin.instset = type_instset;
    end if;

  end if;

end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("69e225ca-1e1d-49bf-b836-419932fa9142",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f393769d-d630-4d0a-a083-332ccde2fbcf",
	"00000000-0000-0000-0000-000000000000",
	'TypeReference_getInstance',
	'',
	's_dt = param.s_dt;
s_dims = param.s_dims;
select one type related by s_dt->Type[R423];
if ( empty type ) // Create new Unresolved Type
  // get the next unique number
  num = 0;
  select many unresolved_types from instances of UnresolvedType;
  for each ut in unresolved_types
    if ( ut.num >= num )
      num = ut.num + 1;
    end if;
  end for;

  create object instance type of Type;
  type.name = "UnresolvedType" + STRING::itoa( i:num );
  type.package = "";
  if ( not_empty s_dt )
    relate s_dt to type across R423;
  else
    // TODO bad
  end if;
  create object instance unresolved_type of UnresolvedType;
  relate unresolved_type to type across R407;
  unresolved_type.num = num;
end if;
return ::TypeReference_getInstanceFromType( type:type, s_dims:s_dims );',
	"096d9dad-f227-4793-bb43-a1915881b825",
	1,
	'',
	0,
	1);
INSERT INTO S_SPARM
	VALUES ("398bf587-a414-4949-b577-6d61c9da0264",
	"f393769d-d630-4d0a-a083-332ccde2fbcf",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("71bffa9e-ef39-477d-bd30-1ea9cb631bf1",
	"f393769d-d630-4d0a-a083-332ccde2fbcf",
	's_dims',
	"9e615117-5ec7-43cc-a3c5-fe7cdd626110",
	0,
	'',
	"398bf587-a414-4949-b577-6d61c9da0264",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9e615117-5ec7-43cc-a3c5-fe7cdd626110",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Dimensions>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("f393769d-d630-4d0a-a083-332ccde2fbcf",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("096d9dad-f227-4793-bb43-a1915881b825",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Type Reference>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/type/type.xtuml');
INSERT INTO S_SYNC
	VALUES ("6efdf054-c8e5-4bf1-8cf1-973f0d9f9006",
	"00000000-0000-0000-0000-000000000000",
	'TypeReference_getInstanceFromType',
	'',
	'type = param.type;
s_dims = param.s_dims;
dim_string = "";
if ( not_empty s_dims )
  i = 0;
  while ( i < cardinality s_dims )
    for each s_dim in s_dims
      if ( s_dim.dimensionCount == i )
        dim_string = dim_string + "[]";
        break;
      end if;
    end for;
    i = i + 1;
  end while;
  select any type_ref related by type->TypeReference[R3800]->ArrayTypeReference[R3801]->TypeReference[R3801] where ( selected.type_reference_name == type.name + dim_string );
  if ( empty type_ref )
    create object instance type_ref of TypeReference;
    type_ref.type_reference_name = type.name + dim_string;
    create object instance array_type_ref of ArrayTypeReference;
    array_type_ref.dims = dim_string;
    relate type_ref to type across R3800;
    relate type_ref to array_type_ref across R3801;
  end if;
end if;
return ::TypeReference_getInstanceWithDimString(type:type, dims:dim_string);',
	"096d9dad-f227-4793-bb43-a1915881b825",
	1,
	'',
	0,
	4);
INSERT INTO S_SPARM
	VALUES ("52bcad56-6b29-467f-aa8d-f5b3c56798c9",
	"6efdf054-c8e5-4bf1-8cf1-973f0d9f9006",
	'type',
	"b4a754cc-b0a5-4777-ae98-df570434ea2a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b4a754cc-b0a5-4777-ae98-df570434ea2a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Type>',
	'',
	'',
	'../../../../core-architecture/models/core-architecture/architecture/type/type.xtuml');
INSERT INTO S_SPARM
	VALUES ("af910824-2877-4160-9c4c-cf5950ac6ba0",
	"6efdf054-c8e5-4bf1-8cf1-973f0d9f9006",
	's_dims',
	"9e615117-5ec7-43cc-a3c5-fe7cdd626110",
	0,
	'',
	"52bcad56-6b29-467f-aa8d-f5b3c56798c9",
	'');
INSERT INTO PE_PE
	VALUES ("6efdf054-c8e5-4bf1-8cf1-973f0d9f9006",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3ef486f5-d6f6-4393-a048-ae1dbd8b08af",
	"00000000-0000-0000-0000-000000000000",
	'Type_resolve',
	'',
	's_dt = param.s_dt;
t = param.t;
select one unresolved_type related by s_dt->Type[R423]->UnresolvedType[R407];
if ( not_empty unresolved_type )
  select one old_type related by unresolved_type->Type[R407];
  
  // unrelate old types and hook up the new types
  select many old_type_refs related by old_type->TypeReference[R3800];
  for each old_type_ref in old_type_refs
    // get the corresponding new type ref
    select any self_ref related by t->TypeReference[R3800] where false;
    select one old_basic_ref related by old_type_ref->BasicTypeReference[R3801];
    if ( not_empty old_basic_ref )
      self_ref = ::TypeReference_getInstanceWithDimString( type:t, dims:"" );
    else
    select one old_array_ref related by old_type_ref->ArrayTypeReference[R3801];
    if ( not_empty old_array_ref )
      self_ref = ::TypeReference_getInstanceWithDimString( type:t, dims:old_array_ref.dims );
    end if; end if;
    // replace types
    select many attrs related by old_type_ref->Attribute[R424];
    for each attr in attrs
      unrelate old_type_ref from attr across R424;
      relate self_ref to attr across R424;
    end for;
    select many invocables related by old_type_ref->InvocableObject[R428];
    for each invocable in invocables
      unrelate old_type_ref from invocable across R428;
      relate self_ref to invocable across R428;
    end for;
    select many parms related by old_type_ref->FormalParameter[R431];
    for each parm in parms
      unrelate old_type_ref from parm across R431;
      relate self_ref to parm across R431;
    end for;
    select many selectors related by old_type_ref->Selector[R446];
    for each selector in selectors
      unrelate old_type_ref from selector across R446;
      relate self_ref to selector across R446;
    end for;
    select many expressions related by old_type_ref->Expression[R795];
    for each expression in expressions
      unrelate old_type_ref from expression across R795;
      relate self_ref to expression across R795;
    end for;
  end for;

  unrelate old_type from s_dt across R423;
  relate t to s_dt across R423;
  old_type.dispose();

elif ( not_empty s_dt )
  relate t to s_dt across R423;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	5);
INSERT INTO S_SPARM
	VALUES ("5f9a2eab-9ac8-4604-9c75-555663d8ec74",
	"3ef486f5-d6f6-4393-a048-ae1dbd8b08af",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"a8339540-0bfc-4610-8fec-5a7b9cee896a",
	'');
INSERT INTO S_SPARM
	VALUES ("a8339540-0bfc-4610-8fec-5a7b9cee896a",
	"3ef486f5-d6f6-4393-a048-ae1dbd8b08af",
	't',
	"b4a754cc-b0a5-4777-ae98-df570434ea2a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3ef486f5-d6f6-4393-a048-ae1dbd8b08af",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("59e4b4ae-a559-4bcc-b859-851adb7ee179",
	"00000000-0000-0000-0000-000000000000",
	'resolveUserDefinedTypes',
	'',
	'select many udts from instances of UserDefinedType;
for each udt in udts

  select one type related by udt->Type[R407];
  select one base_type related by type->S_DT[R423]->S_UDT[R17]->S_DT[R18]->Type[R423];
  if ( empty base_type )
    // TODO bad
  end if;
  
  relate udt to base_type across R3802;
  
  // add to imports
  select one file related by udt->File[R401];
  ::addTypeToImports( file:file, type_to_import:base_type, type:ImportType::IMPL );

end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("59e4b4ae-a559-4bcc-b859-851adb7ee179",
	1,
	"5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("5c0e4147-5dfb-48d3-a70d-1020d78fa1e2",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("9092a4a9-91f5-4e59-984b-3ca72917240d",
	'tool-core',
	1,
	'../tool-core.xtuml');
